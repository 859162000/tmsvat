package com.deloitte.tms.pl.message.template.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.pl.message.template.dao.MessageTemplateDao;
import com.deloitte.tms.pl.message.template.model.MessageParameter;
import com.deloitte.tms.pl.message.template.model.MessageParameterInParam;
import com.deloitte.tms.pl.message.template.model.MessageTemplate;
import com.deloitte.tms.pl.message.template.model.MessageTemplateInParam;
import com.deloitte.tms.pl.message.template.service.MessageTemplateService;
import com.deloitte.tms.pl.system.model.ByteContent;
import com.deloitte.tms.pl.system.service.ByteContentService;
/**
 * Home object for domain model class MessageTemplate.
 * @see com.deloitte.tms.pl.message.template.model
 * @author Hibernate Tools
 */
@Component(MessageTemplateService.BEAN_ID)
public class MessageTemplateServiceImpl extends BaseService implements MessageTemplateService{
	@Resource
	MessageTemplateDao messageTemplateDao;
	@Resource
	ByteContentService byteContentService;

	@Override
	public IDao getDao() {
		return messageTemplateDao;
	}

	@Override
	public DaoPage findMessageTemplateByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= messageTemplateDao.findMessageTemplateByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertMessageTemplateToInParam((List<MessageTemplate>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<MessageTemplateInParam> findMessageTemplateByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<MessageTemplate> temp= messageTemplateDao.findMessageTemplateByParams(params);
		return convertMessageTemplateToInParam(temp);
	}
	@Override
	public void saveMessageTemplateDataListsMap(Map dataListsMap) {
		Collection<MessageTemplateInParam> deleteList = BatchUtils.to(MessageTemplateInParam.class).getDeleteEntities(dataListsMap);
		Collection<MessageTemplateInParam> insertList =  BatchUtils.to(MessageTemplateInParam.class).getInsertEntities(dataListsMap);
		Collection<MessageTemplateInParam> updateList =  BatchUtils.to(MessageTemplateInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(MessageTemplateInParam inParam: updateList){
				MessageTemplate entity=convertMessageTemplateInParamToEntity(inParam);
				messageTemplateDao.update(entity);
			}		
//			messageTemplateDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(MessageTemplateInParam inParam: insertList){
				MessageTemplate entity=convertMessageTemplateInParamToEntity(inParam);
				AssertHelper.notEmpty_assert(inParam.getRelationId(),"关联不能为空");
				messageTemplateDao.save(entity);
				inParam.setId(entity.getId());
			}
//			messageTemplateDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(MessageTemplateInParam inParam:deleteList){
				MessageTemplate entity=new MessageTemplate();
				entity.setId(inParam.getId());
				ByteContent byteContent=findByteContent(entity.getId());
				if(byteContent!=null){
					messageTemplateDao.remove(byteContent);
				}
				messageTemplateDao.remove(entity);
			}
//			messageTemplateDao.removeAll(deleteList);
		}
		
	}
	private List<MessageTemplateInParam> convertMessageTemplateToInParam(List<MessageTemplate> models){
		List<MessageTemplateInParam> result=new ArrayList<MessageTemplateInParam>();
		for(MessageTemplate initiation:models){
			MessageTemplateInParam inparam=convertMessageTemplateToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public MessageTemplateInParam convertMessageTemplateToInParam(MessageTemplate model){
		MessageTemplateInParam inparam=new MessageTemplateInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public MessageTemplate convertMessageTemplateInParamToEntity(MessageTemplateInParam inParam){
		MessageTemplate entity=new MessageTemplate();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	@Override
	public DaoPage findMessageParameterByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= messageTemplateDao.findMessageParameterByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertMessageParameterToInParam((List<MessageParameter>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<MessageParameterInParam> findMessageParameterByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<MessageParameter> temp= messageTemplateDao.findMessageParameterByParams(params);
		return convertMessageParameterToInParam(temp);
	}
	@Override
	public void saveMessageParameterDataListsMap(Map dataListsMap) {
		Collection<MessageParameterInParam> deleteList = BatchUtils.to(MessageParameterInParam.class).getDeleteEntities(dataListsMap);
		Collection<MessageParameterInParam> insertList =  BatchUtils.to(MessageParameterInParam.class).getInsertEntities(dataListsMap);
		Collection<MessageParameterInParam> updateList =  BatchUtils.to(MessageParameterInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(MessageParameterInParam inParam: updateList){
				MessageParameter entity=convertMessageParameterInParamToEntity(inParam);
				messageTemplateDao.update(entity);
			}		
//			messageTemplateDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(MessageParameterInParam inParam: insertList){
				MessageParameter entity=convertMessageParameterInParamToEntity(inParam);
				messageTemplateDao.save(entity);
				inParam.setId(entity.getId());
			}
//			messageTemplateDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(MessageParameterInParam inParam:deleteList){
				MessageParameter entity=new MessageParameter();
				entity.setId(inParam.getId());
				messageTemplateDao.remove(entity);
			}
//			messageTemplateDao.removeAll(deleteList);
		}
	}
	private List<MessageParameterInParam> convertMessageParameterToInParam(List<MessageParameter> models){
		List<MessageParameterInParam> result=new ArrayList<MessageParameterInParam>();
		for(MessageParameter initiation:models){
			MessageParameterInParam inparam=convertMessageParameterToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public MessageParameterInParam convertMessageParameterToInParam(MessageParameter model){
		MessageParameterInParam inparam=new MessageParameterInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public MessageParameter convertMessageParameterInParamToEntity(MessageParameterInParam inParam){
		MessageParameter entity=new MessageParameter();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	public ByteContent findByteContent(Map params)
	{
		Object value=params.get("messageTemplateId");
		AssertHelper.notEmpty_assert(value,"ByteContent关联主键不能为空");
//		MessageTemplate messageTemplate=(MessageTemplate) messageTemplateDao.get(MessageTemplate.class, Long.parseLong(value.toString()));
		ByteContent result= byteContentService.getByteContent(MessageTemplateService.GROUPID_CONTENT, value.toString());
		return result;
	}
	public ByteContent findByteContent(Long messageTemplateId)
	{
		AssertHelper.notEmpty_assert(messageTemplateId,"ByteContent关联主键不能为空");
		ByteContent result= byteContentService.getByteContent(MessageTemplateService.GROUPID_CONTENT, messageTemplateId.toString());
		return result;
	}
}

