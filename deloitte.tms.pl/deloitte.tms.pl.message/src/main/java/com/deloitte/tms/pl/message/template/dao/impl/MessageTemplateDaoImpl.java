package com.deloitte.tms.pl.message.template.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.pl.message.template.dao.MessageTemplateDao;
import com.deloitte.tms.pl.message.template.model.MessageParameter;
import com.deloitte.tms.pl.message.template.model.MessageTemplate;
import com.deloitte.tms.pl.system.model.ByteContent;
/**
 * Home object for domain model class MessageTemplate.
 * @see com.deloitte.tms.pl.message.template.model
 * @author Hibernate Tools
 */
@Component(MessageTemplateDao.BEAN_ID)
public class MessageTemplateDaoImpl extends BaseDao<MessageTemplate> implements MessageTemplateDao{
	public DaoPage findMessageTemplateByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildMessageTemplateQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<MessageTemplate> findMessageTemplateByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildMessageTemplateQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildMessageTemplateQuery(StringBuffer query,Map values,Map params) {
		query.append(" from MessageTemplate where 1=1 ");
		Object value=params.get("groupId");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and groupId=:groupId");
			values.put("groupId", value);
		}
		value=params.get("relationId");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and relationId=:relationId");
			values.put("relationId", value);
		}else{
			query.append(" and relationId!=:relationId");
			values.put("relationId", "0");
		}
		value=params.get("isdefault");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and isdefault=:isdefault");
			values.put("isdefault", value);
		}
	}
	public DaoPage findMessageParameterByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildMessageParameterQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<MessageParameter> findMessageParameterByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildMessageParameterQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildMessageParameterQuery(StringBuffer query,Map values,Map params) {
		query.append(" from MessageParameter where 1=1 ");
		Object value=params.get("messageTemplateId");
		if(value!=null&&!"".equals(value))
		{
			value=Long.parseLong(value.toString());
			query.append(" and messageTemplateId=:messageTemplateId");
			values.put("messageTemplateId", value);
		}
		value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
	}
	public ByteContent findByteContent(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildByteContentQuery(query, values, params);
		return (ByteContent) getFirstRecord(findBy(query, values));
	}
	private void buildByteContentQuery(StringBuffer query,Map values,Map params) {
		query.append(" from ByteContent where 1=1 ");
		Object value=params.get("messageTemplateId");
		AssertHelper.notEmpty_assert("ByteContent关联主键不能为空");
		if(value!=null&&!"".equals(value))
		{
			value=Long.parseLong(value.toString());
			query.append(" and messageTemplateId=:messageTemplateId");
			values.put("messageTemplateId", value);
		}
	}
}

