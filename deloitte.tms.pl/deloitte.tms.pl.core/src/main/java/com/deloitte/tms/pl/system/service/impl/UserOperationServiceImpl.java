package com.deloitte.tms.pl.system.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.pl.system.dao.UserOperationDao;
import com.deloitte.tms.pl.system.model.UserOperation;
import com.deloitte.tms.pl.system.model.UserOperationInParam;
import com.deloitte.tms.pl.system.service.UserOperationService;
/**
 * Home object for domain model class UserOperation.
 * @see com.deloitte.tms.pl.system.model
 * @author Hibernate Tools
 */
@Component(UserOperationService.BEAN_ID)
public class UserOperationServiceImpl extends BaseService implements UserOperationService{
	@Resource
	UserOperationDao userOperationDao;

	@Override
	public IDao getDao() {
		return userOperationDao;
	}

	@Override
	public DaoPage findUserOperationByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= userOperationDao.findUserOperationByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertUserOperationToInParam((List<UserOperation>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<UserOperationInParam> findUserOperationByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<UserOperation> temp= userOperationDao.findUserOperationByParams(params);
		return convertUserOperationToInParam(temp);
	}
	@Override
	public void saveUserOperationDataListsMap(Map dataListsMap) {
		Collection<UserOperationInParam> deleteList = BatchUtils.to(UserOperationInParam.class).getDeleteEntities(dataListsMap);
		Collection<UserOperationInParam> insertList =  BatchUtils.to(UserOperationInParam.class).getInsertEntities(dataListsMap);
		Collection<UserOperationInParam> updateList =  BatchUtils.to(UserOperationInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(UserOperationInParam inParam: updateList){
				UserOperation entity=convertUserOperationInParamToEntity(inParam);
				userOperationDao.update(entity);
			}		
//			userOperationDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(UserOperationInParam inParam: insertList){
				UserOperation entity=convertUserOperationInParamToEntity(inParam);
				userOperationDao.save(entity);
				inParam.setId(entity.getId());
			}
//			userOperationDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(UserOperationInParam inParam:deleteList){
				UserOperation entity=new UserOperation();
				entity.setId(inParam.getId());
				userOperationDao.remove(entity);
			}
//			userOperationDao.removeAll(deleteList);
		}
		
	}
	private List<UserOperationInParam> convertUserOperationToInParam(List<UserOperation> models){
		List<UserOperationInParam> result=new ArrayList<UserOperationInParam>();
		for(UserOperation initiation:models){
			UserOperationInParam inparam=convertUserOperationToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public UserOperationInParam convertUserOperationToInParam(UserOperation model){
		UserOperationInParam inparam=new UserOperationInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public UserOperation convertUserOperationInParamToEntity(UserOperationInParam inParam){
		UserOperation entity=new UserOperation();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
}

