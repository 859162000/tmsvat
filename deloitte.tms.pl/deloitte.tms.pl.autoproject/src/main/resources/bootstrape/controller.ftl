<#assign pojo=oneToManyPojo.getOne()>
<#assign many=oneToManyPojo.getMany()>
<#assign ones=oneToManyPojo.getOnes()>
<#assign declarationName = pojo.importType(pojo.getDeclarationName())>
<#assign declarationNameFirstLetterLower = pojo.importType(pojo.getDeclarationNameFirstLetterLower())>
package ${pojo.getPackageName()}.controller;
// Generated by bo.wang with ${version}

<#assign classbody>
<#assign service="${pojo.getDeclarationNameFirstLetterLower()}Service">
<#assign declarationName = pojo.importType(pojo.getDeclarationName())>/**
 * Home object for domain model class ${declarationName}.
 * @see ${pojo.getQualifiedDeclarationName()}
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("${pojo.getDeclarationNameFirstLetterLower()}")
public class ${declarationName}Controller extends BaseController{
	@Resource
	${declarationName}Service ${service};
	
	@RequestMapping(value = "/init${declarationName}", method = RequestMethod.GET)
	public String init${declarationName}()throws Exception{
		return "vat/${pojo.getDeclarationNameFirstLetterLower()?lower_case}/${pojo.getDeclarationNameFirstLetterLower()}";
	}
	
	@ResponseBody
	@RequestMapping(value = "/load${declarationName}Page", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage load${declarationName}Page(@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=${service}.find${declarationName}ByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		return daoPage;
	}
	@ResponseBody
	@RequestMapping(value = "/save${declarationName}", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void save${declarationName}(${declarationName}InParam inParam) throws Exception {
		${declarationName} entity=${service}.convert${declarationName}InParamToEntity(inParam);
		if(entity.getId()==null){
			${service}.save(entity);
		}
		else{
			${service}.update(entity);
		}
		inParam.setId(entity.getId());
	}	
	@ResponseBody
	@RequestMapping(value = "/remove${declarationName}s", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void remove${declarationName}s(@RequestParam String ids) {
		AssertHelper.notEmpty_assert(ids,"需要删除的用户不能为空");
		String[] ${declarationNameFirstLetterLower}Ids=ids.split(",");
		//for(String ${declarationNameFirstLetterLower}Id:${declarationNameFirstLetterLower}Ids){
			
		//}
	}
	@ResponseBody
	@RequestMapping(value = "/load${declarationName}", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<${declarationName}InParam> load${declarationName}(@RequestParam Map<String, Object> map) throws Exception {
		List result=${service}.find${declarationName}ByParams(map);
		return result;
	}
	@ResponseBody
	@RequestMapping(value = "/loadAdd${declarationName}", method = RequestMethod.POST)
	public ${declarationName}InParam loadAdd${declarationName}(@RequestParam Map<String, Object> map) throws Exception {
		${declarationName}InParam inParam=new ${declarationName}InParam();
		return inParam;
	}
	@ResponseBody
	@RequestMapping(value = "/loadModify${declarationName}", method = RequestMethod.POST)
	public ${declarationName}InParam loadModify${declarationName}(@RequestParam Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		${declarationName} entity=(${declarationName})${service}.get(${declarationName}.class,id.toString());
		${declarationName}InParam inParam=${service}.convert${declarationName}ToInParam(entity);
		return inParam;
	}
	
	@ResponseBody
	@RequestMapping(value = "/updateModify${declarationName}", method = RequestMethod.POST)
	public void updateModify${declarationName}(${declarationName}InParam inParam) throws Exception {
		${declarationName} entity=(${declarationName})${service}.get(${declarationName}.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		${service}.update(entity);
	}
<#foreach child in many>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
<#assign tempchild=child>	
	@ResponseBody
	@RequestMapping(value = "load${childdeclarationName}Page", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage load${childdeclarationName}Page(@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=${service}.find${childdeclarationName}ByParams(parameter,PageUtils.getPageIndex(parameter),PageUtils.getPageSize(parameter));
		return daoPage;
	}
	@ResponseBody
	@RequestMapping(value = "load${childdeclarationName}", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection load${childdeclarationName}(Map<String, Object> map) throws Exception {
		List result=${service}.find${childdeclarationName}ByParams(map);
		return result;
	}
	@ResponseBody
	@RequestMapping(value = "/save${childdeclarationName}", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void save${childdeclarationName}(${childdeclarationName}InParam inParam) throws Exception {
		${childdeclarationName} entity=${service}.convert${childdeclarationName}InParamToEntity(inParam);
		if(entity.getId()==null){
			${service}.save(entity);
		}
		else{
			${service}.update(entity);
		}
		inParam.setId(entity.getId());
	}
</#foreach>
<#foreach child in ones>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
	
	public ${childdeclarationName} find${childdeclarationName}(Map params)
	{
		return ${service}.find${childdeclarationName}(params);
	}
	
	public ${childdeclarationName} loadAdd${childdeclarationName}(Map params)
	{
		${childdeclarationName} result=new ${childdeclarationName}();
		return result;
	}
	
	public void save${childdeclarationName}(${childdeclarationName}InParam obj) throws Exception {
		if(obj.getId()==null)
		{
			obj.setId(-1l);
			${service}.save(obj);
		}else {
			${service}.update(obj);
		}
	}
</#foreach>
}
</#assign>
import java.io.Serializable;
import java.util.Collection;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;

import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.springmvc.controller.BaseController;
import ${pojo.getPackageName()}.model.${declarationName};
import ${pojo.getPackageName()}.model.${declarationName}InParam;
<#foreach child in many>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
import ${child.getPackageName()}.model.${childdeclarationName};
import ${child.getPackageName()}.model.${childdeclarationName}InParam;
</#foreach>
<#foreach child in ones>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
import ${child.getPackageName()}.model.${childdeclarationName}InParam;
</#foreach>
import ${pojo.getPackageName()}.service.${declarationName}Service;
${classbody}
