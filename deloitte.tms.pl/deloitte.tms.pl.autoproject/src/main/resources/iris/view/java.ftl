<#assign pojo=oneToManyPojo.getOne()>
<#assign many=oneToManyPojo.getMany()>
<#assign ones=oneToManyPojo.getOnes()>
<#assign pojoview=pojo.getDeclarationNameFirstLetterLower()+"View">
<#assign declarationName = pojo.importType(pojo.getDeclarationName())>
<#assign declarationName_firstLower = pojo.getDeclarationNameFirstLetterLower()>
<#assign pojoclassname = "${pojo.getPackageName()}.model.${declarationName}">
<#assign realPackageAndClassPath = "${pojo.getRealPackageAndClassPath()}">
<#assign service="${pojo.getDeclarationNameFirstLetterLower()}Service">
package ${pojo.getPackageName()}.view;
// Generated by bo.wang with ${version}

import java.io.Serializable;
import java.util.Collection;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.bstek.dorado.annotation.DataProvider;
import com.bstek.dorado.annotation.DataResolver;
import com.bstek.dorado.data.provider.Page;
import com.ling2.core.commons.support.DaoPage;
import com.ling2.core.commons.utils.D7PageUtils;
import com.ling2.core.commons.utils.AssertHelper;
import com.ling2.core.commons.utils.reflect.ReflectUtils;
import ${pojo.getPackageName()}.model.${declarationName};
import ${pojo.getPackageName()}.model.${declarationName}Param;
<#foreach child in many>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
import ${child.getPackageName()}.model.${childdeclarationName}Param;
</#foreach>
<#foreach child in ones>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
import ${child.getPackageName()}.model.${childdeclarationName}Param;
</#foreach>
import ${pojo.getPackageName()}.service.${declarationName}Service;

/**
 * Home object for domain model class ${declarationName}.
 * @see ${pojo.getQualifiedDeclarationName()}
 * @author Hibernate Tools
 */
@Component("${pojo.getDeclarationNameFirstLetterLower()}View")
public class ${declarationName}View {
	@Resource
	${declarationName}Service ${service};
	@DataProvider
	public void load${declarationName}(Page<${declarationName}Param> page, Map<String, Object> map) throws Exception {
		DaoPage daoPage=${service}.find${declarationName}ByParams(map, page.getPageNo(), page.getPageSize());
		D7PageUtils.daoPageToPage(daoPage, page);
	}
	@DataProvider
	public Collection<${declarationName}Param> load${declarationName}(Map<String, Object> map) throws Exception {
		List result=${service}.find${declarationName}ByParams(map);
		return result;
	}
	@DataProvider
	public ${declarationName}Param loadAdd${declarationName}(Map<String, Object> map) throws Exception {
		${declarationName}Param param=new ${declarationName}Param();
		return param;
	}
	@DataProvider
	public ${declarationName}Param loadModify${declarationName}(Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		${declarationName} entity=(${declarationName})${service}.get(${declarationName}.class,Long.parseLong(id.toString()));
		${declarationName}Param param=${service}.convert${declarationName}ToParam(entity);
		return param;
	}
	@DataResolver
	public void save${declarationName}(Collection<${declarationName}Param> objs) throws Exception {
		Map results= D7PageUtils.assembleDatasetMap(objs);
		${service}.save${declarationName}DataListsMap(results);
	}
	@DataResolver
	public void saveAdd${declarationName}(${declarationName}Param param) throws Exception {
		${declarationName} entity=${service}.convert${declarationName}ParamToEntity(param);
		if(entity.getId()==null){
			${service}.save(entity);
		}
		else{
			${service}.update(entity);
		}
		param.setId(entity.getId());
	}
	@DataResolver
	public void updateModify${declarationName}(${declarationName}Param param) throws Exception {
		${declarationName} entity=(${declarationName})${service}.get(${declarationName}.class,param.getId());
		ReflectUtils.copyProperties(param, entity);
		${service}.update(entity);
	}
<#foreach child in many>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
<#assign tempchild=child>	
	@DataProvider
	public void load${childdeclarationName}(Page<${childdeclarationName}Param> page, Map<String, Object> map) throws Exception {
		DaoPage daoPage=${service}.find${childdeclarationName}ByParams(map, page.getPageNo(), page.getPageSize());
		D7PageUtils.daoPageToPage(daoPage, page);
	}
	@DataProvider
	public Collection load${childdeclarationName}(Map<String, Object> map) throws Exception {
		List result=${service}.find${childdeclarationName}ByParams(map);
		return result;
	}
	@DataResolver
	public void save${childdeclarationName}(Collection<${childdeclarationName}Param> objs) throws Exception {
		Map results= D7PageUtils.assembleDatasetMap(objs);
		${service}.save${childdeclarationName}DataListsMap(results);
	}
</#foreach>
<#foreach child in ones>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
	@DataProvider
	public ${childdeclarationName} find${childdeclarationName}(Map params)
	{
		return ${service}.find${childdeclarationName}(params);
	}
	@DataProvider
	public ${childdeclarationName} loadAdd${childdeclarationName}(Map params)
	{
		${childdeclarationName} result=new ${childdeclarationName}();
		return result;
	}
	@DataResolver
	public void save${childdeclarationName}(${childdeclarationName}Param obj) throws Exception {
		if(obj.getId()==null)
		{
			obj.setId(-1l);
			${service}.save(obj);
		}else {
			${service}.update(obj);
		}
	}
</#foreach>
}
