package ${pojo.getPackageName()}.view;
// Generated by bo.wang with ${version}

<#assign classbody>
<#assign service="${pojo.getDeclarationNameFirstLetterLower()}Service">
<#assign declarationName = pojo.importType(pojo.getDeclarationName())>/**
 * Home object for domain model class ${declarationName}.
 * @see ${pojo.getQualifiedDeclarationName()}
 * @author Hibernate Tools
 */
@Component("${pojo.getDeclarationNameFirstLetterLower()}View")
public class ${declarationName}View {
	@Resource
	${declarationName}Service ${service};
	@DataProvider
	public void load${declarationName}(Page<${declarationName}InParam> page, Map<String, Object> map) throws Exception {
		DaoPage daoPage=${service}.find${declarationName}ByParams(map, page.getPageNo(), page.getPageSize());
		D7PageUtils.daoPageToPage(daoPage, page);
	}
	@DataProvider
	public Collection<${declarationName}InParam> load${declarationName}(Map<String, Object> map)
			throws Exception {
		return ${service}.load${declarationName}(map);
	}
	@DataResolver
	public void save${declarationName}(Collection<${declarationName}InParam> objs) throws Exception {
		EntityState state = null;
		for(${declarationName}InParam obj:objs)
		{
			state = EntityUtils.getState(obj);
			
			if (state.equals(EntityState.NEW)) {
				${declarationName} entity=${service}.convert${declarationName}InParamToEntity(obj);
				${service}.save(entity);
				ReflectUtils.copyProperties(entity, obj);
			} else if (state.equals(EntityState.MODIFIED)) {
				${service}.update(${service}.convert${declarationName}InParamToEntity(obj));
			} else if (state.equals(EntityState.DELETED)) {
				${service}.remove(${service}.convert${declarationName}InParamToEntity(obj));
			}
			// TODO 保存子记录,如有需要请修改此处
			if (obj.getRelchilds() != null) {
				Collection<${declarationName}InParam> childs=obj.getRelchilds();
				this.save${declarationName}(childs);
			}
		}
	}
}
</#assign>
import java.util.Collection;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.bstek.dorado.annotation.DataProvider;
import com.bstek.dorado.annotation.DataResolver;
import com.bstek.dorado.data.entity.EntityState;
import com.bstek.dorado.data.entity.EntityUtils;
import com.bstek.dorado.data.provider.Page;
import com.ling2.core.commons.support.DaoPage;
import com.ling2.core.commons.utils.D7PageUtils;
import com.ling2.core.commons.utils.reflect.ReflectUtils;
import ${pojo.getPackageName()}.model.${declarationName};
import ${pojo.getPackageName()}.model.${declarationName}InParam;
import ${pojo.getPackageName()}.service.${declarationName}Service;
${classbody}
