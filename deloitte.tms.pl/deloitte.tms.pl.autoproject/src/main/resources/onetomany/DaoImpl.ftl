<#assign pojo=oneToManyPojo.getOne()>
<#assign many=oneToManyPojo.getMany()>
<#assign ones=oneToManyPojo.getOnes()>
package ${pojo.getPackageName()}.dao.impl;
// Generated by bo.wang with ${version}

<#assign classbody>
<#assign declarationName = pojo.importType(pojo.getDeclarationName())>/**
 * Home object for domain model class ${declarationName}.
 * @see ${pojo.getQualifiedDeclarationName()}
 * @author Hibernate Tools
 */
@Component(${declarationName}Dao.BEAN_ID)
public class ${declarationName}DaoImpl extends BaseDao<${declarationName}> implements ${declarationName}Dao{
	public DaoPage find${declarationName}ByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		build${declarationName}Query(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<${declarationName}> find${declarationName}ByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		build${declarationName}Query(query, values, params);
		return findBy(query, values);
	}
	private void build${declarationName}Query(StringBuffer query,Map values,Map params) {
		query.append(" from ${declarationName} where 1=1 ");
		Object value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
	}
<#assign parentid = pojo.getDeclarationNameFirstLetterLower()+"Id">
<#foreach child in many>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>
	public DaoPage find${childdeclarationName}ByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		build${childdeclarationName}Query(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<${childdeclarationName}> find${childdeclarationName}ByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		build${childdeclarationName}Query(query, values, params);
		return findBy(query, values);
	}
	private void build${childdeclarationName}Query(StringBuffer query,Map values,Map params) {
		query.append(" from ${childdeclarationName} where 1=1 ");
		Object value=params.get("${parentid}");
		if(value!=null&&!"".equals(value))
		{
			value=Long.parseLong(value.toString());
			query.append(" and ${parentid}=:${parentid}");
			values.put("${parentid}", value);
		}
		value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
	}
</#foreach>
<#foreach child in ones>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
	public ${childdeclarationName} find${childdeclarationName}(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		build${childdeclarationName}Query(query, values, params);
		return (${childdeclarationName}) getFirstRecord(findBy(query, values));
	}
	private void build${childdeclarationName}Query(StringBuffer query,Map values,Map params) {
		query.append(" from ${childdeclarationName} where 1=1 ");
		Object value=params.get("${parentid}");
		AssertHelper.notEmpty_assert("${childdeclarationName}关联主键不能为空");
		if(value!=null&&!"".equals(value))
		{
			value=Long.parseLong(value.toString());
			query.append(" and ${parentid}=:${parentid}");
			values.put("${parentid}", value);
		}
	}
</#foreach>
}
</#assign>
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import ${pojo.getModelPackageName()}.${declarationName};
import ${pojo.getPackageName()}.dao.${declarationName}Dao;
<#foreach child in ones>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
import ${child.getPackageName()}.model.${childdeclarationName};
</#foreach>
<#foreach child in many>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
import ${child.getPackageName()}.model.${childdeclarationName};
</#foreach>
${classbody}
