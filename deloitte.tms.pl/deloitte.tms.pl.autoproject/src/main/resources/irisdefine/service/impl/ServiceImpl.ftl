<#assign pojo=oneToManyPojo.getOne()>
<#assign many=oneToManyPojo.getMany()>
<#assign ones=oneToManyPojo.getOnes()>
<#assign declarationName = pojo.importType(pojo.getDeclarationName())>
<#assign declarationName_firstLower = pojo.getDeclarationNameFirstLetterLower()>
package ${pojo.getPackageName()}.service.impl;
// Generated by bo.wang with ${version}

import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.ling2.cache.ApplicationCache;
import com.ling2.core.commons.constant.TableColnumDef;
import com.ling2.core.commons.exception.BusinessException;
import com.ling2.core.commons.support.DaoPage;
import com.ling2.core.commons.utils.AssertHelper;
import com.ling2.core.commons.utils.BatchUtils;
import com.ling2.core.commons.utils.I18nUtils;
import com.ling2.core.commons.utils.reflect.ReflectUtils;
import com.ling2.core.dao.IDao;
import com.ling2.core.service.impl.BaseService;
import com.ling2.version.party.model.organization.node.Node;
import com.deloitte.iris.define.cache.service.IrisProvider;
import ${pojo.getPackageName()}.service.impl.${declarationName}Provider;
import com.deloitte.iris.core.utils.IrisCacheUtisl;
import ${pojo.getPackageName()}.model.Iris${declarationName}Node;
import ${pojo.getPackageName()}.model.${declarationName};
import ${pojo.getPackageName()}.model.${declarationName}Param;
<#foreach child in many>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
import ${child.getPackageName()}.model.${childdeclarationName};
import ${child.getPackageName()}.model.${childdeclarationName}Param;
</#foreach>
<#foreach child in ones>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
import ${child.getPackageName()}.model.${childdeclarationName};
import ${child.getPackageName()}.model.${childdeclarationName}Param;
</#foreach>
import ${pojo.getPackageName()}.dao.${declarationName}Dao;
import ${pojo.getPackageName()}.service.${declarationName}Service;

/**
 * Home object for domain model class ${declarationName}.
 * @see ${pojo.getQualifiedDeclarationName()}
 * @author Hibernate Tools
 */
@Component(${declarationName}Service.BEAN_ID)
public class ${declarationName}ServiceImpl extends BaseService implements ${declarationName}Service{
	@Resource
	${declarationName}Dao ${pojo.getDeclarationNameFirstLetterLower()}Dao;

	@Resource
	ApplicationCache applicationCache;
	
	@Resource(name=${declarationName}Provider.BEAN_ID)
	IrisProvider ${pojo.getDeclarationNameFirstLetterLower()}Provider;

	@Override
	public IDao getDao() {
		return ${pojo.getDeclarationNameFirstLetterLower()}Dao;
	}
	
	@Override
	public List<${declarationName}Param> get${declarationName}CacheTree() {
		return build${declarationName}(null);
	}
	@Override
	public List<${declarationName}Param> getEffect${declarationName}CacheTree() {
		return build${declarationName}(TableColnumDef.FLAG_EFFECT);
	}
	public ${declarationName}Param get${declarationName}ById(String ${pojo.getDeclarationNameFirstLetterLower()}Id){
		AssertHelper.notEmpty_assert(${pojo.getDeclarationNameFirstLetterLower()}Id, I18nUtils.get("iris.${declarationName}/${pojo.getDeclarationNameFirstLetterLower()}idnotnull"));
		Iris${declarationName}Node top${declarationName}Node = IrisCacheUtisl.getTop${declarationName}Node();
		Iris${declarationName}Node ${pojo.getDeclarationNameFirstLetterLower()}Node=(Iris${declarationName}Node) top${declarationName}Node.getPosterities().get(${pojo.getDeclarationNameFirstLetterLower()}Id);
		if(${pojo.getDeclarationNameFirstLetterLower()}Node==null){
			throw new BusinessException(I18nUtils.get("iris.${declarationName}/${pojo.getDeclarationNameFirstLetterLower()}idnotfound",${pojo.getDeclarationNameFirstLetterLower()}Id));
		}
		return assemble(top${declarationName}Node, ${pojo.getDeclarationNameFirstLetterLower()}Node);
	}
	@Override
	public void flush${declarationName}CacheTree() {
		applicationCache.putCacheObject(${declarationName?upper_case}_CACHE_ID,null);	
	}
	public void save${declarationName}Node(${declarationName}Param ${pojo.getDeclarationNameFirstLetterLower()}Param){
		${declarationName} ${declarationName_firstLower};
		if(${pojo.getDeclarationNameFirstLetterLower()}Param.getId()==null){//新增
			String checkresult=${pojo.getDeclarationNameFirstLetterLower()}Dao.uniqueCheck(${pojo.getDeclarationNameFirstLetterLower()}Param.getCode());
			if(checkresult==null){
				${declarationName_firstLower}=new ${declarationName}();
				ReflectUtils.copyProperties(${pojo.getDeclarationNameFirstLetterLower()}Param, ${declarationName_firstLower});
				${declarationName_firstLower}.setId(${pojo.getDeclarationNameFirstLetterLower()}.getCode());
				${pojo.getDeclarationNameFirstLetterLower()}Dao.save(${declarationName_firstLower});
			}else{			
				throw new BusinessException(I18nUtils.get("iris.${declarationName}/same${pojo.getDeclarationNameFirstLetterLower()}id",${pojo.getDeclarationNameFirstLetterLower()}Param.getCode()));
			}
		}else{//修改
			${declarationName_firstLower}=(${declarationName}) ${pojo.getDeclarationNameFirstLetterLower()}Dao.get(${declarationName}.class, ${pojo.getDeclarationNameFirstLetterLower()}Param.getId());
			//处理能被修改的值
			${pojo.getDeclarationNameFirstLetterLower()}Dao.update(${declarationName_firstLower});			
		}
	}
	/**
	 * 从${pojo.getDeclarationNameFirstLetterLower()}node构建结果
	 * @param flag 是否启用
	 * @return
	 */
	private List<${declarationName}Param> build${declarationName}(String flag){
		List<${declarationName}Param> results=build${declarationName}sByParentId(null,flag);
		return results;
	}
	/**
	 * 从${pojo.getDeclarationNameFirstLetterLower()}node构建结果
	 * @param parentId 起点
	 * @param flag 是否启用
	 * @return
	 */
	private List<${declarationName}Param> build${declarationName}sByParentId(String parentId,String flag) {
		Iris${declarationName}Node top${declarationName}Node = IrisCacheUtisl.getTop${declarationName}Node();
		List<${declarationName}Param> results=new ArrayList<${declarationName}Param>();
		Iris${declarationName}Node ${pojo.getDeclarationNameFirstLetterLower()}Node=(Iris${declarationName}Node) top${declarationName}Node.getPosterities().get(parentId);
		Enumeration<Node> childsnode=${pojo.getDeclarationNameFirstLetterLower()}Node.children();
		while (childsnode.hasMoreElements()) {
			Iris${declarationName}Node childNode = (Iris${declarationName}Node) childsnode.nextElement();
			if(flag==null||(AssertHelper.notEmpty(flag)&&flag.equals(childNode.getFlag()))){//flag为空或者flag相等的加入树
				${declarationName}Param ${declarationName_firstLower}Param = assemble(top${declarationName}Node,
						childNode);			
				List<${declarationName}Param> childs;
				if(childNode.children().hasMoreElements()){
					childs=build${declarationName}sByParentId(childNode.getId(),flag);	
				}else{
					childs=new ArrayList<${declarationName}Param>();
				}
				${declarationName_firstLower}Param.setRel${declarationName}s(childs);	
				results.add(${declarationName_firstLower}Param);
			}			
		}
		return results;
	}
	/**
	 * 将Iris${declarationName}Node转换为${declarationName}Param
	 * @param top${declarationName}Node
	 * @param childNode
	 * @return
	 */
	private ${declarationName}Param assemble(Iris${declarationName}Node top${declarationName}Node,
			Iris${declarationName}Node childNode) {
		${declarationName}Param ${declarationName_firstLower}Param=new ${declarationName}Param();
		ReflectUtils.copyProperties(childNode, ${declarationName_firstLower}Param);
		if(AssertHelper.notEmpty(${declarationName_firstLower}Param.getParentId())){
			Iris${declarationName}Node parent=(Iris${declarationName}Node) top${declarationName}Node.getPosterities().get(${declarationName_firstLower}Param.getParentId());
			${declarationName_firstLower}Param.setParentName(parent.getName());
		}
		return ${declarationName_firstLower}Param;
	}
	
	@Override
	public DaoPage find${declarationName}ByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= ${pojo.getDeclarationNameFirstLetterLower()}Dao.find${declarationName}ByParams(params, pageIndex, pageSize);
		daoPage.setResult(convert${declarationName}ToParam((List<${declarationName}>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<${declarationName}Param> find${declarationName}ByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<${declarationName}> temp= ${pojo.getDeclarationNameFirstLetterLower()}Dao.find${declarationName}ByParams(params);
		return convert${declarationName}ToParam(temp);
	}
	@Override
	public void save${declarationName}DataListsMap(Map dataListsMap) {
		Collection<${declarationName}Param> deleteList = BatchUtils.to(${declarationName}Param.class).getDeleteEntities(dataListsMap);
		Collection<${declarationName}Param> insertList =  BatchUtils.to(${declarationName}Param.class).getInsertEntities(dataListsMap);
		Collection<${declarationName}Param> updateList =  BatchUtils.to(${declarationName}Param.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(${declarationName}Param ${declarationName_firstLower}Param: updateList){
				${declarationName} entity=convert${declarationName}ParamToEntity(${declarationName_firstLower}Param);
				${pojo.getDeclarationNameFirstLetterLower()}Dao.update(entity);
			}		
//			${pojo.getDeclarationNameFirstLetterLower()}Dao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(${declarationName}Param ${declarationName_firstLower}Param: insertList){
				${declarationName} entity=convert${declarationName}ParamToEntity(${declarationName_firstLower}Param);
				${pojo.getDeclarationNameFirstLetterLower()}Dao.save(entity);
				${declarationName_firstLower}Param.setId(entity.getId());
			}
//			${pojo.getDeclarationNameFirstLetterLower()}Dao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(${declarationName}Param ${declarationName_firstLower}Param:deleteList){
				${declarationName} entity=new ${declarationName}();
				entity.setId(${declarationName_firstLower}Param.getId());
				${pojo.getDeclarationNameFirstLetterLower()}Dao.remove(entity);
			}
//			${pojo.getDeclarationNameFirstLetterLower()}Dao.removeAll(deleteList);
		}
		
	}
	private List<${declarationName}Param> convert${declarationName}ToParam(List<${declarationName}> models){
		List<${declarationName}Param> result=new ArrayList<${declarationName}Param>();
		for(${declarationName} ${declarationName_firstLower}:models){
			${declarationName}Param ${declarationName_firstLower}Param=convert${declarationName}ToParam(${declarationName_firstLower});
			result.add(${declarationName_firstLower}Param);
		}
		return result;
	}
	public ${declarationName}Param convert${declarationName}ToParam(${declarationName} model){
		${declarationName}Param ${declarationName_firstLower}Param=new ${declarationName}Param();
		ReflectUtils.copyProperties(model, ${declarationName_firstLower}Param);
		return ${declarationName_firstLower}Param;
	}
	public ${declarationName} convert${declarationName}ParamToEntity(${declarationName}Param ${declarationName_firstLower}Param){
		${declarationName} entity=new ${declarationName}();
		ReflectUtils.copyProperties(${declarationName_firstLower}Param, entity);
		return entity;
	}
<#foreach child in many>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
<#assign tempchild=child>
	@Override
	public DaoPage find${childdeclarationName}ByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= ${pojo.getDeclarationNameFirstLetterLower()}Dao.find${childdeclarationName}ByParams(params, pageIndex, pageSize);
		daoPage.setResult(convert${childdeclarationName}ToParam((List<${childdeclarationName}>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<${childdeclarationName}Param> find${childdeclarationName}ByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<${childdeclarationName}> temp= ${pojo.getDeclarationNameFirstLetterLower()}Dao.find${childdeclarationName}ByParams(params);
		return convert${childdeclarationName}ToParam(temp);
	}
	@Override
	public void save${childdeclarationName}DataListsMap(Map dataListsMap) {
		Collection<${childdeclarationName}Param> deleteList = BatchUtils.to(${childdeclarationName}Param.class).getDeleteEntities(dataListsMap);
		Collection<${childdeclarationName}Param> insertList =  BatchUtils.to(${childdeclarationName}Param.class).getInsertEntities(dataListsMap);
		Collection<${childdeclarationName}Param> updateList =  BatchUtils.to(${childdeclarationName}Param.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(${childdeclarationName}Param param: updateList){
				${childdeclarationName} entity=convert${childdeclarationName}ParamToEntity(param);
				${pojo.getDeclarationNameFirstLetterLower()}Dao.update(entity);
			}		
//			${pojo.getDeclarationNameFirstLetterLower()}Dao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(${childdeclarationName}Param ${declarationName_firstLower}Param: insertList){
				${childdeclarationName} entity=convert${childdeclarationName}ParamToEntity(param);
				${pojo.getDeclarationNameFirstLetterLower()}Dao.save(entity);
				param.setId(entity.getId());
			}
//			${pojo.getDeclarationNameFirstLetterLower()}Dao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(${childdeclarationName}Param param:deleteList){
				${childdeclarationName} entity=new ${childdeclarationName}();
				entity.setId(param.getId());
				${pojo.getDeclarationNameFirstLetterLower()}Dao.remove(entity);
			}
//			${pojo.getDeclarationNameFirstLetterLower()}Dao.removeAll(deleteList);
		}
	}
	private List<${childdeclarationName}Param> convert${childdeclarationName}ToParam(List<${childdeclarationName}> models){
		List<${childdeclarationName}Param> result=new ArrayList<${childdeclarationName}Param>();
		for(${childdeclarationName} ${childdeclarationName_firstLower}:models){
			${childdeclarationName}Param param=convert${childdeclarationName}ToParam(${childdeclarationName_firstLower});
			result.add(inparam);
		}
		return result;
	}
	public ${childdeclarationName}Param convert${childdeclarationName}ToParam(${childdeclarationName} model){
		${childdeclarationName}Param param=new ${childdeclarationName}Param();
		ReflectUtils.copyProperties(model, param);
		return inparam;
	}
	public ${childdeclarationName} convert${childdeclarationName}ParamToEntity(${childdeclarationName}Param param){
		${childdeclarationName} entity=new ${childdeclarationName}();
		ReflectUtils.copyProperties(param, entity);
		return entity;
	}
</#foreach>
<#foreach child in ones>
<#assign childdeclarationName = child.importType(child.getDeclarationName())>	
	public ${childdeclarationName} find${childdeclarationName}(Map params)
	{
		Object value=params.get("${pojo.getDeclarationNameFirstLetterLower()}Id");
		AssertHelper.notEmpty_assert("${childdeclarationName}关联主键不能为空");
		${declarationName} ${pojo.getDeclarationNameFirstLetterLower()}=(${declarationName}) ${pojo.getDeclarationNameFirstLetterLower()}Dao.get(${declarationName}.class, Long.parseLong(value.toString()));
		//return ${pojo.getDeclarationNameFirstLetterLower()}Dao.find${childdeclarationName}(params);
		${childdeclarationName} result= ${pojo.getDeclarationNameFirstLetterLower()}.get${childdeclarationName}();
		if(result==null)
		{
			result=new ${childdeclarationName}();
		}
		return result;
	}
</#foreach>
}
