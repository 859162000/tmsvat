package com.deloitte.tms.vat.salesinvoice.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.base.masterdata.model.TmsMdEquipment;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntity;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.vat.salesinvoice.dao.InvoiceAllocDao;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceAllocH;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxD;
/**
 * Home object for domain model class InvoiceAlloc.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Component(InvoiceAllocDao.BEAN_ID)
public class InvoiceAllocDaoImpl extends BaseDao<InvoiceAllocH> implements InvoiceAllocDao{

	public List<InvoiceAllocH> getLatestInvoiceAllocH()
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		Date date = new Date();
		query.append(" from InvoiceAllocH where 1=1 and  flag = 1 ");
		query.append(" and invoiceAllotDate=:invoiceAllotDate order by invoiceAllotNumber desc");
		values.put("invoiceAllotDate", date);
		return findBy(query, values);
	}
	
	public DaoPage findInvoiceAllocByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoiceAllocQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	
	public DaoPage findInvoiceAllocLByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoiceAllocLQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	
	public DaoPage findEquipmentForPage(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		query.append("select e.id, e.equipmentCode, e.equipmentName, e.equipmentManager from TmsMdEquipment e, TmsMdLegalEquipment l ")
		.append("where e.id=l.equipmentId and e.equipmentType = 2 and e.flag = 1 and l.flag=1 ");

		Map values=new HashMap();
		Object value=params.get("legalEntityId");
		if(!AssertHelper.empty(value))
		{
			query.append(" and l.legalEntityId = :legalEntityId");
			values.put("legalEntityId", value);
		}
		return pageBy(query, values, pageIndex, pageSize);
	}

	public DaoPage findLegalEntityByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildLegalEntityQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	
	private void buildLegalEntityQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdLegalEntity where 1=1 and  flag = 1 ");
		
		Object value=params.get("legalEntityCode");
		if(!AssertHelper.empty(value))
		{
			query.append(" and legalEntityCode like :legalEntityCode");
			values.put("legalEntityCode", "%"+value+"%");
		}
		value=params.get("legalEntityName");
		if(!AssertHelper.empty(value))
		{
			query.append(" and legalEntityName like :legalEntityName");
			values.put("legalEntityName", "%"+value+"%");
		}
		query.append(" order by legalEntityCode");
	}
	
	public List<InvoiceAllocH> findInvoiceAllocByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoiceAllocQuery(query, values, params);
		return findBy(query, values);
	}
	public List<TmsMdLegalEntity> loadLegalEntityForEditPanel(Map params)
	{
		StringBuffer query=new StringBuffer();
		query.append(" from TmsMdLegalEntity where 1=1 and  flag = 1 ");
		Map values=new HashMap();
		Object value=params.get("legalEntityCode");
		if(!AssertHelper.empty(value))
		{
			query.append(" and legalEntityCode like :legalEntityCode");
			values.put("legalEntityCode", "%"+value+"%");
		}
		value=params.get("legalEntityName");
		if(!AssertHelper.empty(value))
		{
			query.append(" and legalEntityName like :legalEntityName");
			values.put("legalEntityName", "%"+value+"%");
		}
		return findBy(query,values);
	}
	
	public List<TmsMdEquipment> loadEquipmentForEditPanel(Map params)
	{
		StringBuffer query=new StringBuffer();
		query.append(" from TmsMdEquipment e, TmsMdLegalEquipment l ")
		.append("where e.id=l.equipmentId and e.equipmentType = 2 and e.flag = 1 and l.flag=1 ");
		Map values=new HashMap();
		Object value=params.get("legalEntityId");
		if(!AssertHelper.empty(value))
		{
			query.append(" and l.legalEntityId = :legalEntityId");
			values.put("legalEntityId", value);
		}
		return findBy(query,values);
	}
	
	private void buildInvoiceAllocQuery(StringBuffer query,Map values,Map params) {
		query.append(" from InvoiceAllocH where 1=1 and  flag = 1 ");
		Object value=params.get("invoiceAllotNumber");
		if(!AssertHelper.empty(value))
		{
			query.append(" and invoiceAllotNumber = :invoiceAllotNumber");
			values.put("invoiceAllotNumber", value);
		}
		value=params.get("approvalStatus");
		if(!AssertHelper.empty(value))
		{
			query.append(" and approvalStatus=:approvalStatus");
			values.put("approvalStatus", value);
		}
		value=params.get("startDate");
		if(!AssertHelper.empty(value))
		{
			query.append(" and to_char(approvalDate,'yyyy-mm-dd')>=:startDate");
			values.put("startDate", value);
		}
		value=params.get("endDate");
		if(!AssertHelper.empty(value))
		{
			query.append(" and to_char(approvalDate,'yyyy-mm-dd')<=:endDate");
			values.put("endDate", value);
		}		
		query.append(" order by approvalStatus desc, invoiceAllotNumber desc ");
	}
	private void buildInvoiceAllocLQuery(StringBuffer query,Map values,Map params) {
		query.append(" from InvoiceAllocL where 1=1 and  flag = 1 ");
		Object value=params.get("invoiceAllotHId");
		if(value!=null)
		{
			query.append(" and invoiceAllotHId=:invoiceAllotHId");
			values.put("invoiceAllotHId", value);
		}
	}
	
	@Override
	public void deleteAlloc(String id) {
		
		StringBuffer query=new StringBuffer();
		Map values=new HashMap<String, Object>();
		query.append("delete from InvoiceAllocH where id =:Id ");
		values.put("Id", id);
		executeHqlProduce(query.toString(), values);
	}
	@Override
	public void deleteAllocL(String id) {
		
		StringBuffer query=new StringBuffer();
		Map values=new HashMap<String, Object>();
		query.append("delete from InvoiceAllocL where id =:Id ");
		values.put("Id", id);
		executeHqlProduce(query.toString(), values);
	}
	
	
	public List<InvoiceTrxD> queryValidAllocNumber(Map params){
		
		StringBuffer query=new StringBuffer();
		Map values=new HashMap<String, Object>();
		
		query.append(" from InvoiceTrxD t ");
		query.append("where t.isLock='0' and t.isAbolish='0' and t.equipmentId is null and  flag = 1 ");
		
		Object value=params.get("invoiceCategory");
		if(value!=null)
		{
			query.append(" and t.invoiceCategory=:invoiceCategory");
			values.put("invoiceCategory", value);
		}
		value=params.get("legalEntityId");
		if(value!=null)
		{
			query.append(" and t.legalEntityId=:legalEntityId");
			values.put("legalEntityId", value);
		}
		value=params.get("invoiceCode");
		if(value!=null)
		{
			query.append(" and t.invoiceCode=:invoiceCode");
			values.put("invoiceCode", value);
		}
		return findBy(query,values);

//		return findNumsql(query, values);
	}
}

