package com.deloitte.tms.base.masterdata.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.base.masterdata.dao.ClientDao;
import com.deloitte.tms.base.masterdata.model.Client;
import com.deloitte.tms.base.masterdata.model.ClientInParam;
import com.deloitte.tms.base.masterdata.model.ClientSec;
import com.deloitte.tms.base.masterdata.model.ClientSecInParam;
import com.deloitte.tms.base.masterdata.service.ClientService;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
/**
 * Home object for domain model class Client.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(ClientService.BEAN_ID)
public class ClientServiceImpl extends BaseService implements ClientService{
	@Resource
	ClientDao clientDao;

	@Override
	public IDao getDao() {
		return clientDao;
	}

	@Override
	public DaoPage findClientByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= clientDao.findClientByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertClientToInParam((List<Client>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<ClientInParam> findClientByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<Client> temp= clientDao.findClientByParams(params);
		return convertClientToInParam(temp);
	}
	@Override
	public void saveClientDataListsMap(Map dataListsMap) {
		Collection<ClientInParam> deleteList = BatchUtils.to(ClientInParam.class).getDeleteEntities(dataListsMap);
		Collection<ClientInParam> insertList =  BatchUtils.to(ClientInParam.class).getInsertEntities(dataListsMap);
		Collection<ClientInParam> updateList =  BatchUtils.to(ClientInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(ClientInParam inParam: updateList){
				Client entity=convertClientInParamToEntity(inParam);
				clientDao.update(entity);
			}		
//			clientDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(ClientInParam inParam: insertList){
				Client entity=convertClientInParamToEntity(inParam);
				clientDao.save(entity);
				inParam.setId(entity.getId());
			}
//			clientDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(ClientInParam inParam:deleteList){
				Client entity=new Client();
				entity.setId(inParam.getId());
				clientDao.remove(entity);
			}
//			clientDao.removeAll(deleteList);
		}
		
	}
	private List<ClientInParam> convertClientToInParam(List<Client> models){
		List<ClientInParam> result=new ArrayList<ClientInParam>();
		for(Client initiation:models){
			ClientInParam inparam=convertClientToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public ClientInParam convertClientToInParam(Client model){
		ClientInParam inparam=new ClientInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public Client convertClientInParamToEntity(ClientInParam inParam){
		Client entity=new Client();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	@Override
	public DaoPage findClientSecByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= clientDao.findClientSecByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertClientSecToInParam((List<ClientSec>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<ClientSecInParam> findClientSecByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<ClientSec> temp= clientDao.findClientSecByParams(params);
		return convertClientSecToInParam(temp);
	}
	@Override
	public void saveClientSecDataListsMap(Map dataListsMap) {
		Collection<ClientSecInParam> deleteList = BatchUtils.to(ClientSecInParam.class).getDeleteEntities(dataListsMap);
		Collection<ClientSecInParam> insertList =  BatchUtils.to(ClientSecInParam.class).getInsertEntities(dataListsMap);
		Collection<ClientSecInParam> updateList =  BatchUtils.to(ClientSecInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(ClientSecInParam inParam: updateList){
				ClientSec entity=convertClientSecInParamToEntity(inParam);
				clientDao.update(entity);
			}		
//			clientDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(ClientSecInParam inParam: insertList){
				ClientSec entity=convertClientSecInParamToEntity(inParam);
				clientDao.save(entity);
				inParam.setId(entity.getId());
			}
//			clientDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(ClientSecInParam inParam:deleteList){
				ClientSec entity=new ClientSec();
				entity.setId(inParam.getId());
				clientDao.remove(entity);
			}
//			clientDao.removeAll(deleteList);
		}
	}
	private List<ClientSecInParam> convertClientSecToInParam(List<ClientSec> models){
		List<ClientSecInParam> result=new ArrayList<ClientSecInParam>();
		for(ClientSec initiation:models){
			ClientSecInParam inparam=convertClientSecToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public ClientSecInParam convertClientSecToInParam(ClientSec model){
		ClientSecInParam inparam=new ClientSecInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public ClientSec convertClientSecInParamToEntity(ClientSecInParam inParam){
		ClientSec entity=new ClientSec();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
}

