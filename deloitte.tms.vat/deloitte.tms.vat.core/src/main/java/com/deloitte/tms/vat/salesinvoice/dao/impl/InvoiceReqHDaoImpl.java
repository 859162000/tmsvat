package com.deloitte.tms.vat.salesinvoice.dao.impl;
// Generated by bo.wang with ling2.autoproject


import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.deloitte.tms.base.cache.utils.LegalEntityCacheUtils;
import com.deloitte.tms.base.enums.PrintRangeEnums;
import com.deloitte.tms.base.masterdata.model.BaseOrg;
import com.deloitte.tms.base.masterdata.model.Customer;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.Assert;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.DateUtils;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.vat.base.enums.CrvatTaxPoolStatuEnums;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceReqH;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceReqL;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxPool;
import com.deloitte.tms.vat.salesinvoice.dao.InvoiceReqHDao;
import com.deloitte.tms.vat.salesinvoice.dao.InvoiceTrxPoolDao;
import com.itextpdf.text.pdf.PdfStructTreeController.returnType;
/**
 * Home object for domain model class InvoiceReqH.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Component(InvoiceReqHDao.BEAN_ID)
public class InvoiceReqHDaoImpl extends BaseDao<InvoiceReqH> implements InvoiceReqHDao{
	@Autowired
	BaseDao<BaseOrg>baseDao;
	@Autowired
	InvoiceTrxPoolDao invoiceTrxPoolDao;
	public DaoPage findInvoiceReqHByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map<String,Object>values=new HashMap<String,Object>();
		buildInvoiceReqHQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<InvoiceReqH> findInvoiceReqHByParams(Map params) 
	{
		StringBuffer query=new StringBuffer();
		Map<String,Object> values=new HashMap<String,Object>();
		buildInvoiceReqHQuery(query, values, params);
		List<InvoiceReqH> list = findBy(query, values);
		for(InvoiceReqH invoiceReqH:list){
			List<InvoiceReqL> invoiceReqLs = getInvoiceReqLs(invoiceReqH.getId());
			invoiceReqH.setInvoiceReqLs(invoiceReqLs);
			
		}
		return list;
	}
	private void buildInvoiceReqHQuery(StringBuffer query,Map values,Map params)  {
		query.append(" from InvoiceReqH where 1=1 ");
		Object value=params.get("status");
		if(AssertHelper.isOrNotEmpty_assert(value))
		{
			query.append(" and status=:status");
			values.put("status", value);
		}if(AssertHelper.isOrNotEmpty_assert(params.get("custRegistrationNumber"))){
			query.append(" and custRegistrationNumber=:custRegistrationNumber");
			values.put("custRegistrationNumber",params.get("custRegistrationNumber"));
		}if(AssertHelper.isOrNotEmpty_assert(params.get("invoiceReqStartDate"))&&AssertHelper.isOrNotEmpty_assert(params.get("invoiceReqendDate"))){
			query.append(" and invoiceReqDate between :invoiceReqStartDate and :invoiceReqendDate");
		    Date  datefrom =  DateUtils.parse(params.get("invoiceReqStartDate").toString(), "yyyy-MM-dd");
		    Date  dateTo=  DateUtils.parse(params.get("invoiceReqendDate").toString(), "yyyy-MM-dd");
			values.put("invoiceReqStartDate", datefrom);
			values.put("invoiceReqendDate", dateTo);
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("custRegistrationCode"))){
			query.append(" and custRegistrationCode=:custRegistrationCode");
			values.put("custRegistrationCode",params.get("custRegistrationCode"));
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("crvatInvoiceReqNumber"))){
			query.append(" and crvatInvoiceReqNumber=:crvatInvoiceReqNumber");
			values.put("crvatInvoiceReqNumber",params.get("crvatInvoiceReqNumber"));
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("customerId"))){
			query.append(" and customerId=:customerId");
		    //String[] customerId=new String[]{params.get("customerId").toString()};
		    values.put("customerId", params.get("customerId"));
		}
		query.append(" and flag=:flag");
		values.put("flag", "1");
		query.append(" order by   crvatInvoiceReqNumber desc");
	}
	
	/**   
	 * @param params
	 * @param pageIndex
	 * @param pageSize
	 * @return  
	 * @throws ParseException 
	 * @see com.deloitte.tms.vat.salesinvoice.dao.InvoiceReqHDao#findInvoiceTrxPoolByParams(java.util.Map, java.lang.Integer, java.lang.Integer)  
	 */
	
	@Override
	public DaoPage findInvoiceTrxPoolByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoiceTrxPoolQuery(query, values, params);
		DaoPage daoPage = pageBy(query, values, pageIndex, pageSize);
		List<InvoiceTrxPool> list = (List<InvoiceTrxPool>) daoPage.getResult();
		for(InvoiceTrxPool invoiceTrxPool:list){
			Customer customer=invoiceTrxPool.getCustomer();
			invoiceTrxPool.setCustomer(customer);
		}
		daoPage.setResult(list);
		return daoPage;
		//return pageBy(query, values, pageIndex, pageSize);
	}
	/**
	 * @author sqing
	 * @throws ParseException 
	 * @since 20160318
	 */
	private void buildInvoiceTrxPoolQuery(StringBuffer query,Map values,Map params) {
		query.append(" from InvoiceTrxPool where 1=1");
		/*as pool left join Customer as cu on pool.customerId = cu.id  */
		/*Object value=params.get("status");
		if(AssertHelper.isOrNotEmpty_assert(value))
		{
			query.append(" and status=:status");
			values.put("status", value);
		}*/
		//交易流水号
		if(AssertHelper.isOrNotEmpty_assert(params.get("trxNumber"))){
			query.append(" and trxNumber=:trxNumber");
			values.put("trxNumber",params.get("trxNumber") );
		}
		else{
			if(AssertHelper.isOrNotEmpty_assert(params.get("customerId"))){
				query.append(" and customerId=:customerId ");
				values.put("customerId", params.get("customerId"));
			}
			/*if(AssertHelper.isOrNotEmpty_assert(params.get("custRegistrationCode"))){
				query.append(" and custRegistrationCode=:custRegistrationCode ");
				values.put("custRegistrationCode", params.get("custRegistrationCode"));
			}
			if(AssertHelper.isOrNotEmpty_assert(params.get("custRegistrationNumber"))){
				query.append(" and custRegistrationNumber=:custRegistrationNumber");
				values.put("custRegistrationNumber", params.get("custRegistrationNumber"));
			}*/if(AssertHelper.isOrNotEmpty_assert(params.get("isExitsCustomer"))){
				if("1".equals(params.get("isExitsCustomer"))){
					query.append(" and customerId is null");
				}else if("0".equals(params.get("isExitsCustomer"))){
					query.append(" and customerId is not null");
				}
			}if(AssertHelper.isOrNotEmpty_assert(params.get("trxStartDate"))&&AssertHelper.isOrNotEmpty_assert(params.get("trxEndDate"))){
				query.append(" and (trxDate between :startDate and :endDate)");
				Date  datefrom =  DateUtils.parse(params.get("trxStartDate").toString(), "yyyy-MM-dd");
			    Date  dateTo=  DateUtils.parse(params.get("trxEndDate").toString(), "yyyy-MM-dd");
				values.put("startDate",datefrom );
				values.put("endDate", dateTo);
			}if(AssertHelper.isOrNotEmpty_assert(params.get("inventoryItemNumber"))){
				query.append(" and inventoryItemNumber=:inventoryItemNumber");
				values.put("inventoryItemNumber", params.get("inventoryItemNumber"));
			}
			/*if(AssertHelper.isOrNotEmpty_assert(params.get("customerNumber"))){
				query.append(" and customerNumber=:customerNumber");
				values.put("customerNumber",params.get("customerNumber") );
			}*/
			//受理层级
			if(AssertHelper.isOrNotEmpty_assert(params.get("reqInvoiceRange"))){
				PrintRangeEnums enums=findEnumsByValue(params.get("reqInvoiceRange").toString());
				if(enums!=PrintRangeEnums.all){
					List<String>list=LegalEntityCacheUtils.legalEntityCodesByOrgId(params.get("orgId").toString(),enums);
					String[]legalEntityCode=(String[]) list.toArray(new String[list.size()]);
					query.append(" and legalEntityCode in :legalEntityCode");
					values.put("legalEntityCode", legalEntityCode);
				}
			}
			//客户账号
			if(AssertHelper.isOrNotEmpty_assert(params.get("custBankAccountNum"))){
				query.append(" and inventoryItemNumber=:inventoryItemNumber");
				values.put("inventoryItemNumber", params.get("inventoryItemNumber"));
			}
		}
		query.append(" and ( status in :status");
		String[] status=new String[]{CrvatTaxPoolStatuEnums.OPEN.getValue(),CrvatTaxPoolStatuEnums.APPFORM_REVOKED.getValue(),CrvatTaxPoolStatuEnums.PREP_FORM_REVOKED.getValue()};
		values.put("status", status);
		query.append(" or status is null )");
		query.append(" and flag = 1");
	}
	
	/**   
	 * @param orgCode
	 * @return  
	 * @see com.deloitte.tms.vat.salesinvoice.dao.InvoiceReqHDao#fidOrgNameByOrgCode(java.lang.String)  
	 */
	
	@Override
	public String fidOrgNameByOrgCode(String orgCode) {
		StringBuffer query=new StringBuffer();
		query.append(" from BaseOrg where 1=1 ");
		Map values=new HashMap();
		if(AssertHelper.isOrNotEmpty_assert(orgCode))
		{
			query.append(" and orgCode=:orgCode");
			values.put("orgCode", orgCode);
		}
		BaseOrg object=(BaseOrg) baseDao.findForObject(query, values);
		if(AssertHelper.isOrNotEmpty_assert(object)){
			return object.getOrgName();
		}
		else return "";
	}
	
	/**   
	 * @param name  
	 * @see com.deloitte.tms.vat.salesinvoice.dao.InvoiceReqHDao#updateAdminStatus(java.lang.String)  
	 */
	
	@Override
	public void updateAdminStatus(String name) {
		StringBuffer query=new StringBuffer();
		query.append(" update InvoiceTrxPool t ");
		Map values=new HashMap();
		if(AssertHelper.isOrNotEmpty_assert(name)){
			query.append(" set t.status = null ");
			query.append(" where t.status = :status ");
			values.put("status", name);
		}
		this.executeHqlProduce(query.toString(), values);
	}
	
	/**   
	 * @param map
	 * @return  
	 * @see com.deloitte.tms.vat.salesinvoice.dao.InvoiceReqHDao#findWithOutCustomer(java.util.Map)  
	 */
	
	@Override
	public InvoiceTrxPool findWithOutCustomer(Map map) {
		StringBuffer query=new StringBuffer();
		query.append(" from InvoiceTrxPool where 1=1");
		Map values=new HashMap();
		if(AssertHelper.isOrNotEmpty_assert(map.get("trxNumber"))){
			query.append(" and trxNumber=:trxNumber ");
			values.put("trxNumber", map.get("trxNumber").toString().trim());
		}
		query.append(" and customerId is null");
		query.append(" and ( status in :status");
		String[] status=new String[]{CrvatTaxPoolStatuEnums.APPFORM_FREE.getValue(),CrvatTaxPoolStatuEnums.APPFORM_REVOKED.getValue(),CrvatTaxPoolStatuEnums.PREP_FORM_REVOKED.getValue()};
		values.put("status", status);
		query.append(" or status is null )");
		List<InvoiceTrxPool>list=findBy(query, values);
		if(list.size()==1){
			return list.get(0);
		}else{
			return new InvoiceTrxPool();
		}
	}
	/**
	 * 获取受理层级枚举
	 */
	private PrintRangeEnums findEnumsByValue(String value){
		if("1".equals(value)){
			return PrintRangeEnums.all;
		}else if("2".equals(value)){
			return PrintRangeEnums.current;
		}else if("3".equals(value)){
			return PrintRangeEnums.city;
		}
		return null;
		
	}
	
	/**   
	 * @param reqHid
	 * @return  
	 * @see com.deloitte.tms.vat.salesinvoice.dao.InvoiceReqHDao#getInvoiceReqLs(java.lang.String)  
	 */
	
	@Override
	public List<InvoiceReqL> getInvoiceReqLs(String reqHid) {
		// TODO Auto-generated method stub
		 StringBuffer query=new StringBuffer();
		 query.append(" from InvoiceReqL where 1=1 ");
		 Map values=new HashMap();
		 if(AssertHelper.isOrNotEmpty_assert(reqHid))
		 {
			query.append(" and crvatInvoiceReqHId=:crvatInvoiceReqHId");
			values.put("crvatInvoiceReqHId", reqHid);
		}
		 query.append(" and flag=1");
		return findBy(query, values);
	}
	/**
	 * 根据REQid释放交易池状态
	 */
	@Override
	public void updateTrxPoolStatusByReqHid(String reqHid, String status) {
		AssertHelper.notEmpty_assert(reqHid, "申请单号不能为空");
		//AssertHelper.notEmpty_assert(status, "状态参数不能为空");
		StringBuffer query=new StringBuffer();
		Map<String,Object> values=new HashMap<String,Object>();		
		query.append("update TMS_CRVAT_TRX_POOL_ALL set status = :status  where CRVAT_TRX_POOL_ID in ");
		query.append("(select reql.CRVAT_TRX_POOL_ID from TMS_CRVAT_INVOICE_REQ_L reql where 1=1 and reql.DELETED_FLAG = 1 ");
		values.put("status", status);
		if(AssertHelper.notEmpty(reqHid))
		{
			query.append(" and reql.CRVAT_INVOICE_REQ_H_ID=:reqHid)");
			values.put("reqHid", reqHid);
		}else {
			query.append(")");
		}
		executeSql(query, values);
		
	}
}

