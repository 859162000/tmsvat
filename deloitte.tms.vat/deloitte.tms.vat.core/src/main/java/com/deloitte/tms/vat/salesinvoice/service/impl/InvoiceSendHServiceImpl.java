package com.deloitte.tms.vat.salesinvoice.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceSendH;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceSendHInParam;
import com.deloitte.tms.vat.salesinvoice.dao.InvoiceSendHDao;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceSendHService;
/**
 * Home object for domain model class InvoiceSendH.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Component(InvoiceSendHService.BEAN_ID)
public class InvoiceSendHServiceImpl extends BaseService implements InvoiceSendHService{
	@Resource
	InvoiceSendHDao invoiceSendHDao;

	@Override
	public IDao getDao() {
		return invoiceSendHDao;
	}

	@Override
	public DaoPage findInvoiceSendHByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= invoiceSendHDao.findInvoiceSendHByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertInvoiceSendHToInParam((List<InvoiceSendH>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<InvoiceSendHInParam> findInvoiceSendHByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<InvoiceSendH> temp= invoiceSendHDao.findInvoiceSendHByParams(params);
		return convertInvoiceSendHToInParam(temp);
	}
	@Override
	public void saveInvoiceSendHDataListsMap(Map dataListsMap) {
		Collection<InvoiceSendHInParam> deleteList = BatchUtils.to(InvoiceSendHInParam.class).getDeleteEntities(dataListsMap);
		Collection<InvoiceSendHInParam> insertList =  BatchUtils.to(InvoiceSendHInParam.class).getInsertEntities(dataListsMap);
		Collection<InvoiceSendHInParam> updateList =  BatchUtils.to(InvoiceSendHInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(InvoiceSendHInParam inParam: updateList){
				InvoiceSendH entity=convertInvoiceSendHInParamToEntity(inParam);
				invoiceSendHDao.update(entity);
			}		
//			invoiceSendHDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(InvoiceSendHInParam inParam: insertList){
				InvoiceSendH entity=convertInvoiceSendHInParamToEntity(inParam);
				invoiceSendHDao.save(entity);
				inParam.setId(entity.getId());
			}
//			invoiceSendHDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(InvoiceSendHInParam inParam:deleteList){
				InvoiceSendH entity=new InvoiceSendH();
				entity.setId(inParam.getId());
				invoiceSendHDao.remove(entity);
			}
//			invoiceSendHDao.removeAll(deleteList);
		}
		
	}
	private List<InvoiceSendHInParam> convertInvoiceSendHToInParam(List<InvoiceSendH> models){
		List<InvoiceSendHInParam> result=new ArrayList<InvoiceSendHInParam>();
		for(InvoiceSendH initiation:models){
			InvoiceSendHInParam inparam=convertInvoiceSendHToInParam(initiation);
				
			result.add(inparam);			
		}
		return result;
	}
	public InvoiceSendHInParam convertInvoiceSendHToInParam(InvoiceSendH model){
		InvoiceSendHInParam inparam=new InvoiceSendHInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public InvoiceSendH convertInvoiceSendHInParamToEntity(InvoiceSendHInParam inParam){
		InvoiceSendH entity=new InvoiceSendH();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
}

