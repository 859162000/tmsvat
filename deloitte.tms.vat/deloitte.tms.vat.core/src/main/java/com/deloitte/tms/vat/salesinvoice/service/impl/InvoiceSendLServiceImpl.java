package com.deloitte.tms.vat.salesinvoice.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceSendL;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceSendLInParam;
import com.deloitte.tms.vat.salesinvoice.dao.InvoiceSendLDao;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceSendLService;
/**
 * Home object for domain model class InvoiceSendL.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Component(InvoiceSendLService.BEAN_ID)
public class InvoiceSendLServiceImpl extends BaseService implements InvoiceSendLService{
	@Resource
	InvoiceSendLDao invoiceSendLDao;

	@Override
	public IDao getDao() {
		return invoiceSendLDao;
	}

	@Override
	public DaoPage findInvoiceSendLByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= invoiceSendLDao.findInvoiceSendLByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertInvoiceSendLToInParam((List<InvoiceSendL>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<InvoiceSendLInParam> findInvoiceSendLByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<InvoiceSendL> temp= invoiceSendLDao.findInvoiceSendLByParams(params);
		return convertInvoiceSendLToInParam(temp);
	}
	@Override
	public void saveInvoiceSendLDataListsMap(Map dataListsMap) {
		Collection<InvoiceSendLInParam> deleteList = BatchUtils.to(InvoiceSendLInParam.class).getDeleteEntities(dataListsMap);
		Collection<InvoiceSendLInParam> insertList =  BatchUtils.to(InvoiceSendLInParam.class).getInsertEntities(dataListsMap);
		Collection<InvoiceSendLInParam> updateList =  BatchUtils.to(InvoiceSendLInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(InvoiceSendLInParam inParam: updateList){
				InvoiceSendL entity=convertInvoiceSendLInParamToEntity(inParam);
				invoiceSendLDao.update(entity);
			}		
//			invoiceSendLDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(InvoiceSendLInParam inParam: insertList){
				InvoiceSendL entity=convertInvoiceSendLInParamToEntity(inParam);
				invoiceSendLDao.save(entity);
				inParam.setId(entity.getId());
			}
//			invoiceSendLDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(InvoiceSendLInParam inParam:deleteList){
				InvoiceSendL entity=new InvoiceSendL();
				entity.setId(inParam.getId());
				invoiceSendLDao.remove(entity);
			}
//			invoiceSendLDao.removeAll(deleteList);
		}
		
	}
	private List<InvoiceSendLInParam> convertInvoiceSendLToInParam(List<InvoiceSendL> models){
		List<InvoiceSendLInParam> result=new ArrayList<InvoiceSendLInParam>();
		for(InvoiceSendL initiation:models){
			InvoiceSendLInParam inparam=convertInvoiceSendLToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public InvoiceSendLInParam convertInvoiceSendLToInParam(InvoiceSendL model){
		InvoiceSendLInParam inparam=new InvoiceSendLInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public InvoiceSendL convertInvoiceSendLInParamToEntity(InvoiceSendLInParam inParam){
		InvoiceSendL entity=new InvoiceSendL();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	
	public List<InvoiceSendL> findInvoiceSendLByHID(StringBuffer query)
	{
		List<InvoiceSendLInParam> result=new ArrayList<InvoiceSendLInParam>();
		return invoiceSendLDao.findInvoiceSendLByHID(query);
	}
}

