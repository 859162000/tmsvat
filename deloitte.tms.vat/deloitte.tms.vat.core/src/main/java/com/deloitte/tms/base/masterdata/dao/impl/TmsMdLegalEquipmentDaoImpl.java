package com.deloitte.tms.base.masterdata.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.stereotype.Component;

import com.deloitte.tms.base.masterdata.dao.TmsMdLegalEquipmentDao;
import com.deloitte.tms.base.masterdata.model.TmsMdEquipment;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntity;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEquipment;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.pl.security.utils.LittleUtils;
/**
 * Home object for domain model class TmsMdLegalEquipment.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdLegalEquipmentDao.BEAN_ID)
public class TmsMdLegalEquipmentDaoImpl extends BaseDao<TmsMdLegalEquipment> implements TmsMdLegalEquipmentDao{
	public DaoPage findTmsMdLegalEquipmentByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdLegalEquipmentQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<TmsMdLegalEquipment> findTmsMdLegalEquipmentByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdLegalEquipmentQuery1(query, values, params);
		return findBy(query, values);
	}
	public List<TmsMdLegalEquipment> findTmsMdLegalEquipmentByParams1(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdLegalEquipmentQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildTmsMdLegalEquipmentQuery1(StringBuffer query,Map values,Map params) {
		query.append("from TmsMdLegalEquipment where 1=1 ");
		Object value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		value=params.get("legalEntityId");
		if(value!=null)
		{
			query.append(" and legalEntityId = :legalEntityId");
			values.put("legalEntityId", value.toString());
		}
		value=params.get("equipmentId");
		if(value!=null)
		{
			query.append(" and equipmentId = :equipmentId");
			values.put("equipmentId", value.toString());
		}
	}
	private void buildTmsMdLegalEquipmentQuery(StringBuffer query,Map values,Map params) {
		query.append("from TmsMdLegalEquipment where 1=1 ");
		Object value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		value=params.get("equipmentId");
		if(value!=null)
		{
			query.append(" and equipmentId = :equipmentId");
			values.put("equipmentId", value.toString());
		}
	}
	public TmsMdLegalEntity findTmsMdLegalEntity(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdLegalEntityQuery(query, values, params);
		return (TmsMdLegalEntity) getFirstRecord(findBy(query, values));
	}
	private void buildTmsMdLegalEntityQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdLegalEntity where 1=1 ");
		Object value=params.get("tmsMdLegalEquipmentId");
		AssertHelper.notEmpty_assert("TmsMdLegalEntity关联主键不能为空");
		if(value!=null&&!"".equals(value))
		{
			value=Long.parseLong(value.toString());
			query.append(" and tmsMdLegalEquipmentId=:tmsMdLegalEquipmentId");
			values.put("tmsMdLegalEquipmentId", value);
		}
	}
	public TmsMdEquipment findTmsMdEquipment(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdEquipmentQuery(query, values, params);
		return (TmsMdEquipment) getFirstRecord(findBy(query, values));
	}
	private void buildTmsMdEquipmentQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdEquipment where 1=1 ");
		Object value=params.get("tmsMdLegalEquipmentId");
		AssertHelper.notEmpty_assert("TmsMdEquipment关联主键不能为空");
		if(value!=null&&!"".equals(value))
		{
			value=Long.parseLong(value.toString());
			query.append(" and tmsMdLegalEquipmentId=:tmsMdLegalEquipmentId");
			values.put("tmsMdLegalEquipmentId", value);
		}
	}
	
	
	
	
	@Override
	public DaoPage getEquPageByRelatedLeg(String legalEntityId, int pageIndex, int pageSize){
		
		
		StringBuffer query = new StringBuffer();
		/*sb.append("from equipment where id "
				+ "in (select equipid from  legalEquipment where legalid=legId  )");
		*/
		query.append("select y.isDefault, x from ").append( TmsMdLegalEquipment.class.getName() ).append( " y ,");
		query.append( TmsMdEquipment.class.getName()).append(" x  where ");
		
	/*	query.append(" x.id in ");
		
		query.append(" ( select  t.equipmentId from ").append(TmsMdLegalEquipment.class.getName()  ).append(" t ");
		
		query.append(" where t.legalEntityId=:legalEntityId and flag!='0' )   ");
		
		query.append(" and ");*/
		
		
		query.append("  y.legalEntityId=:legalEntityId  and y.flag!='0'  and y.equipmentId=x.id ");
		
		query.append(" and ");
		
		query.append("  x.flag!='0' ");
		
		
		
		HashMap<String, Object> values = new HashMap<String, Object>();
		values.put("legalEntityId", legalEntityId);
		
		return pageBy(query, values, pageIndex, pageSize);
		
	}
	
	
	@Override
	public DaoPage getEquPageByNoRelatedLeg(String legalEntityId, int pageIndex, int pageSize){
		
		
		StringBuffer query = new StringBuffer();
		
		query.append(" from ").append( TmsMdEquipment.class.getName()).append("   where flag= ").append(LittleUtils.one);
		query.append(" and  id not in ");
		
		query.append(" ( select  t.equipmentId from ").append(TmsMdLegalEquipment.class.getName()  ).append(" t ");
		
		query.append(" where flag=").append(LittleUtils.one);
		query.append(" and  t.legalEntityId=:legalEntityId   )  ");
		
		HashMap<String, Object> values = new HashMap<String, Object>();
		values.put("legalEntityId", legalEntityId);
		
		return pageBy(query, values, pageIndex, pageSize);
		
	}
	
	
	@Override
	public void removeEquByInfo(String legalEntityId, String[] equipmentIds){
		
		
		StringBuffer query = new StringBuffer();
		
		query.append(" update ").append( TmsMdLegalEquipment.class.getName() ).append(" set flag='0' ");
		
		query.append(" where  ");
		
		int i=0;
		int len =0;
				if(equipmentIds==null || equipmentIds.length<1){
					
				}else{
					len=equipmentIds.length;
				}
				
				
		for(String equipmentId : equipmentIds){
			// legalEntityId equipmentId
			query.append(" ( legalEntityId=:legalEntityId and equipmentId=:equipmentId"+i+ "  )");
			++i;
			
			if(i<len){
				query.append(" or ");
			}
			
		}
		
		
	
		HashMap<String, Object> values = new HashMap<String, Object>();
		values.put("legalEntityId", legalEntityId);
		
		int j=0;
		for(String equipmentId : equipmentIds){
			
			values.put("equipmentId"+j, equipmentId);
			System.out.println("equipmentId"+j+":"+equipmentId);
			
			++j;
			
		}
		
		System.out.println("removeEquByInfo hql:"+query);
		
		this.executeHqlProduce(query.toString(), values);
		
	}
	@Override
	public void updateDefaultEqu(String legalEntityId, Map defaultMap) {
	
		Set<String> keys = defaultMap.keySet();
		
		for(String equipmentId : keys){
			
			String isDefault = (String)defaultMap.get(equipmentId);
			
			HashMap<String, String> map = new HashMap<String, String>();
			
			map.put("isDefault", isDefault);
			map.put("legalEntityId", legalEntityId);
			map.put("equipmentId", equipmentId);
			
			StringBuffer query = new StringBuffer();
			query.append(" update ").append( TmsMdLegalEquipment.class.getName() ).append(" set isDefault=:isDefault ");
			
			query.append(" where  ");
			
			query.append(" legalEntityId=:legalEntityId and equipmentId=:equipmentId and flag!='0' ");
			
			System.out.println("updateDefaultEqu: "+query);
			this.executeHqlProduce(query.toString(), map);
		}
		
	}
	@Override
	public List<Object[]> getEquipMentListByParams(Map params) {
		HashMap<String, Object> values = new HashMap<String, Object>();
		values.put("legalEntityId", params.get("legalEntityId"));
		
		StringBuffer query = new StringBuffer();
		query.append("select y.isDefault, x from ").append( TmsMdLegalEquipment.class.getName() ).append( " y ,");
		query.append( TmsMdEquipment.class.getName()).append(" x  where ");
		
	/*	query.append(" x.id in ");
		
		query.append(" ( select  t.equipmentId from ").append(TmsMdLegalEquipment.class.getName()  ).append(" t ");
		
		query.append(" where t.legalEntityId=:legalEntityId and flag!='0' )   ");
		
		query.append(" and ");*/
		
		
		query.append("  y.legalEntityId=:legalEntityId  and y.flag!='0'  and y.equipmentId=x.id ");
		query.append(" and ");
		query.append("  x.flag!='0' ");
		return findBy(query, values);
	}
	
}

