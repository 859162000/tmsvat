package com.deloitte.tms.base.masterdata.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.base.masterdata.dao.CustBankAccountDao;
import com.deloitte.tms.base.masterdata.dao.CustomerDao;
import com.deloitte.tms.base.masterdata.dao.CustomerSiteDao;
import com.deloitte.tms.base.masterdata.model.CustBankAccount;
import com.deloitte.tms.base.masterdata.model.CustBankAccountInParam;
import com.deloitte.tms.base.masterdata.model.Customer;
import com.deloitte.tms.base.masterdata.model.CustomerInParam;
import com.deloitte.tms.base.masterdata.model.CustomerSite;
import com.deloitte.tms.base.masterdata.model.CustomerSiteInParam;
import com.deloitte.tms.base.masterdata.service.CustomerService;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
/**
 * Home object for domain model class Customer.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(CustomerService.BEAN_ID)
public class CustomerServiceImpl extends BaseService implements CustomerService{
	@Resource
	CustomerDao customerDao;
	
	@Resource 
	CustomerSiteDao customerSiteDao;
	
	@Resource 
	CustBankAccountDao custBankAccountDao;

	@Override
	public IDao getDao() {
		return customerDao;
	}

	@Override
	public DaoPage findCustomerByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= customerDao.findCustomerByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertCustomerToInParam((List<Customer>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<CustomerInParam> findCustomerByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<Customer> temp= customerDao.findCustomerByParams(params);
		return convertCustomerToInParam(temp);
	}
	@Override
	public void saveCustomerDataListsMap(Map dataListsMap) {
		Collection<CustomerInParam> deleteList = BatchUtils.to(CustomerInParam.class).getDeleteEntities(dataListsMap);
		Collection<CustomerInParam> insertList =  BatchUtils.to(CustomerInParam.class).getInsertEntities(dataListsMap);
		Collection<CustomerInParam> updateList =  BatchUtils.to(CustomerInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(CustomerInParam inParam: updateList){
				Customer entity=convertCustomerInParamToEntity(inParam);
				customerDao.update(entity);
			}		
//			customerDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(CustomerInParam inParam: insertList){
				Customer entity=convertCustomerInParamToEntity(inParam);
				customerDao.save(entity);
				inParam.setId(entity.getId());
			}
//			customerDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(CustomerInParam inParam:deleteList){
				Customer entity=new Customer();
				entity.setId(inParam.getId());
				customerDao.remove(entity);
			}
//			customerDao.removeAll(deleteList);
		}
		
	}
	private List<CustomerInParam> convertCustomerToInParam(List<Customer> models){
		List<CustomerInParam> result=new ArrayList<CustomerInParam>();
		for(Customer initiation:models){
			CustomerInParam inparam=convertCustomerToInParam(initiation);
			/**
			 * @author sqing
			 */
			inparam.setId(initiation.getId());
			/**
			 * end
			 */
			result.add(inparam);
		}
		return result;
	}
	public CustomerInParam convertCustomerToInParam(Customer model){
		CustomerInParam inparam=new CustomerInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public Customer convertCustomerInParamToEntity(CustomerInParam inParam){
		Customer entity=new Customer();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	/**
	 * 
	 * @param inParam
	 * @return
	 */
	public CustomerSite convertCustomerSiteInParamToEntity(CustomerSiteInParam inParam){
		CustomerSite entity=new CustomerSite();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	/**
	 * 
	 * @param inParam
	 * @return
	 */
	public CustBankAccount convertCustBankAccountInParamToEntity(CustBankAccountInParam inParam){
		CustBankAccount entity=new CustBankAccount();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	

	@Override
	public void exeSaveCustomerInParamBatch(CustomerInParam inParam) {
		//原始数据
		List<CustBankAccountInParam> bankAccount_list=inParam.getAccoutlist();
		List<CustomerSiteInParam> customerSiteInParam_list=inParam.getSiteList();
		
		Customer entity=convertCustomerInParamToEntity(inParam);
		
		if(entity.getId()==null||entity.getId().equals("")){//添加
				customerDao.save(entity);
				inParam.setId(entity.getId());
			for(CustBankAccountInParam temp:bankAccount_list){
				temp.setCustomerId(entity.getId());
				custBankAccountDao.save(convertCustBankAccountInParamToEntity(temp));
			}
			for(CustomerSiteInParam inParam_temp:customerSiteInParam_list){
				inParam_temp.setCustomerId(entity.getId());
				customerSiteDao.save(convertCustomerSiteInParamToEntity(inParam_temp));
			}
		}else {
			Customer entity_temp=(Customer)customerDao.get(Customer.class, inParam.getId());
			ReflectUtils.copyProperties(inParam, entity_temp);
			customerDao.update(entity_temp);
			Map<String,String> params=new HashMap<String,String>();
			params.put("customerId", entity_temp.getId());
			
			List<CustBankAccount> custBankAccountList= custBankAccountDao.findCustBankAccountByParams(params);
			List<CustomerSite> customerSite_List= customerSiteDao.findCustomerSiteByParams(params);
			//查出需要作废的语句
			//现有数据更新
			for(CustBankAccountInParam pAccountInParam:bankAccount_list){
				if(pAccountInParam.getId()==null||pAccountInParam.getId().equals("")){
					pAccountInParam.setCustomerId(entity_temp.getId());
					custBankAccountDao.save(convertCustBankAccountInParamToEntity(pAccountInParam));
				}else {
					//出去已经存在的列表
					for(CustBankAccount inParam2:custBankAccountList){
						if(inParam2.getId()==pAccountInParam.getId()){
							custBankAccountList.remove(inParam2);
						}
					}
					CustBankAccount temp_entity=(CustBankAccount)custBankAccountDao.get(CustBankAccount.class, pAccountInParam.getId());
					//pAccountInParam.setCustomerId(entity.getId());
					ReflectUtils.copyProperties(pAccountInParam, temp_entity);
					custBankAccountDao.update(temp_entity);
				}
			}
			
			for(CustomerSiteInParam customerSiteInParam:customerSiteInParam_list){
				if(customerSiteInParam.getId()==null||customerSiteInParam.getId().equals("")){
					customerSiteInParam.setCustomerId(entity.getId());
					customerSiteDao.save(convertCustomerSiteInParamToEntity(customerSiteInParam));
				}else {
					for(CustomerSite customerSiteInParam2:customerSite_List){
						if(customerSiteInParam.getId()==customerSiteInParam2.getId()){
							customerSite_List.remove(customerSiteInParam2);
						}
					}
					//customerSiteInParam.setCustomerId(entity.getId());
					CustomerSite update_temp=(CustomerSite)customerSiteDao.get(CustomerSite.class,customerSiteInParam.getId() );
					ReflectUtils.copyProperties(customerSiteInParam, update_temp);
					customerSiteDao.update(update_temp);
					//移除数据检查
				}
			}
			//删除数据保存
			/*
			for(CustomerSite customerSite:customerSite_List){
				customerSiteDao.remove(customerSite);
			}
			for(CustBankAccount custBankAccount:custBankAccountList){
				custBankAccountDao.remove(custBankAccount);
			}*/
			
		}
		
		
	}

	
}

