package com.deloitte.tms.base.taxsetting.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.base.taxsetting.model.TmsMdInventoryItems;
import com.deloitte.tms.base.taxsetting.dao.TmsMdInventoryItemsDao;
/**
 * Home object for domain model class TmsMdInventoryItems.
 * @see com.deloitte.tms.base.taxsetting.model
 * @author Hibernate Tools
 */
@Component(TmsMdInventoryItemsDao.BEAN_ID)
public class TmsMdInventoryItemsDaoImpl extends BaseDao<TmsMdInventoryItems> implements TmsMdInventoryItemsDao{
	public DaoPage findTmsMdInventoryItemsByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdInventoryItemsQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<TmsMdInventoryItems> findTmsMdInventoryItemsByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdInventoryItemsQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildTmsMdInventoryItemsQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdInventoryItems where 1=1 ");
		Object value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("inventoryItemNumber"))){
			query.append(" and inventoryItemNumber=:inventoryItemNumber");
			values.put("inventoryItemNumber", params.get("inventoryItemNumber"));
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("inventoryItemDescripton"))){
			query.append(" and inventoryItemDescripton like :inventoryItemDescripton");
			values.put("inventoryItemDescripton", "%"+params.get("inventoryItemDescripton")+"%");
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("inventoryItemModels"))){
			query.append(" and inventoryItemModels=:inventoryItemModels");
			values.put("inventoryItemModels", params.get("inventoryItemModels"));
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("inventoryCategoryCode"))){
			query.append(" and inventoryCategoryCode=:inventoryCategoryCode");
			values.put("inventoryCategoryCode", params.get("inventoryCategoryCode"));
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("taxItemId"))){
			query.append(" and taxItemId=:taxItemId");
			values.put("taxItemId", params.get("taxItemId"));
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("taxRate"))){
			query.append(" and taxRate=:taxRate");
			values.put("taxRate", params.get("taxRate"));
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("enabledFlag"))){
			query.append(" and enabledFlag=:enabledFlag");
			values.put("enabledFlag", params.get("enabledFlag"));
		}
	}
}

