package com.deloitte.tms.base.masterdata.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.base.masterdata.dao.TmsMdLegalEquipmentDao;
import com.deloitte.tms.base.masterdata.model.TmsMdEquipment;
import com.deloitte.tms.base.masterdata.model.TmsMdEquipmentInParam2;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntity;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEquipment;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEquipmentInParam;
import com.deloitte.tms.base.masterdata.service.TmsMdLegalEquipmentService;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
/**
 * Home object for domain model class TmsMdLegalEquipment.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdLegalEquipmentService.BEAN_ID)
public class TmsMdLegalEquipmentServiceImpl extends BaseService implements TmsMdLegalEquipmentService{
	@Resource
	TmsMdLegalEquipmentDao tmsMdLegalEquipmentDao;
	
	
	@Override
	public Integer runHqlOrSql(String sql, Map values){
		
		return this.tmsMdLegalEquipmentDao.executeHqlProduce(sql, values);
	}

	@Override
	public IDao getDao() {
		return tmsMdLegalEquipmentDao;
	}

	@Override
	public DaoPage findTmsMdLegalEquipmentByParams(Map params, Integer pageIndex,
			Integer pageSize) throws Exception {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsMdLegalEquipmentDao.findTmsMdLegalEquipmentByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsMdLegalEquipmentToInParam((List<TmsMdLegalEquipment>) daoPage.getResult()));
		return daoPage;
	}
	
	
	public List<TmsMdLegalEquipment> finAllEquipment()
	{
		return tmsMdLegalEquipmentDao.find("from DefaultUrl where 1=1");
		//tmsMdLegalEquipmentDao
	}
	@Override
	public List<TmsMdLegalEquipment> findTmsMdLegalEquipmentByParams(Map params) throws Exception {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsMdLegalEquipment> temp= tmsMdLegalEquipmentDao.findTmsMdLegalEquipmentByParams(params);
		return temp;
	}
	@Override
	public List<TmsMdLegalEquipmentInParam> findTmsMdLegalEquipmentByParams1(Map params) throws Exception {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsMdLegalEquipment> temp= tmsMdLegalEquipmentDao.findTmsMdLegalEquipmentByParams1(params);
		return convertTmsMdLegalEquipmentToInParam(temp);
	}
	@Override
	public void saveTmsMdLegalEquipmentDataListsMap(Map dataListsMap) throws Exception {
		Collection<TmsMdLegalEquipmentInParam> deleteList = BatchUtils.to(TmsMdLegalEquipmentInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsMdLegalEquipmentInParam> insertList =  BatchUtils.to(TmsMdLegalEquipmentInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsMdLegalEquipmentInParam> updateList =  BatchUtils.to(TmsMdLegalEquipmentInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsMdLegalEquipmentInParam inParam: updateList){
				TmsMdLegalEquipment entity=convertTmsMdLegalEquipmentInParamToEntity(inParam);
				tmsMdLegalEquipmentDao.update(entity);
			}		
//			tmsMdLegalEquipmentDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsMdLegalEquipmentInParam inParam: insertList){
				TmsMdLegalEquipment entity=convertTmsMdLegalEquipmentInParamToEntity(inParam);
				tmsMdLegalEquipmentDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsMdLegalEquipmentDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsMdLegalEquipmentInParam inParam:deleteList){
				TmsMdLegalEquipment entity=new TmsMdLegalEquipment();
				entity.setId(inParam.getId());
				tmsMdLegalEquipmentDao.remove(entity);
			}
//			tmsMdLegalEquipmentDao.removeAll(deleteList);
		}
		
	}
	

	private List<TmsMdLegalEquipmentInParam> convertTmsMdLegalEquipmentToInParam(List<TmsMdLegalEquipment> models) throws Exception{
		List<TmsMdLegalEquipmentInParam> result=new ArrayList<TmsMdLegalEquipmentInParam>();
		for(TmsMdLegalEquipment initiation:models){
			TmsMdLegalEquipmentInParam inparam=convertTmsMdLegalEquipmentToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TmsMdLegalEquipmentInParam convertTmsMdLegalEquipmentToInParam(TmsMdLegalEquipment model) throws Exception{
		
		TmsMdLegalEquipmentInParam inparam=new TmsMdLegalEquipmentInParam();
		
		ReflectUtils.copyProperties(model, inparam);
	
//		inparam.setEquipmentName( model.getTmsMdEquipment().getEquipmentName() );
//		
//		inparam.setLegalEntityName(model.getTmsMdLegalEntity().getLegalEntityName());
//		
		
		return inparam;
		
		
		/**
		 *
		 * ReflectUtils.copyProperties(model, inparam);
		 * 
		 * this wil exception for equipment_id=null
		 */
		
/*		Method[] orgMethods =  model.getClass().getMethods();
		
		Method[] tarMethods =  inparam.getClass().getMethods();
		
	
		
		ArrayList<String>  orgGetMethods = new ArrayList<String>();
		
		ArrayList<String>  tarSetMethods = new ArrayList<String>();*/
		
/*		
		for(Method orgM : orgMethods){
			
			String temTarName=orgM.getName();
			
			if(temTarName!=null && temTarName.startsWith("get")){
				
				orgGetMethods.add(temTarName.substring(3));
			}
			
		//to-do isxxx
		}
		*/
/*		for(Method tarM : tarMethods){
			
			String temTarName=tarM.getName();
			if(temTarName!=null && temTarName.startsWith("set")){
				
				tarSetMethods.add(temTarName.substring(3));
			}
			
		}
		
		
		for(String orgGetMethod : orgGetMethods){
			
			if(tarSetMethods.contains(orgGetMethod)){
				
				inparam.getClass();  
				
				
			}
		}
		*/
	

	
	}
	public TmsMdLegalEquipment convertTmsMdLegalEquipmentInParamToEntity(TmsMdLegalEquipmentInParam inParam) throws Exception{
		TmsMdLegalEquipment entity=new TmsMdLegalEquipment();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	public TmsMdLegalEntity findTmsMdLegalEntity(Map params)
	{
		Object value=params.get("tmsMdLegalEquipmentId");
		AssertHelper.notEmpty_assert("TmsMdLegalEntity关联主键不能为空");
		TmsMdLegalEquipment tmsMdLegalEquipment=(TmsMdLegalEquipment) tmsMdLegalEquipmentDao.get(TmsMdLegalEquipment.class, Long.parseLong(value.toString()));
		//return tmsMdLegalEquipmentDao.findTmsMdLegalEntity(params);
		//TmsMdLegalEntity result= tmsMdLegalEquipment.getTmsMdLegalEntity();
//		if(result==null)
//		{
//			result=new TmsMdLegalEntity();
//		}
		return null;
	}
	public TmsMdEquipment findTmsMdEquipment(Map params)
	{
		Object value=params.get("tmsMdLegalEquipmentId");
		AssertHelper.notEmpty_assert("TmsMdEquipment关联主键不能为空");
		TmsMdLegalEquipment tmsMdLegalEquipment=(TmsMdLegalEquipment) tmsMdLegalEquipmentDao.get(TmsMdLegalEquipment.class, Long.parseLong(value.toString()));
		//return tmsMdLegalEquipmentDao.findTmsMdEquipment(params);
	//	TmsMdEquipment result= tmsMdLegalEquipment.getTmsMdEquipment();
		
		return null;
	}
	
	
	@Override
	public DaoPage getEquPageByRelatedLeg(String legId, int pageIndex, int pageSize){
		
		
		return this.tmsMdLegalEquipmentDao.getEquPageByRelatedLeg(legId, pageIndex, pageSize);
	}
	
	
	@Override
	public DaoPage getEquPageByNoRelatedLeg(String legId, int pageIndex, int pageSize){
		
		
		  DaoPage daoPage = this.tmsMdLegalEquipmentDao.getEquPageByNoRelatedLeg(legId, pageIndex, pageSize);
		
		  convertToEquWithInfo(daoPage);
		
		  return daoPage;
	}
	
	public static void convertToEquWithInfo(DaoPage daoPage){
		
		List<TmsMdEquipment> list =  (List<TmsMdEquipment>)daoPage.getResult();
		
		ArrayList<TmsMdEquipmentInParam2> listInfo = new ArrayList<TmsMdEquipmentInParam2>();
		
		for(TmsMdEquipment tmsMdEquipment : list){
			
		
			TmsMdEquipmentInParam2 einfo = new TmsMdEquipmentInParam2(tmsMdEquipment);
			
			listInfo.add(einfo);
			
		}
		
		daoPage.setResult(listInfo);
	}
	
	
	@Override
	public void saveBindEqu(String legalId, String[] equIds){
		
		//ArrayList<TmsMdLegalEquipment> list = new ArrayList<TmsMdLegalEquipment>();
		for(String equId : equIds){
			
			TmsMdLegalEquipment legEqu = new TmsMdLegalEquipment();
			legEqu.setLegalEntityId(legalId);
			legEqu.setEquipmentId(equId);
			legEqu.setIsDefault("0");
			
			//list.add(legEqu);
			this.tmsMdLegalEquipmentDao.save(legEqu);
		}
		
/*		if(list.size()>0){
			//this.tmsMdLegalEquipmentDao.saveAll(list);
		}*/
	
	}
	
	
	@Override
	public void removeEquByInfo(String legalId, String[] equIds){
		
		//ArrayList<TmsMdLegalEquipment> list = new ArrayList<TmsMdLegalEquipment>();
	/*	for(String equId : equIds){
			
			TmsMdLegalEquipment legEqu = new TmsMdLegalEquipment();
			legEqu.setLegalEntityId(legalId);
			legEqu.setEquipmentId(equId);*/
			
			this.tmsMdLegalEquipmentDao.removeEquByInfo( legalId,  equIds);
		//}
	}
	
	
	
	@Override
	public void updateDefaultEqu(String legalId, Map defaultMap){
		
		this.tmsMdLegalEquipmentDao.updateDefaultEqu( legalId,  defaultMap);
	}

	@Override
	public List<Object[]> getEquipMentListByParams(Map params) {
		return tmsMdLegalEquipmentDao.getEquipMentListByParams(params);
	}
	
}

