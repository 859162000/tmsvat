package com.deloitte.tms.base.taxsetting.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.base.taxsetting.model.TmsMdBsnCombination;
import com.deloitte.tms.base.taxsetting.dao.TmsMdBsnCombinationDao;
/**
 * Home object for domain model class TmsMdBsnCombination.
 * @see com.deloitte.tms.base.taxsetting.model
 * @author Hibernate Tools
 */
@Component(TmsMdBsnCombinationDao.BEAN_ID)
public class TmsMdBsnCombinationDaoImpl extends BaseDao<TmsMdBsnCombination> implements TmsMdBsnCombinationDao{
	public DaoPage findTmsMdBsnCombinationByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdBsnCombinationQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<TmsMdBsnCombination> findTmsMdBsnCombinationByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdBsnCombinationQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildTmsMdBsnCombinationQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdBsnCombination where 1=1 ");
		Object value=params.get("status");
		Object value2=params.get("bsnCombinationCode");
		Object value3=params.get("bsnCombinationName");
		
		
		Object value4=params.get("flexStructuresId");
		
		
		Object value5=params.get("transSegment1");
		Object value6=params.get("transSegment2");
		Object value7=params.get("transSegment3");
		Object value8=params.get("transSegment4");
		Object value9=params.get("transSegment5");
		Object value10=params.get("transSegment6");
		Object value11=params.get("transSegment7");
		Object value12=params.get("transSegment8");
		Object value13=params.get("transSegment9");
		Object value14=params.get("transSegment10");
		Object value15=params.get("legalEntityId");
		Object value16=params.get("enabledFlag");
		Object value17=params.get("description");
		Object value18=params.get("orgId");
		Object value19=params.get("startDate");
		Object value20=params.get("endDate");
		
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		if(value2!=null && !"".equals(value2))
		{
			query.append(" and bsnCombinationCode like :bsnCombinationCode");
			values.put("bsnCombinationCode", "%"+value2+"%");
		}
		if(value3!=null && !"".equals(value3))
		{
			query.append(" and bsnCombinationName like :bsnCombinationName");
			values.put("bsnCombinationName", "%"+value3+"%");
		}
		
	
		
		if(value4!=null && !"".equals(value4))
		{
			query.append(" and flexStructuresId like :flexStructuresId");
			values.put("flexStructuresId", "%"+value4+"%");
		}
	
		
		
		if(value5!=null && !"".equals(value5))
		{
			query.append(" and transSegment1 like :transSegment1");
			values.put("transSegment1", "%"+value5+"%");
		}	
		if(value6!=null && !"".equals(value6))
		{
			query.append(" and transSegment2 like :transSegment2");
			values.put("transSegment2", "%"+value6+"%");
		}
		if(value7!=null && !"".equals(value7))
		{
			query.append(" and transSegment3 like :transSegment3");
			values.put("transSegment3", "%"+value7+"%");
		}
		if(value8!=null && !"".equals(value8))
		{
			query.append(" and transSegment4 like :transSegment4");
			values.put("transSegment4", "%"+value8+"%");
		}
		if(value9!=null && !"".equals(value9))
		{
			query.append(" and transSegment5 like :transSegment5");
			values.put("transSegment5", "%"+value9+"%");
		}
		if(value10!=null && !"".equals(value10))
		{
			query.append(" and transSegment6 like :transSegment6");
			values.put("transSegment6", "%"+value10+"%");
		}
		if(value11!=null && !"".equals(value11))
		{
			query.append(" and transSegment7 like :transSegment7");
			values.put("transSegment7", "%"+value11+"%");
		}
		if(value12!=null && !"".equals(value12))
		{
			query.append(" and transSegment8 like :transSegment8");
			values.put("transSegment8", "%"+value12+"%");
		}
		if(value13!=null && !"".equals(value13))
		{
			query.append(" and transSegment9 like :transSegment9");
			values.put("transSegment9", "%"+value13+"%");
		}
		if(value14!=null && !"".equals(value14))
		{
			query.append(" and transSegment10 like :transSegment10");
			values.put("transSegment10", "%"+value14+"%");
		}
		if(value15!=null && !"".equals(value15))
		{
			query.append(" and legalEntityId like :legalEntityId");
			values.put("legalEntityId", "%"+value15+"%");
		}
		if(value16!=null && !"".equals(value16))
		{
			query.append(" and enabledFlag like :enabledFlag");
			values.put("enabledFlag", "%"+value16+"%");
		}
		if(value17!=null && !"".equals(value17))
		{
			query.append(" and description like :description");
			values.put("description", "%"+value17+"%");
		}
		if(value18!=null && !"".equals(value18))
		{
			query.append(" and orgId like :orgId");
			values.put("orgId", "%"+value18+"%");
		}
		if(value19!=null && !"".equals(value19))
		{
			query.append(" and startDate like :startDate");
			values.put("startDate", "%"+value19+"%");
		}
		if(value20!=null && !"".equals(value20))
		{
			query.append(" and endDate like :endDate");
			values.put("endDate", "%"+value20+"%");
		}
	}
}

