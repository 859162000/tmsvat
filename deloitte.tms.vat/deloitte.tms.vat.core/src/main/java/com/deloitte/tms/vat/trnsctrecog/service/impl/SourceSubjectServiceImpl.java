package com.deloitte.tms.vat.trnsctrecog.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.vat.trnsctrecog.dao.ISourceSubjectDao;
import com.deloitte.tms.vat.trnsctrecog.model.SourceSubject;
import com.deloitte.tms.vat.trnsctrecog.model.SourceSubjectInParam;
import com.deloitte.tms.vat.trnsctrecog.model.SourceSubjectPart;
import com.deloitte.tms.vat.trnsctrecog.model.SourceSubjectPartInParam;
import com.deloitte.tms.vat.trnsctrecog.service.ISourceSubjectService;
/**
 * Home object for domain model class SourceSubject.
 * @see com.deloitte.tms.vat.bill.pm.model
 * @author Hibernate Tools
 */
@Component(ISourceSubjectService.BEAN_ID)
public class SourceSubjectServiceImpl extends BaseService implements ISourceSubjectService{
	@Resource
	ISourceSubjectDao sourceSubjectDao;

	@Override
	public IDao getDao() {
		return sourceSubjectDao;
	}

	@Override
	public DaoPage findSourceSubjectByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= sourceSubjectDao.findSourceSubjectByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertSourceSubjectToInParam((List<SourceSubject>) daoPage.getResult()));
		return daoPage;
	}
	
	@Override
	public DaoPage findSourceSubjectPartByParams(Map params, Integer pageIndex, Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= sourceSubjectDao.findSourceSubjectPartByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertSourceSubjectPartToInParam((List<SourceSubjectPart>) daoPage.getResult()));
		return daoPage;
	}
	
	@Override
	public List<SourceSubjectInParam> findSourceSubjectByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<SourceSubject> temp= sourceSubjectDao.findSourceSubjectByParams(params);
		return convertSourceSubjectToInParam(temp);
	}
	@Override
	public void saveSourceSubjectDataListsMap(Map dataListsMap) {
		Collection<SourceSubjectInParam> deleteList = BatchUtils.to(SourceSubjectInParam.class).getDeleteEntities(dataListsMap);
		Collection<SourceSubjectInParam> insertList =  BatchUtils.to(SourceSubjectInParam.class).getInsertEntities(dataListsMap);
		Collection<SourceSubjectInParam> updateList =  BatchUtils.to(SourceSubjectInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(SourceSubjectInParam inParam: updateList){
				SourceSubject entity=convertSourceSubjectInParamToEntity(inParam);
				sourceSubjectDao.update(entity);
			}		
//			sourceSubjectDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(SourceSubjectInParam inParam: insertList){
				SourceSubject entity=convertSourceSubjectInParamToEntity(inParam);
				sourceSubjectDao.save(entity);
				inParam.setId(entity.getId());
			}
//			sourceSubjectDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(SourceSubjectInParam inParam:deleteList){
				SourceSubject entity=new SourceSubject();
				entity.setId(inParam.getId());
				sourceSubjectDao.remove(entity);
			}
//			sourceSubjectDao.removeAll(deleteList);
		}
		
	}
	private List<SourceSubjectInParam> convertSourceSubjectToInParam(List<SourceSubject> models){
		List<SourceSubjectInParam> result=new ArrayList<SourceSubjectInParam>();
		for(SourceSubject initiation:models){
			SourceSubjectInParam inparam=convertSourceSubjectToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	private List<SourceSubjectPartInParam> convertSourceSubjectPartToInParam(List<SourceSubjectPart> models){
		List<SourceSubjectPartInParam> result=new ArrayList<SourceSubjectPartInParam>();
		for(SourceSubjectPart initiation:models){
			SourceSubjectPartInParam inparam=convertSourceSubjectPartToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public SourceSubjectInParam convertSourceSubjectToInParam(SourceSubject model){
		SourceSubjectInParam inparam=new SourceSubjectInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public SourceSubjectPartInParam convertSourceSubjectPartToInParam(SourceSubjectPart model){
		SourceSubjectPartInParam inparam=new SourceSubjectPartInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public SourceSubject convertSourceSubjectInParamToEntity(SourceSubjectInParam inParam){
		SourceSubject entity=new SourceSubject();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	public SourceSubjectPart convertSourceSubjectInParamToEntity(SourceSubjectPartInParam inParam){
		SourceSubjectPart entity=new SourceSubjectPart();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
}

