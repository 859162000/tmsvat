package com.deloitte.tms.vat.bill.pm.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.vat.bill.pm.model.BillBook;
import com.deloitte.tms.vat.bill.pm.model.BillBookInParam;
import com.deloitte.tms.vat.bill.pm.dao.BillBookDao;
import com.deloitte.tms.vat.bill.pm.service.BillBookService;
/**
 * Home object for domain model class BillBook.
 * @see com.deloitte.tms.vat.bill.pm.model
 * @author Hibernate Tools
 */
@Component(BillBookService.BEAN_ID)
public class BillBookServiceImpl extends BaseService implements BillBookService{
	@Resource
	BillBookDao billBookDao;

	@Override
	public IDao getDao() {
		return billBookDao;
	}

	@Override
	public DaoPage findBillBookByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= billBookDao.findBillBookByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertBillBookToInParam((List<BillBook>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<BillBookInParam> findBillBookByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<BillBook> temp= billBookDao.findBillBookByParams(params);
		return convertBillBookToInParam(temp);
	}
	@Override
	public void saveBillBookDataListsMap(Map dataListsMap) {
		Collection<BillBookInParam> deleteList = BatchUtils.to(BillBookInParam.class).getDeleteEntities(dataListsMap);
		Collection<BillBookInParam> insertList =  BatchUtils.to(BillBookInParam.class).getInsertEntities(dataListsMap);
		Collection<BillBookInParam> updateList =  BatchUtils.to(BillBookInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(BillBookInParam inParam: updateList){
				BillBook entity=convertBillBookInParamToEntity(inParam);
				billBookDao.update(entity);
			}		
//			billBookDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(BillBookInParam inParam: insertList){
				BillBook entity=convertBillBookInParamToEntity(inParam);
				billBookDao.save(entity);
				inParam.setId(entity.getId());
			}
//			billBookDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(BillBookInParam inParam:deleteList){
				BillBook entity=new BillBook();
				entity.setId(inParam.getId());
				billBookDao.remove(entity);
			}
//			billBookDao.removeAll(deleteList);
		}
		
	}
	private List<BillBookInParam> convertBillBookToInParam(List<BillBook> models){
		List<BillBookInParam> result=new ArrayList<BillBookInParam>();
		for(BillBook initiation:models){
			BillBookInParam inparam=convertBillBookToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public BillBookInParam convertBillBookToInParam(BillBook model){
		BillBookInParam inparam=new BillBookInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public BillBook convertBillBookInParamToEntity(BillBookInParam inParam){
		BillBook entity=new BillBook();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
}

