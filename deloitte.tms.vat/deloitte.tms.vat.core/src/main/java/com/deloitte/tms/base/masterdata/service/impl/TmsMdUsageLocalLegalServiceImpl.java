package com.deloitte.tms.base.masterdata.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;

import org.springframework.stereotype.Component;

import com.deloitte.tms.base.masterdata.dao.TmsMdUsageLocalLegalDao;
import com.deloitte.tms.base.masterdata.model.TmsMdUsageLocalLegal;
import com.deloitte.tms.base.masterdata.model.TmsMdUsageLocalLegalInParam;
import com.deloitte.tms.base.masterdata.service.TmsMdUsageLocalLegalService;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.pl.security.model.SecurityDept;
import com.deloitte.tms.pl.security.model.impl.DefaultDept;
import com.deloitte.tms.pl.security.utils.FunctionTreeNodeInPL;
import com.deloitte.tms.pl.security.utils.TreeGeneratorInPL;
import com.deloitte.tms.vat.core.common.FunctionTreeNode;
import com.deloitte.tms.vat.core.common.TreeGenerator;
/**
 * Home object for domain model class TmsMdUsageLocalLegal.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdUsageLocalLegalService.BEAN_ID)
public class TmsMdUsageLocalLegalServiceImpl extends BaseService implements TmsMdUsageLocalLegalService{
	
	public static final String IDSPE="#xfxDeloitte#";
	
	@Resource
	TmsMdUsageLocalLegalDao tmsMdUsageLocalLegalDao;

	@Override
	public IDao getDao() {
		return tmsMdUsageLocalLegalDao;
	}
	
	
	@Override
	public JSONArray getOrgTreeFree4Relation(HttpServletResponse response, Map para, ArrayList<String> needFields, String mainClass, String relationClass, String extraKeyName) {
		// 读取层次数据结果集列表
		try {
			
			List<?> subList= new ArrayList<SecurityDept>();
			
			if(extraKeyName==null || ""==extraKeyName.trim()){
			
			}else{
				subList =tmsMdUsageLocalLegalDao.listByFilter(mainClass, relationClass, needFields, extraKeyName);
			
				if(subList==null || subList.size()<1){
					subList= new ArrayList<SecurityDept>();
				}
			}
	
			
			System.out.println("all size:"+subList.size());
			List<FunctionTreeNode> treeNodes = convertTreeNodeList(subList);
			//List<FunctionTreeNodeInPL> treeNodes = convertTreeNodeList2Sel(list, subList, null);
			System.out.println("treeNodes size:"+treeNodes.size());
			
			List<FunctionTreeNode> results = TreeGenerator.buildTree(treeNodes);
			
			
			System.out.println("treeNodes in tree size:"+results.size());
			
			JSONArray jsonArray = JSONArray.fromObject(results);	
			
			return jsonArray;
			//retJsonArray(response, jsonArray);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;		
	}
	
	
	@Override
	public JSONArray getOrgTree2Sel4Legal(HttpServletResponse response, Map para, ArrayList<String> needFields, String mainClass, String relationClass, String extraKeyName) {
		// 读取层次数据结果集列表
		try {
			
			
			
			List<SecurityDept> list=this.tmsMdUsageLocalLegalDao.findAllTargetByFlag(mainClass);
			//List<SecurityDept> list = this.findAllTargetByFlag(mainClass);
			
			if(list==null || list.size()<1){
				list= new ArrayList<SecurityDept>();
				return null;
				//null means no trees so do nothing
			}
			
			String relationKeyId=(String)para.get("relationKeyId");
			
			List<?> subList= new ArrayList<SecurityDept>();
			
			if(extraKeyName==null || ""==extraKeyName.trim()){
			
			}else{
				subList =tmsMdUsageLocalLegalDao.listByFilter(mainClass, relationClass, needFields, extraKeyName);
			//	subList = tmsMdUsageLocalLegalDao.getOrgByRelationKeyId( mainClass,  relationClass,
			//			 relationKeyId,  needFields);
				if(subList==null || subList.size()<1){
					subList= new ArrayList<SecurityDept>();
				}
			}
			
			//HashMap<String, Object> att=new HashMap<String, Object>();
			//att.put("username", relationKeyId);
			
			System.out.println("all size:"+list.size()+"; subList size:"+subList.size());
					
			List<FunctionTreeNodeInPL> treeNodes = convertTreeNodeList2Sel(list, subList, null);
			System.out.println("treeNodes size:"+treeNodes.size());
			
			//List<FunctionTreeNodeInPL> results = TreeGeneratorInPL.buildTree(treeNodes);
			List<FunctionTreeNodeInPL> results = TreeGeneratorInPL.buildTreeUseKey(treeNodes, "id");

			
			System.out.println("treeNodes in tree size:"+results.size());
			
			JSONArray jsonArray = JSONArray.fromObject(results);	
			
			return jsonArray;
			//retJsonArray(response, jsonArray);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;		
	}
	
	
	private List<FunctionTreeNode> convertTreeNodeList(
			List<?> defaultDept) {
		List<FunctionTreeNode> nodes = null;

		if (defaultDept != null) {
			nodes = new ArrayList<FunctionTreeNode>();
			for (Object securityDept : defaultDept) {
				FunctionTreeNode node = convertTreeNode(securityDept);
				if (node != null) {
					nodes.add(node);
				}
			}
		}

		return nodes;
	}
	
	
	private FunctionTreeNode convertTreeNode(Object securityDept) {
		DefaultDept defaultDept=(DefaultDept)securityDept;
		FunctionTreeNode node = null;
		if (defaultDept != null) {
			node = new FunctionTreeNode();
			node.setId(defaultDept.getId());
			node.setChecked(false);
			node.setText(defaultDept.getOrgName());
			node.setDescription(defaultDept.getDes());
			node.setOrgCode(defaultDept.getOrgCode());	
		    node.setPid(defaultDept.getParentId());
		    
		    node.setVirtual(defaultDept.getVirtual());
		    node.setBizOrgCode(defaultDept.getBizOrgCode());
		    node.setOrgType(defaultDept.getOrgType());
		    
		    /*
		     * virtual
bizOrgCode
orgType
		     */
		    
		    System.out.println("convertTreeNode: "+node);
		    
		    //node.setDescription();
		  /*  if(defaultUrl.isForNavigation()){
		    	node.setNavigationFlag("1");
		    }else {
		    	node.setNavigationFlag("0");
			}*/
		  
			

			Map<String, Object> map = new HashMap<String, Object>();

			node.setAttributes(map);
		}
		return node;
	}
	
	
	
	@Override
	public DaoPage listByFilter2DaoPage(String orgClass, String filterClass, ArrayList<String> fieldList, Map<String, Object> para){
		
		DaoPage	daoPage  = tmsMdUsageLocalLegalDao.listByFilter2DaoPage( orgClass,  filterClass,  fieldList, para);
		
		this.convert(daoPage, fieldList);
		return daoPage;
	}
	
	public void convert(DaoPage	daoPage, ArrayList<String> fieldList){
		Collection<Object[]> coll = (Collection<Object[]>)daoPage.getResult();
		ArrayList<HashMap<String, Object>> list = new ArrayList<HashMap<String, Object>>();
		
		for(Object[] obj : coll){
			
			int i=0;
			HashMap<String, Object> m = new HashMap<String, Object>();
			for(Object o : obj){
				
				m.put(fieldList.get(i++), o);
			}
			list.add(m);
		}
		
		daoPage.setResult(list);
		
	}

	
	@Override
	public List<Map<String, Object>> listByFilter2Map(String orgClass, String filterClass, ArrayList<String> fieldList){
		
		List<Object[]>	legalList  = this.listByFilter(orgClass, filterClass, fieldList);
		
		
		return convertList2ComboxMap(legalList, fieldList);
	}
	
	public List<Object[]> listByFilter(String orgClass, String filterClass, ArrayList<String> fieldList){
		
		List<Object[]>	legalList  = tmsMdUsageLocalLegalDao.listByFilter( orgClass,  filterClass,  fieldList);
		
		return legalList;
	}
	
	public List<Map<String, Object>> convertList2ComboxMap(List<Object[]> partLegalList, ArrayList<String> fieldList){
		
	    
	    List<Map<String, Object>> results = new ArrayList<Map<String,Object>>();
	    
	    try{
	    
	    if(partLegalList==null){
	    	
	    	return results;
	    }
	    

	    
	    Iterator<Object[]> iter =  partLegalList.iterator();
	   
	    while(iter.hasNext()){
	    	
	    	if(fieldList!=null && fieldList.size()>1){
	    		
	        	Object[] values = iter.next();
		    	
		    	Map<String, Object> map = new HashMap<String, Object>();
		    	
		    	int k=0;
		    	for(String s : fieldList){
		    		
		    		map.put( s  , values[k++]);
		    	}
		    	
			       results.add(map);
	    	}else if(fieldList!=null && fieldList.size()==1){
	    		
	        	Object values = iter.next();
		    	
		    	Map<String, Object> map = new HashMap<String, Object>();
		    	
		    	int k=0;
		    	for(String s : fieldList){
		    		
		    		map.put( s  , values);
		    	}
		    	
			       results.add(map);
	    	
	    	}
	
	    }
	    
	    
		}catch(Exception x){
			x.printStackTrace();
		}
	    
	    return results;
	}
	

	@Override
	public void removeByKeys(String id, String targetClassName){
		
		tmsMdUsageLocalLegalDao.removeByKeysUseFlag(id, targetClassName);
	}
	
	@Override
	public void removeByKeys(HashMap keysMap, String targetClassName){
		
		tmsMdUsageLocalLegalDao.removeByKeysUseFlag(keysMap, targetClassName);
	}
	
/*	*//**
	 * @author tigchen
	 *//*
	@Override
	public void execDelHqlDefaultTrue(HashMap map){
		

		String ids = (String)map.get("id");
		
		String[] idArray = ids.split(IDSPE);
		
		StringBuffer sb = new StringBuffer();
	
		
		StringBuffer sb1 = new StringBuffer();
		//StringBuffer sb2 = new StringBuffer();
		
		int len = idArray.length;
		int index=0;
		for(String k : idArray){
			
			sb1.append(" '").append( k ).append("'");
			
		//	sb2.append(" '").append( map.get(k) ).append("'");
			
			if(++index < len){
				sb1.append(" , ");
				
				//sb2.append(", ");
			}
		}
		
		
		sb.append(" delete from   ").append(TmsMdLegalEnablePrint.class.getName());
		
		sb.append(" where id in ( ");
		
		sb.append(sb1);
		
		sb.append("  )");
		
		
		System.out.println("execDelHqlDefault will run hql: "+ sb.toString());
		
		
		this.tmsMdUsageLocalLegalDao.executeHqlProduce(sb.toString(), new HashMap());
		
	
	}*/
	
	/**
	 * 
	 *〈一句话功能简述〉 
	 * 功能详细描述
	 * @param modelList
	 * @return
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 * @author tigchen
	 */
	public static List<FunctionTreeNode> generalConvertTreeNodeList4InPara(
			List<TmsMdUsageLocalLegalInParam> modelList) {
		
		System.out.println("convertTreeNodeList starting: ");
		
		List<FunctionTreeNode> nodes = null;

		if (modelList != null) {
			nodes = new ArrayList<FunctionTreeNode>();
			for (TmsMdUsageLocalLegalInParam modelOne : modelList) {
				FunctionTreeNode node = generalConvertTreeNode4InPara(modelOne);
				if (node != null) {
					nodes.add(node);
				}
			}
		}

		return nodes;
	}
	
	
	/**
	 * 
	 *〈一句话功能简述〉 
	 * 功能详细描述
	 * @param cla
	 * @return
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 * @author tigchen
	 */
	public static FunctionTreeNode generalConvertTreeNode4InPara(TmsMdUsageLocalLegalInParam cla) {
		
		FunctionTreeNode node = null;
		try{
		System.out.println("convertTreeNode starting: ");
		
		if (cla != null) {
			node = new FunctionTreeNode();
				
			TmsMdUsageLocalLegalInParam useLoalLegInPara=null;
			
			if(cla instanceof TmsMdUsageLocalLegalInParam){
				
				useLoalLegInPara = (TmsMdUsageLocalLegalInParam)cla;
				
			}else{
				System.out.println("TmsMdUsageLocalLegalServiceImpl > TreeNode > generalConvertTreeNode get wrong class type "+cla.getClass());
				//to-do for other class's instance will write a common convert methord
				return null;
			}
			
		
			
			node.setId(useLoalLegInPara.getTmsMdUsageLocalLegal().getId());
			node.setPid(useLoalLegInPara.getTmsMdUsageLocalLegal().getParentId());
					
			node.setText(useLoalLegInPara.getLegalEntityName());
			
			
			 Map<String, Object> map = new HashMap<String, Object>();
			 
			 	map.put("des", useLoalLegInPara.getTmsMdUsageLocalLegal().getDes());
				map.put("isUsageLocalRegNo", useLoalLegInPara.getTmsMdUsageLocalLegal().getIsUsageLocalRegNo());
				map.put("enabledFlag", useLoalLegInPara.getTmsMdUsageLocalLegal().getEnabledFlag());
				map.put("effectDate", useLoalLegInPara.getTmsMdUsageLocalLegal().getEffectDate());
				map.put("quitDate", useLoalLegInPara.getTmsMdUsageLocalLegal().getQuitDate());
				//map.put("status", useLoalLegInPara.getTmsMdUsageLocalLegal().getStatus());
				map.put("legalEntityName", useLoalLegInPara.getLegalEntityName());//可能node.setText显示不同的东西				
				map.put("legalEntityId", useLoalLegInPara.getTmsMdUsageLocalLegal().getLegalEntityId());
				
				
				
			
				map.put("effectDateShow",    getStrByDate(useLoalLegInPara.getTmsMdUsageLocalLegal().getEffectDate()));
				map.put("quitDateShow", getStrByDate(useLoalLegInPara.getTmsMdUsageLocalLegal().getQuitDate()  )   );
				
			
				node.setAttributes(map);
		    
		    System.out.println("convertTreeNode: "+node);			

		}else{
			
			System.out.println("--generalConvertTreeNode-------- get null");
		}
		
		
		
	}catch(Exception e){
		
		e.printStackTrace();
		
		System.out.println("----generalConvertTreeNode-------------"+e.getMessage());
		
		
	}
		
		return node;
		
		
		
	}
	
	
public static String getStrByDate(Date orgDate){
		
		if(AssertHelper.empty(orgDate)){
			
			return "";
		}
		
	
		try{
			
		//from jquery class="easyui-datebox" will return as format MM/dd/yyyy  2016-03-18 20:16:58.0
	
		/**
		 * 2016-03-18 20:16:58.0
		 * dow mon dd hh:mm:ss zzz yyyy
		 * mon is the month (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec). 
		 * 
		 */
		String orgDateStr = orgDate.toString();
		
		if(orgDateStr.split(" ").length > 5){
			//dow mon dd hh:mm:ss zzz yyyy
			
			String[] use = orgDateStr.split(" ");
			
			String mon = use[1];
			String dd = use[2];
			String yyyy = use[5];
			StringBuffer sb = new StringBuffer();
			sb.append(mon).append("/").append(dd).append("/").append(yyyy);
			
			return sb.toString();
		}else if(orgDateStr.split("-").length>1 ){
			//2016-03-18 20:16:58.0
			
			String value = orgDateStr.split(" ")[0];
			
			if(AssertHelper.empty(value)){
				return "";
			}else{
				
				String[] ok = value.split("-");
				
				StringBuffer sb = new StringBuffer();
				sb.append(ok[1]).append("/").append(ok[2]).append("/").append(ok[0]);
				
				return sb.toString();
			}
		}
		
		
		
	
		
		
		}catch(Exception e){
			e.printStackTrace();
			
			return "";
		}
		return "";		
		
	}
	
	
	
	/**
	 * @author tigchen
	 */
	@Override
	public List<FunctionTreeNode>  findModelInParaByDefault2Nodes(String mainTable, String extrTable){
	
		List<TmsMdUsageLocalLegalInParam> listInPara = this.findModelInParaByDefault(mainTable, extrTable);
		
		return generalConvertTreeNodeList4InPara(listInPara);
	}
	/**
	 * @author tigchen
	 */
	@Override
	public List<TmsMdUsageLocalLegalInParam>   findModelInParaByDefault(String mainTable, String extrTable){
		
	/*
	 * 	hpl.append( " select t1 , t2.legalEntityName from ").append( mainTable).append( "  t1 , ").append( extrTable).append(" t2").append( " where t1.flag='0' "    );
		
		hpl.append("  and t2.flag='0'  and t1.legalEntityId=t2.id");	
	 */
		
		ArrayList<TmsMdUsageLocalLegalInParam> tmsMdUsageLocalLegalInParam = new ArrayList<TmsMdUsageLocalLegalInParam>();
		
		try {

			List<Object[]> resultSet = tmsMdUsageLocalLegalDao.findModelInParaByDefault( mainTable,  extrTable);

			for (Object[] result : resultSet) {
				
				TmsMdUsageLocalLegal tmsMdUsageLocalLegal = (TmsMdUsageLocalLegal)result[0];
				
				String legalEntityName = (String)result[1];
			
				
				tmsMdUsageLocalLegalInParam.add(new TmsMdUsageLocalLegalInParam(tmsMdUsageLocalLegal, legalEntityName));
			}

		}catch(Exception e){
			e.printStackTrace();
		}
		
		return tmsMdUsageLocalLegalInParam;
	 
	}

	@Override
	public DaoPage findTmsMdUsageLocalLegalByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsMdUsageLocalLegalDao.findTmsMdUsageLocalLegalByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsMdUsageLocalLegalToInParam((List<TmsMdUsageLocalLegal>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TmsMdUsageLocalLegalInParam> findTmsMdUsageLocalLegalByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsMdUsageLocalLegal> temp= tmsMdUsageLocalLegalDao.findTmsMdUsageLocalLegalByParams(params);
		return convertTmsMdUsageLocalLegalToInParam(temp);
	}
	@Override
	public void saveTmsMdUsageLocalLegalDataListsMap(Map dataListsMap) {
		Collection<TmsMdUsageLocalLegalInParam> deleteList = BatchUtils.to(TmsMdUsageLocalLegalInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsMdUsageLocalLegalInParam> insertList =  BatchUtils.to(TmsMdUsageLocalLegalInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsMdUsageLocalLegalInParam> updateList =  BatchUtils.to(TmsMdUsageLocalLegalInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsMdUsageLocalLegalInParam inParam: updateList){
				TmsMdUsageLocalLegal entity=convertTmsMdUsageLocalLegalInParamToEntity(inParam);
				tmsMdUsageLocalLegalDao.update(entity);
			}		
//			tmsMdUsageLocalLegalDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsMdUsageLocalLegalInParam inParam: insertList){
				TmsMdUsageLocalLegal entity=convertTmsMdUsageLocalLegalInParamToEntity(inParam);
				tmsMdUsageLocalLegalDao.save(entity);
				//inParam.setId(entity.getId());
			}
//			tmsMdUsageLocalLegalDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsMdUsageLocalLegalInParam inParam:deleteList){
				TmsMdUsageLocalLegal entity=new TmsMdUsageLocalLegal();
				//entity.setId(inParam.getId());
				tmsMdUsageLocalLegalDao.remove(entity);
			}
//			tmsMdUsageLocalLegalDao.removeAll(deleteList);
		}
		
	}
	private List<TmsMdUsageLocalLegalInParam> convertTmsMdUsageLocalLegalToInParam(List<TmsMdUsageLocalLegal> models){
		List<TmsMdUsageLocalLegalInParam> result=new ArrayList<TmsMdUsageLocalLegalInParam>();
		for(TmsMdUsageLocalLegal initiation:models){
			TmsMdUsageLocalLegalInParam inparam=convertTmsMdUsageLocalLegalToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TmsMdUsageLocalLegalInParam convertTmsMdUsageLocalLegalToInParam(TmsMdUsageLocalLegal model){
		TmsMdUsageLocalLegalInParam inparam=new TmsMdUsageLocalLegalInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TmsMdUsageLocalLegal convertTmsMdUsageLocalLegalInParamToEntity(TmsMdUsageLocalLegalInParam inParam){
		TmsMdUsageLocalLegal entity=new TmsMdUsageLocalLegal();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}

	public void findTmsMdLegalEntity(Map params)
	{/*
		Object value=params.get("tmsMdUsageLocalLegalId");
		AssertHelper.notEmpty_assert("TmsMdLegalEntity关联主键不能为空");
		TmsMdUsageLocalLegal tmsMdUsageLocalLegal=(TmsMdUsageLocalLegal) tmsMdUsageLocalLegalDao.get(TmsMdUsageLocalLegal.class, Long.parseLong(value.toString()));
		//return tmsMdUsageLocalLegalDao.findTmsMdLegalEntity(params);
		TmsMdLegalEntity result= tmsMdUsageLocalLegal.getTmsMdLegalEntity();
		if(result==null)
		{
			result=new TmsMdLegalEntity();
		}
		return result;
	*/}

	@Override
	public TmsMdUsageLocalLegal findTmsMdUsageLocalLegal(Map params) {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public void execDelHqlDefaultTrue(HashMap map) {
		// TODO Auto-generated method stub
		
	}
	
	
	public List<Object[]> listByMix(String orgClass, String filterClass, ArrayList<String> fieldList){
		
		//todo
		return null;
	}
	
	private List<FunctionTreeNodeInPL> convertTreeNodeList2Sel(
			List<SecurityDept> defaultDept, List<?> subList, HashMap<String, Object> att) {
		List<FunctionTreeNodeInPL> nodes = null;

		if (defaultDept != null) {
			nodes = new ArrayList<FunctionTreeNodeInPL>();
			for (SecurityDept securityDept : defaultDept) {
				FunctionTreeNodeInPL node = convertTreeNode2Sel(securityDept , subList , att);
				if (node != null) {
					nodes.add(node);
				}
			}
		}

		return nodes;
	}
	
	
	
	private FunctionTreeNodeInPL convertTreeNode2Sel(SecurityDept securityDept,  List<?> subList, HashMap<String, Object> att) {
		DefaultDept defaultDept=(DefaultDept)securityDept;
		FunctionTreeNodeInPL node = null;
		if (defaultDept != null) {
			node = new FunctionTreeNodeInPL();
			node.setId(defaultDept.getId());
			
			boolean contain=false;
			for(Object s : subList){
				//before Object -> SecurityDept
				SecurityDept tempSecurityDept=null;
				if(s instanceof SecurityDept){
					tempSecurityDept=(SecurityDept)s;
				}
				
				if(securityDept.getId().equalsIgnoreCase(tempSecurityDept.getId())){
					contain=true;
					break;
				}
			}
			
			if(contain){
				
				node.setChecked(true);
				
				System.out.println("!!!!!"+node.getId() +":"+node.getDescription()+":"+node.isChecked());
				
			}else{
				node.setChecked(false);
			}
			
			node.setText(defaultDept.getOrgName());
			node.setDescription(defaultDept.getDes());
			node.setOrgCode(defaultDept.getOrgCode());	
		    node.setPid(defaultDept.getParentId());
		    
		    node.setVirtual(defaultDept.getVirtual());
		    node.setBizOrgCode(defaultDept.getBizOrgCode());
		    node.setOrgType(defaultDept.getOrgType());
		    
		    /*
		     * virtual
bizOrgCode
orgType
		     */
		    
		    System.out.println("convertTreeNode: "+node);
		    
		    //node.setDescription();
		  /*  if(defaultUrl.isForNavigation()){
		    	node.setNavigationFlag("1");
		    }else {
		    	node.setNavigationFlag("0");
			}*/
		  
			

			Map<String, Object> map = new HashMap<String, Object>();

			if(AssertHelper.empty(att) || att.size() < 1){
				
			}else{
				map.putAll(att);
				node.setAttributes(map);			
			}			
		}
		
		return node;
	}
}

