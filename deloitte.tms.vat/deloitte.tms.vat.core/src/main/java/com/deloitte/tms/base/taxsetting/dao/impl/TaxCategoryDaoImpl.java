package com.deloitte.tms.base.taxsetting.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.base.taxsetting.model.TaxCategory;
import com.deloitte.tms.base.taxsetting.dao.TaxCategoryDao;
import com.deloitte.tms.base.taxsetting.model.Items;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.itextpdf.text.pdf.PdfStructTreeController.returnType;
/**
 * Home object for domain model class TaxCategory.
 * @see com.deloitte.tms.base.taxsetting.model
 * @author Hibernate Tools
 */
@Component(TaxCategoryDao.BEAN_ID)
public class TaxCategoryDaoImpl extends BaseDao<TaxCategory> implements TaxCategoryDao{
	public DaoPage findTaxCategoryByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTaxCategoryQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<TaxCategory> findTaxCategoryByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		//query.append("select * from TMS_BA_TAX_CATEGORY");
		Map values=new HashMap();
		buildTaxCategoryQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildTaxCategoryQuery(StringBuffer query,Map values,Map params) {
		query.append("from TaxCategory  where 1=1");
		Object value=params.get("status");
		Object value2=params.get("categoryName");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		if(value2 !=null && !"".equals(value2)){
			
			query.append(" and categoryName like :categoryName");
			values.put("categoryName", "%"+value2+"%");
		}
		
	}
	public DaoPage findItemsByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildItemsQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<Items> findItemsByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildItemsQuery(query, values, params);
		return findBy(query, values);
	}
	
	public List findBySearchTax(String hql) {
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		query.append(" from TaxCategory where categoryName like :key ");
		values.put("key", "%"+hql+"%");
		return findBy(query, values);

	}
	private void buildItemsQuery(StringBuffer query,Map values,Map params) {
		query.append(" from Items where 1=1 ");
		Object value=params.get("taxCategoryId");
		if(value!=null&&!"".equals(value))
		{
			value=Long.parseLong(value.toString());
			query.append(" and taxCategoryId=:taxCategoryId");
			values.put("taxCategoryId", value);
		}
		value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
	}
	/**
	 * @author sqing
	 */
	private void buildTaxCategorySql(StringBuffer query,Map values,String categoryId){
		query.append(" select * from TaxCategory where 1=1 ");
		if(AssertHelper.isOrNotEmpty_assert(categoryId)){
			query.append(" and id= '").append(categoryId).append("'");
		}
	}
	@Override
	public String findTaxCategoryNameById(String categoryId) {
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		/*buildTaxCategorySql(query, values,categoryId);*/
		TaxCategory category= (TaxCategory) get(TaxCategory.class,AssertHelper.isOrNotEmpty_assert(categoryId)?categoryId:"");
		//TaxCategory category=(TaxCategory)querySqlForObject(categoryId);
		if(null!=category){
			return category.getCategoryName();
		}else{
			return "";
		}
	}
}

