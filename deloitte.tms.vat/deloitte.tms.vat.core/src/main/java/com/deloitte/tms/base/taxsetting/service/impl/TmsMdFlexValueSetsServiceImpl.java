package com.deloitte.tms.base.taxsetting.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValueSets;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValueSetsInParam;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValues;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValuesInParam;
import com.deloitte.tms.base.taxsetting.dao.TmsMdFlexValueSetsDao;
import com.deloitte.tms.base.taxsetting.service.TmsMdFlexValueSetsService;
/**
 * Home object for domain model class TmsMdFlexValueSets.
 * @see com.deloitte.tms.base.taxsetting.model
 * @author Hibernate Tools
 */
@Component(TmsMdFlexValueSetsService.BEAN_ID)
public class TmsMdFlexValueSetsServiceImpl extends BaseService implements TmsMdFlexValueSetsService{
	@Resource
	TmsMdFlexValueSetsDao tmsMdFlexValueSetsDao;

	@Override
	public IDao getDao() {
		return tmsMdFlexValueSetsDao;
	}
/**
 * 值集查询数据
 */
	@Override
	public DaoPage findTmsMdFlexValueSetsByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsMdFlexValueSetsDao.findTmsMdFlexValueSetsByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsMdFlexValueSetsToInParam((List<TmsMdFlexValueSets>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public void saveTmsMdFlexValueSetsDataListsMap(Map dataListsMap) {
		Collection<TmsMdFlexValueSetsInParam> deleteList = BatchUtils.to(TmsMdFlexValueSetsInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsMdFlexValueSetsInParam> insertList =  BatchUtils.to(TmsMdFlexValueSetsInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsMdFlexValueSetsInParam> updateList =  BatchUtils.to(TmsMdFlexValueSetsInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsMdFlexValueSetsInParam inParam: updateList){
				TmsMdFlexValueSets entity=convertTmsMdFlexValueSetsInParamToEntity(inParam);
				tmsMdFlexValueSetsDao.update(entity);
			}		
//			tmsMdFlexValueSetsDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsMdFlexValueSetsInParam inParam: insertList){
				TmsMdFlexValueSets entity=convertTmsMdFlexValueSetsInParamToEntity(inParam);
				tmsMdFlexValueSetsDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsMdFlexValueSetsDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsMdFlexValueSetsInParam inParam:deleteList){
				TmsMdFlexValueSets entity=new TmsMdFlexValueSets();
				entity.setId(inParam.getId());
				tmsMdFlexValueSetsDao.remove(entity);
			}
//			tmsMdFlexValueSetsDao.removeAll(deleteList);
		}
		
	}
	private List<TmsMdFlexValueSetsInParam> convertTmsMdFlexValueSetsToInParam(List<TmsMdFlexValueSets> models){
		List<TmsMdFlexValueSetsInParam> result=new ArrayList<TmsMdFlexValueSetsInParam>();
		for(TmsMdFlexValueSets initiation:models){
			TmsMdFlexValueSetsInParam inparam=convertTmsMdFlexValueSetsToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TmsMdFlexValueSetsInParam convertTmsMdFlexValueSetsToInParam(TmsMdFlexValueSets model){
		TmsMdFlexValueSetsInParam inparam=new TmsMdFlexValueSetsInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TmsMdFlexValueSets convertTmsMdFlexValueSetsInParamToEntity(TmsMdFlexValueSetsInParam inParam){
		TmsMdFlexValueSets entity=new TmsMdFlexValueSets();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	/**
	 * 值数据查询
	 */
	@Override
	public DaoPage findTmsMdFlexValuesByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsMdFlexValueSetsDao.findTmsMdFlexValuesByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsMdFlexValuesToInParam((List<TmsMdFlexValues>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TmsMdFlexValuesInParam> findTmsMdFlexValuesByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsMdFlexValues> temp= tmsMdFlexValueSetsDao.findTmsMdFlexValuesByParams(params);
		return convertTmsMdFlexValuesToInParam(temp);
	}
	@Override
	public void saveTmsMdFlexValuesDataListsMap(Map dataListsMap) {
		Collection<TmsMdFlexValuesInParam> deleteList = BatchUtils.to(TmsMdFlexValuesInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsMdFlexValuesInParam> insertList =  BatchUtils.to(TmsMdFlexValuesInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsMdFlexValuesInParam> updateList =  BatchUtils.to(TmsMdFlexValuesInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsMdFlexValuesInParam inParam: updateList){
				TmsMdFlexValues entity=convertTmsMdFlexValuesInParamToEntity(inParam);
				tmsMdFlexValueSetsDao.update(entity);
			}		
//			tmsMdFlexValueSetsDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsMdFlexValuesInParam inParam: insertList){
				TmsMdFlexValues entity=convertTmsMdFlexValuesInParamToEntity(inParam);
				tmsMdFlexValueSetsDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsMdFlexValueSetsDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsMdFlexValuesInParam inParam:deleteList){
				TmsMdFlexValues entity=new TmsMdFlexValues();
				entity.setId(inParam.getId());
				tmsMdFlexValueSetsDao.remove(entity);
			}
//			tmsMdFlexValueSetsDao.removeAll(deleteList);
		}
	}
	private List<TmsMdFlexValuesInParam> convertTmsMdFlexValuesToInParam(List<TmsMdFlexValues> models){
		List<TmsMdFlexValuesInParam> result=new ArrayList<TmsMdFlexValuesInParam>();
		for(TmsMdFlexValues initiation:models){
			TmsMdFlexValuesInParam inparam=convertTmsMdFlexValuesToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TmsMdFlexValuesInParam convertTmsMdFlexValuesToInParam(TmsMdFlexValues model){
		TmsMdFlexValuesInParam inparam=new TmsMdFlexValuesInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TmsMdFlexValues convertTmsMdFlexValuesInParamToEntity(TmsMdFlexValuesInParam inParam){
		TmsMdFlexValues entity=new TmsMdFlexValues();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	/**
	 * 删除值集设置
	 */
	@Override
	public void removeTmsMdFlexValueSetss(String tmsMdFlexValueSetsId) {
		tmsMdFlexValueSetsDao.removeTmsMdFlexValueSetss(tmsMdFlexValueSetsId);
		
	}
/**
 * 值集设置编码查询
 */
	@Override
	public DaoPage searchivaluesetencoding(Map<String, Object> parameter,
			int parseInt, int parseInt2) {//findTmsMdFlexValueSetsByParams
		DaoPage daopage = tmsMdFlexValueSetsDao.searchivaluesetencoding( parameter,parseInt,parseInt2);
		return daopage;
	}
	/**
	 * 值集说明数据查询
	 */
@Override
public DaoPage setsearchvaluesetthat(Map<String, Object> parameter,
		int parseInt, int parseInt2) {
	DaoPage daopage = tmsMdFlexValueSetsDao.setsearchvaluesetthat( parameter,parseInt,parseInt2);
	return daopage;
}
}

