package com.deloitte.tms.vat.salesinvoice.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.vat.base.enums.CrvaInvoicePreStatusEnums;
import com.deloitte.tms.vat.base.enums.InvoicePrintStatusEnums;
import com.deloitte.tms.vat.salesinvoice.dao.InvoicePrintPoolDDao;
import com.deloitte.tms.vat.salesinvoice.dao.InvoicePrintPoolHDao;
import com.deloitte.tms.vat.salesinvoice.dao.InvoicePrintPoolLDao;
import com.deloitte.tms.vat.salesinvoice.dao.InvoiceReqHDao;
import com.deloitte.tms.vat.salesinvoice.dao.InvoiceReqLDao;
import com.deloitte.tms.vat.salesinvoice.dao.InvoiceTrxPoolDao;
import com.deloitte.tms.vat.salesinvoice.dao.TmsCrvatInvoicePreHDao;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolD;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolH;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolHInParam;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolL;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolLInParam;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceReqH;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceReqL;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxPool;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxPoolInParam;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvoicePreH;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvoicePreHInParam;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvoicePreL;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvoicePreLInParam;
import com.deloitte.tms.vat.salesinvoice.service.TmsCrvatInvoicePreHService;
/**
 * Home object for domain model class TmsCrvatInvoicePreH.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Component(TmsCrvatInvoicePreHService.BEAN_ID)
public class TmsCrvatInvoicePreHServiceImpl extends BaseService implements TmsCrvatInvoicePreHService{
	
	//发票准备池
	@Resource
	TmsCrvatInvoicePreHDao tmsCrvatInvoicePreHDao;
	
	@Resource
	InvoiceReqLDao invoiceReqLDao;
	
	//开票交易池
	@Resource
	InvoiceTrxPoolDao invoiceTrxPoolDao;
	
	//发票打印池
	@Resource
	InvoicePrintPoolHDao invoicePrintPoolHDao;
	
	@Resource
	InvoicePrintPoolLDao invoicePrintPoolLDao;
	
	@Resource
	InvoicePrintPoolDDao invoicePrintPoolDDao;
	

	@Override
	public IDao getDao() {
		return tmsCrvatInvoicePreHDao;
	}

	@Override
	public DaoPage findTmsCrvatInvoicePreHByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsCrvatInvoicePreHDao.findTmsCrvatInvoicePreHByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsCrvatInvoicePreHToInParam((List<TmsCrvatInvoicePreH>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TmsCrvatInvoicePreHInParam> findTmsCrvatInvoicePreHByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsCrvatInvoicePreH> temp= tmsCrvatInvoicePreHDao.findTmsCrvatInvoicePreHByParams(params);
		return convertTmsCrvatInvoicePreHToInParam(temp);
	}
	@Override
	public void saveTmsCrvatInvoicePreHDataListsMap(Map dataListsMap) {
		Collection<TmsCrvatInvoicePreHInParam> deleteList = BatchUtils.to(TmsCrvatInvoicePreHInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsCrvatInvoicePreHInParam> insertList =  BatchUtils.to(TmsCrvatInvoicePreHInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsCrvatInvoicePreHInParam> updateList =  BatchUtils.to(TmsCrvatInvoicePreHInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsCrvatInvoicePreHInParam inParam: updateList){
				TmsCrvatInvoicePreH entity=convertTmsCrvatInvoicePreHInParamToEntity(inParam);
				tmsCrvatInvoicePreHDao.update(entity);
			}		
//			tmsCrvatInvoicePreHDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsCrvatInvoicePreHInParam inParam: insertList){
				TmsCrvatInvoicePreH entity=convertTmsCrvatInvoicePreHInParamToEntity(inParam);
				tmsCrvatInvoicePreHDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsCrvatInvoicePreHDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsCrvatInvoicePreHInParam inParam:deleteList){
				TmsCrvatInvoicePreH entity=new TmsCrvatInvoicePreH();
				entity.setId(inParam.getId());
				tmsCrvatInvoicePreHDao.remove(entity);
			}
//			tmsCrvatInvoicePreHDao.removeAll(deleteList);
		}
		
	}
	private List<TmsCrvatInvoicePreHInParam> convertTmsCrvatInvoicePreHToInParam(List<TmsCrvatInvoicePreH> models){
		List<TmsCrvatInvoicePreHInParam> result=new ArrayList<TmsCrvatInvoicePreHInParam>();
		for(TmsCrvatInvoicePreH initiation:models){
			TmsCrvatInvoicePreHInParam inparam=convertTmsCrvatInvoicePreHToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	
	
	public TmsCrvatInvoicePreHInParam convertTmsCrvatInvoicePreHToInParam(TmsCrvatInvoicePreH model){
		TmsCrvatInvoicePreHInParam inparam=new TmsCrvatInvoicePreHInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TmsCrvatInvoicePreH convertTmsCrvatInvoicePreHInParamToEntity(TmsCrvatInvoicePreHInParam inParam){
		TmsCrvatInvoicePreH entity=new TmsCrvatInvoicePreH();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	@Override
	public DaoPage findTmsCrvatInvoicePreLByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsCrvatInvoicePreHDao.findTmsCrvatInvoicePreLByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsCrvatInvoicePreLToInParam((List<TmsCrvatInvoicePreL>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TmsCrvatInvoicePreLInParam> findTmsCrvatInvoicePreLByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsCrvatInvoicePreL> temp= tmsCrvatInvoicePreHDao.findTmsCrvatInvoicePreLByParams(params);
		return convertTmsCrvatInvoicePreLToInParam(temp);
	}
	@Override
	public void saveTmsCrvatInvoicePreLDataListsMap(Map dataListsMap) {
		Collection<TmsCrvatInvoicePreLInParam> deleteList = BatchUtils.to(TmsCrvatInvoicePreLInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsCrvatInvoicePreLInParam> insertList =  BatchUtils.to(TmsCrvatInvoicePreLInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsCrvatInvoicePreLInParam> updateList =  BatchUtils.to(TmsCrvatInvoicePreLInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsCrvatInvoicePreLInParam inParam: updateList){
				TmsCrvatInvoicePreL entity=convertTmsCrvatInvoicePreLInParamToEntity(inParam);
				tmsCrvatInvoicePreHDao.update(entity);
			}		
//			tmsCrvatInvoicePreHDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsCrvatInvoicePreLInParam inParam: insertList){
				TmsCrvatInvoicePreL entity=convertTmsCrvatInvoicePreLInParamToEntity(inParam);
				tmsCrvatInvoicePreHDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsCrvatInvoicePreHDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsCrvatInvoicePreLInParam inParam:deleteList){
				TmsCrvatInvoicePreL entity=new TmsCrvatInvoicePreL();
				entity.setId(inParam.getId());
				tmsCrvatInvoicePreHDao.remove(entity);
			}
//			tmsCrvatInvoicePreHDao.removeAll(deleteList);
		}
	}
	private List<TmsCrvatInvoicePreLInParam> convertTmsCrvatInvoicePreLToInParam(List<TmsCrvatInvoicePreL> models){
		List<TmsCrvatInvoicePreLInParam> result=new ArrayList<TmsCrvatInvoicePreLInParam>();
		for(TmsCrvatInvoicePreL initiation:models){
			TmsCrvatInvoicePreLInParam inparam=convertTmsCrvatInvoicePreLToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	
	public TmsCrvatInvoicePreLInParam convertTmsCrvatInvoicePreLToInParam(TmsCrvatInvoicePreL model){
		TmsCrvatInvoicePreLInParam inparam=new TmsCrvatInvoicePreLInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	
	private InvoiceTrxPoolInParam convertInvoiceTrxPoolToInParam(InvoiceTrxPool inparam){
		InvoiceTrxPoolInParam entity=new InvoiceTrxPoolInParam();
		ReflectUtils.copyProperties(inparam, entity);
		return entity;
	}
	
	public TmsCrvatInvoicePreL convertTmsCrvatInvoicePreLInParamToEntity(TmsCrvatInvoicePreLInParam inParam){
		TmsCrvatInvoicePreL entity=new TmsCrvatInvoicePreL();
		ReflectUtils.copyProperties(inParam, entity);
		entity.setAcctdAmountCr(inParam.getAcctdAmountCr());
		entity.setInvoiceAmount(inParam.getInvoiceAmount());
		entity.setVatAmount(inParam.getVatAmount());
		return entity;
	}
	
	public InvoicePrintPoolL convertInvoicePrintPoolLInParamToEntity(InvoicePrintPoolLInParam inParam){
		InvoicePrintPoolL entity= new InvoicePrintPoolL();
		ReflectUtils.copyProperties(inParam, entity);
		//数字需要重新调用get/set方法
		entity.setAcctdAmountCR(inParam.getAcctdAmountCR());
		entity.setTaxRate(inParam.getTaxRate());
		entity.setInvoiceAmount(inParam.getInvoiceAmount());
		entity.setVatAmount(inParam.getVatAmount());
		return entity;
		
	}
	public InvoicePrintPoolH convertInvoicePrintPoolHInParamToEntity(InvoicePrintPoolHInParam inParam){
		InvoicePrintPoolH entity=new InvoicePrintPoolH();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	
	/**
	 * 
	 */
	public void exeTmsCrvatInvoicePreJobToInvoice() {
		/*Map<String,Object> parameter = new HashMap<String,Object>();
		//parameter.put("approvalStatus", CrvaInvoicePreStatusEnums.APPROVED.getValue());
		//待分拆准备单头表查询CrvatInvoicePreH
		List<TmsCrvatInvoicePreHInParam> crvatInvoicePreHInParamList= convertTmsCrvatInvoicePreHToInParam(tmsCrvatInvoicePreHDao.findTmsCrvatInvoicePreHByParams(parameter));
		for(TmsCrvatInvoicePreHInParam crvatInvoicePreHInParam:crvatInvoicePreHInParamList){
			//申请单头表
			InvoiceReqH invoiceReqH=(InvoiceReqH)invoiceReqLDao.get(InvoiceReqH.class, crvatInvoicePreHInParam.getCrvatInvoiceReqHId());
			
			Map<String,Object> parameter_detail = new HashMap<String,Object>();
			parameter_detail.put("tmsCrvatInvoicePreHId", crvatInvoicePreHInParam.getId());
			//交易池数据
			//根据准备单头表ID查询明细列表InvoicePreLInParam
			List<TmsCrvatInvoicePreLInParam> crvatInvoicePreLInParamList= convertTmsCrvatInvoicePreLToInParam(tmsCrvatInvoicePreHDao.findTmsCrvatInvoicePreLByParams(parameter_detail));
			
			//根据准备单行ID从申请单行表中更新发票类型，开票金额以及开票方式等信息
			for(TmsCrvatInvoicePreLInParam tempPreLInParam:crvatInvoicePreLInParamList){
				//申请单行表
				InvoiceReqL invoiceReqL =(InvoiceReqL)invoiceReqLDao.get(InvoiceReqL.class, tempPreLInParam.getCrvatInvoiceReqLId());
				//更新发票类型,净额,税额,开票金额
				tempPreLInParam.setInvoiceCategory(invoiceReqL.getInvoiceCategory());
				tempPreLInParam.setAcctdAmountCr(invoiceReqL.getAcctdAmountCr());
				tempPreLInParam.setVatAmount(invoiceReqL.getVatAmount());
				tempPreLInParam.setInvoiceAmount(invoiceReqL.getInvoiceAmount());
				//tempPreLInParam.setTaxRate(invoiceReqL.getin);
			}
			
			//将相同发票类型和货物编码的交易数据分组，产生初期的发票打印池行列表信息 ，并将相应的交易数据绑定到合计后的打印池行表
			Map<String,TmsCrvatInvoicePreLInParam> group= new HashMap<String,TmsCrvatInvoicePreLInParam>();
			
			for(TmsCrvatInvoicePreLInParam invoicePreLInParam:crvatInvoicePreLInParamList){
				String invoice_type_and_inventoryItemNumber=invoicePreLInParam.getInvoiceCategory()+invoicePreLInParam.getInventoryItemNumber();
				TmsCrvatInvoicePreLInParam temp_count_param=invoicePreLInParam;
				
				if(group.get(invoice_type_and_inventoryItemNumber)!=null){
					TmsCrvatInvoicePreLInParam temp_pool=group.get(invoice_type_and_inventoryItemNumber);
					
					//汇总相同发票类型和相同货物编码的数据
					BigDecimal temp_big=new BigDecimal(0);
					BigDecimal add_temp=new BigDecimal(0);
					if(temp_count_param.getVatAmount()!=null){
						temp_big=temp_count_param.getVatAmount();
					}
					if(temp_pool.getVatAmount()!=null){
						add_temp=temp_pool.getVatAmount();
					}
					temp_pool.setVatAmount(add_temp.add(temp_big));
					
					if(temp_pool.getInvoicePreLList().size()==0){
						List<TmsCrvatInvoicePreLInParam> temp_list=new ArrayList<TmsCrvatInvoicePreLInParam>();
						temp_list.add(invoicePreLInParam);
						temp_pool.setInvoicePreLList(temp_list);
					}else {
						//注意检查能不能把list加上
						temp_pool.getInvoicePreLList().add(invoicePreLInParam);
					}
					group.put(invoice_type_and_inventoryItemNumber, temp_pool);
			    }else {
			    	List<TmsCrvatInvoicePreLInParam> temp_list=new ArrayList<TmsCrvatInvoicePreLInParam>();
			    	temp_list.add(invoicePreLInParam);
			    	temp_count_param.setInvoicePreLList(temp_list);
			    	group.put(invoice_type_and_inventoryItemNumber, temp_count_param);
				}
			}
			//设置发票面额最大值
			BigDecimal bigDecimal=new BigDecimal(1000000);
			
			List<InvoicePrintPoolHInParam> returnList=buildInvoicePrintPoolHList(crvatInvoicePreHInParam,bigDecimal,8,group);
			
			for(InvoicePrintPoolHInParam poolHInParam:returnList){
				//TmsCrvatInvoicePreH tmsPreH=(TmsCrvatInvoicePreH)tmsCrvatInvoicePreHDao.get(TmsCrvatInvoicePreH.class, poolHInParam.getCrvatInvoicePreHId());
				TmsCrvatInvoicePreH tmsPreH=convertTmsCrvatInvoicePreHInParamToEntity(crvatInvoicePreHInParam);
				tmsPreH.setApprovalStatus(CrvaInvoicePreStatusEnums.INVOICEGENERATED.getValue());
				//更新原有状态
				tmsCrvatInvoicePreHDao.save(tmsPreH);
				InvoicePrintPoolH entity=convertInvoicePrintPoolHInParamToEntity(poolHInParam);
				//头信息保存
				invoicePrintPoolHDao.save(entity);
				//明细保存
				Collection<InvoicePrintPoolLInParam> temp_save_list=poolHInParam.getInvoicePrintPoolLInParamList();
				for(InvoicePrintPoolLInParam poolLInParam:temp_save_list){
					poolLInParam.setInvoicePrtPoolHId(entity.getId());
					InvoicePrintPoolL poolLEntity=convertInvoicePrintPoolLInParamToEntity(poolLInParam);
					invoicePrintPoolLDao.save(poolLEntity);
					for(InvoicePrintPoolD temPoolD:poolLInParam.getInvoicePrintPoolDList()){
						temPoolD.setInvoicePrtPoolLId(poolLEntity.getId());
						invoicePrintPoolDDao.save(temPoolD);
					}
				}
			}
		}
		
	*/	
	}
	
	/**
	 * 准备单拆分成发票
	 * @param crvatInvoicePreH 准备单头表信息
	 * @param amount 发票限额
	 * @param pageLimit 发票条目上限
	 * @param map 准备单明细信息
	 * @return 发票头和列
	 * @throws Exception
	 */
	private List<InvoicePrintPoolHInParam> buildInvoicePrintPoolHList(TmsCrvatInvoicePreHInParam crvatInvoicePreHInParam,BigDecimal maxAmount,int pageCount,Map<String, TmsCrvatInvoicePreLInParam> map){
		List<InvoicePrintPoolHInParam> return_list=new ArrayList<InvoicePrintPoolHInParam>();
		
		List<TmsCrvatInvoicePreLInParam> tmsCrvatInvoicePreLInParamList= new ArrayList<TmsCrvatInvoicePreLInParam>();
		//总额合计
		for(String key:map.keySet()){
			TmsCrvatInvoicePreLInParam invoicePreLInParam=map.get(key);
			tmsCrvatInvoicePreLInParamList.add(invoicePreLInParam);
		}
		//Collections.reverse(tmsInvoicePreList);
		//初始化发票最大允许数目===============================================
		while (tmsCrvatInvoicePreLInParamList.size()>0){
			List<InvoicePrintPoolHInParam> temp_list=process(crvatInvoicePreHInParam,maxAmount,pageCount,tmsCrvatInvoicePreLInParamList);
			return_list.addAll(temp_list);
		}
		return return_list;
	}
	
	/**
	 * 
	 * @param maxamount
	 * @param maxnum
	 * @param exists 待处理的根绝分类汇总过后的数据
	 * @return
	 */
	protected List<InvoicePrintPoolHInParam> process(TmsCrvatInvoicePreHInParam tmsCInPreHInParam,BigDecimal maxamount,int maxnum,List<TmsCrvatInvoicePreLInParam> exists){
		List<InvoicePrintPoolHInParam> return_list=new ArrayList<InvoicePrintPoolHInParam>();
		
		/*InvoicePrintPoolHInParam result_PoolHInParam=new InvoicePrintPoolHInParam();
		ReflectUtils.copyProperties(tmsCInPreHInParam, result_PoolHInParam);
		result_PoolHInParam.setCrvatInvoicePreHId(tmsCInPreHInParam.getId());
		result_PoolHInParam.setIsExistCustomer(tmsCInPreHInParam.getIsExitsCustomer());
		
		TmsCrvatInvoicePreLInParam current=exists.get(0);
		result_PoolHInParam.setInvoiceCategory(current.getInvoiceCategory());
		
		result_PoolHInParam.setInvoicingType(tmsCInPreHInParam.getInvoicingType());
		result_PoolHInParam.setInvoicePrintStatus(InvoicePrintStatusEnums.TOBEINVOICE.getValue());
		//===========================================================================
		//当前发票面额总量剩余量
		BigDecimal remain_maxamount=maxamount;
		//已经分拆出去的准备单明细列表
		List<TmsCrvatInvoicePreLInParam> need_removed=new ArrayList<TmsCrvatInvoicePreLInParam>();
		List<TmsCrvatInvoicePreLInParam> need_added=new ArrayList<TmsCrvatInvoicePreLInParam>();
		List<TmsCrvatInvoicePreLInParam> result_PreLInParam_list=new ArrayList<TmsCrvatInvoicePreLInParam>();
		
		for(int index=0;index<exists.size();index++){
			TmsCrvatInvoicePreLInParam exist_temp=exists.get(index);
			if(exist_temp.getAcctdAmountCr().compareTo(maxamount)==1){//合计单笔交易超过发票面额
				need_removed.add(exist_temp);
				List<InvoicePrintPoolHInParam> temp_return_list=new ArrayList<InvoicePrintPoolHInParam>();
				temp_return_list=process_more(tmsCInPreHInParam, remain_maxamount, maxnum, exist_temp);
				
				return_list.addAll(temp_return_list);
			}else{
				if(remain_maxamount.compareTo(new BigDecimal(0))==1){
					if(index+1<=maxnum){
						remain_maxamount=remain_maxamount.subtract(exist_temp.getAcctdAmountCr());
						need_removed.add(exist_temp);
						//已经分拆的发票明细
						result_PreLInParam_list.add(exist_temp);
					}
				}
			}
		}
		//result_PoolHInParam.setInvoicePrintPoolLInParamList(result_PoolLInParam_list);
		result_PoolHInParam.setInvoicePreLInParamList(result_PreLInParam_list);
		//去除已经选择的的数据
		exists.removeAll(need_removed);
		//加入没用完的数据
		exists.addAll(need_added);
		//加入单个
		return_list.add(result_PoolHInParam);*/
		return return_list;
	}
	/**
	 * 一条打印池行表总额超过发票限额，将发票明细表重新拆分
	 * @param tmsCInPreHInParam
	 * @param maxamount
	 * @param maxnum
	 * @param inParam
	 * @return
	 */
	protected List<InvoicePrintPoolHInParam> process_more(TmsCrvatInvoicePreHInParam tmsCInPreHInParam,BigDecimal maxamount,int maxnum,TmsCrvatInvoicePreLInParam inParam){
		List<InvoicePrintPoolHInParam> return_list=new ArrayList<InvoicePrintPoolHInParam>();
		/*
		List<InvoicePrintPoolLInParam> return_Pool_list=new ArrayList<InvoicePrintPoolLInParam>();
		
		List<TmsCrvatInvoicePreLInParam> exists_list=inParam.getInvoicePreLList();
		
		while (exists_list.size()>0){
			InvoicePrintPoolLInParam result_PoolLInParam=process_more_list(tmsCInPreHInParam,maxamount,maxnum,exists_list);	
			return_Pool_list.add(result_PoolLInParam);
		}
		
		for(InvoicePrintPoolLInParam poolLInParam:return_Pool_list){
			InvoicePrintPoolHInParam tempHInParam=new InvoicePrintPoolHInParam();
			List<InvoicePrintPoolLInParam> temp_Pool_list=new ArrayList<InvoicePrintPoolLInParam>();
			
			temp_Pool_list.add(poolLInParam);
			tempHInParam.setInvoicePrintPoolLInParamList(temp_Pool_list);
			return_list.add(tempHInParam);
		}*/
		return return_list;
	}
	
	protected InvoicePrintPoolLInParam process_more_list(TmsCrvatInvoicePreHInParam tmsCInPreHInParam,BigDecimal maxamount,int maxnum,List<TmsCrvatInvoicePreLInParam> exists){
		InvoicePrintPoolLInParam return_PoolLInParam = new InvoicePrintPoolLInParam();
		BigDecimal remain_maxamount=maxamount;
		List<TmsCrvatInvoicePreLInParam> need_removed=new ArrayList<TmsCrvatInvoicePreLInParam>();
		List<InvoicePrintPoolD> result_PrintPoolD_list=new ArrayList<InvoicePrintPoolD>();
		BigDecimal poolLtotol=new BigDecimal(0);
		for(int index=0;index<exists.size();index++){
			TmsCrvatInvoicePreLInParam exist_temp=exists.get(index);
			if(exist_temp.getAcctdAmountCr().compareTo(maxamount)==1&&maxamount.compareTo(remain_maxamount)==0){//单笔金额大于最大面额且未进行分解
				BigDecimal currentBigDecimal= exist_temp.getAcctdAmountCr();
				exist_temp.setAcctdAmountCr(currentBigDecimal.subtract(maxamount));
				InvoicePrintPoolD tempPoolD= convertToInvoicePrintPoolD(exist_temp);
				tempPoolD.setAcctdAmountCr(maxamount);
				result_PrintPoolD_list.add(tempPoolD);
				poolLtotol.add(tempPoolD.getAcctdAmountCr());
			}else {//单笔金额小于最大面额或者剩余量与最大量不相等
				if(remain_maxamount.compareTo(new BigDecimal(0))==1){
					if(exist_temp.getAcctdAmountCr().compareTo(remain_maxamount)==1){
						//剩余量计算
						BigDecimal remain_acctd_amount=new BigDecimal(0);
						if(exist_temp.getAcctdAmountCr()==null){
							exist_temp.setAcctdAmountCr(new BigDecimal(0));
						}
						remain_acctd_amount=exist_temp.getAcctdAmountCr().subtract(remain_maxamount);
						exist_temp.setAcctdAmountCr(remain_acctd_amount);
						InvoicePrintPoolD tempPoolD= convertToInvoicePrintPoolD(exist_temp);
						tempPoolD.setAcctdAmountCr(remain_maxamount);
						poolLtotol.add(tempPoolD.getAcctdAmountCr());
						result_PrintPoolD_list.add(tempPoolD);
						remain_maxamount=new BigDecimal(0);
					}else{
						//更新当前剩余额度
						remain_maxamount=remain_maxamount.subtract(exist_temp.getAcctdAmountCr());
						need_removed.add(exist_temp);
						InvoicePrintPoolD tempPoolD= convertToInvoicePrintPoolD(exist_temp);
						result_PrintPoolD_list.add(tempPoolD);
						poolLtotol.add(tempPoolD.getAcctdAmountCr());
					}
				}
			}
		}
		
		return_PoolLInParam.setInvoicePrintPoolDList(result_PrintPoolD_list);
		return_PoolLInParam.setAcctdAmountCR(poolLtotol);
		//去除已经选择的的数据
		exists.removeAll(need_removed);
		//加入没用完的数据
		//exists.addAll(need_added);
		
		return return_PoolLInParam;
		
	}
	
	/**
	 * 数据转换
	 * @param crvatInvoicePreLInParam
	 * @return
	 */
	private InvoicePrintPoolLInParam convertToInvoicePrintPoolLInParam(InvoicePrintPoolD temp){
		InvoicePrintPoolLInParam return_temp=new InvoicePrintPoolLInParam();
		
		return return_temp;
	}
	/**
	 * 
	 * @param temp
	 * @return
	 */
	private InvoicePrintPoolLInParam convertToInvoicePrintPoolLInParamByTaxPool(TmsCrvatInvoicePreLInParam temp){
		InvoicePrintPoolLInParam return_temp=new InvoicePrintPoolLInParam();
		
		//准备单ID
		//return_temp.setCrvatInvoicePreLId(temp.getId());
		//特殊开票准备单行ID
		//return_temp.setCrvatInvoicePrePId("");
		//货物ID
		return_temp.setInventoryItemId(temp.getInventoryItemId());
		return_temp.setInventoryItemDescripton(temp.getInventoryItemDescripton());
		return_temp.setInventoryItemModels(temp.getInventoryItemModels());
		return_temp.setInventoryItemNumber(temp.getInventoryItemNumber());
		return_temp.setInventoryItemQty(temp.getInventoryItemQty());
		
		//金额，税率，税额，净额
		return_temp.setInvoiceAmount(temp.getInvoiceAmount());
		return_temp.setTaxRate(temp.getTaxRate());
		return_temp.setVatAmount(temp.getVatAmount());
		return_temp.setAcctdAmountCR(temp.getAcctdAmountCr());
		
		return_temp.setInvoiceCategory(temp.getInvoiceCategory());
		
		
		return return_temp;
	}
	/**
	 * 准备单到发票池任务调度实现
	 */
	private InvoicePrintPoolD convertToInvoicePrintPoolD(TmsCrvatInvoicePreLInParam temp){
		InvoicePrintPoolD result=new InvoicePrintPoolD();
		//result.setVatAmount(temp.getCurrencyAmountCr());
		result.setAcctdAmountCr(temp.getAcctdAmountCr());
		result.setCrvatInvoicePreLId(temp.getId());
		result.setInventoryItemId(temp.getInventoryItemId());
		result.setInventoryItemQty(temp.getInventoryItemQty());
		result.setInventoryItemNumber(temp.getInventoryItemNumber());
		result.setInvoiceAmount(temp.getInvoiceAmount());
		result.setVatAmount(temp.getVatAmount());
		
		return result;
	}
	private InvoicePrintPoolL convertToInvoicePrintPoolLByPreL(TmsCrvatInvoicePreLInParam temp){
		InvoicePrintPoolL result=new InvoicePrintPoolL();
		//result.setVatAmount(temp.getCurrencyAmountCr());
		result.setAcctdAmountCR(temp.getAcctdAmountCr());
		result.setInventoryItemId(temp.getInventoryItemId());
		result.setInventoryItemQty(temp.getInventoryItemQty());
		result.setInventoryItemNumber(temp.getInventoryItemNumber());
		result.setInvoiceAmount(temp.getInvoiceAmount());
		result.setVatAmount(temp.getVatAmount());
		
		return result;
	}
}

