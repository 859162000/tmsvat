package com.deloitte.tms.base.masterdata.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Component;

import com.deloitte.tms.base.masterdata.dao.TmsMdOrgLegalEntityDao;
import com.deloitte.tms.base.masterdata.model.BaseOrg;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntity;
import com.deloitte.tms.base.masterdata.model.TmsMdOrgLegalEntity;
import com.deloitte.tms.base.masterdata.model.TmsMdOrgLegalEntityInParam;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.pl.security.utils.LittleUtils;
/**
 * Home object for domain model class TmsMdOrgLegalEntity.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdOrgLegalEntityDao.BEAN_ID)
public class TmsMdOrgLegalEntityDaoImpl extends BaseDao<TmsMdOrgLegalEntity> implements TmsMdOrgLegalEntityDao{
/**
 * 主表格信息查询
 */
	Logger log = Logger.getLogger(this.getClass());
	
	/**
	 * @author tigchen
	 * @param params
	 * @param pageIndex
	 * @param pageSize
	 * @return  
	 * @see com.deloitte.tms.base.masterdata.dao.TmsMdOrgLegalEntityDao#findTmsMdOrgLegalEntityByParams(java.util.Map, java.lang.Integer, java.lang.Integer)
	 */
	@Override
	public DaoPage findOrgLegalByParams(Map<String, String> params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer sb=new StringBuffer();
		Map values=new HashMap();
		//buildTmsMdOrgLegalEntityQuery(query, values, params);
		
		String leftC=BaseOrg.class.getName();
		String rightC=TmsMdLegalEntity.class.getName();
		String mainC=TmsMdOrgLegalEntity.class.getName();
		
		sb.append(" select ");
		
		ArrayList<String> needFields = TmsMdOrgLegalEntityInParam.needFields;
		
		int x=0;
		for(String field : needFields){
			
			if(x>0){
				sb.append(" , ");
			}
			
			sb.append(field);
			++x;
		}
		
		/*sb.append(" select mainC.id, mainC.orgId, leftC.orgCode, left.orgName ");
		sb.append(" , mainC.legalEntityId, mainC.legalEntityType , mainC.enabledFlag");
		sb.append(" , rightC.registrationNumber , rightC.legalEntityName");
		*/
		
		sb.append(" from ").append(leftC);
		sb.append(" leftC, ");
		sb.append(rightC);
		sb.append(" rightC, ");
		sb.append(mainC);
		sb.append(" mainC where ");
		
			sb.append("  mainC.flag=").append(LittleUtils.one);
			sb.append(" and leftC.flag=").append(LittleUtils.one);
			sb.append(" and rightC.flag=").append(LittleUtils.one);
			
			sb.append(" and mainC.orgId=leftC.id");
			sb.append(" and mainC.legalEntityId=rightC.id");
			
			String leftFields="orgCode,orgName";
			String rightFields="registrationNumber,legalEntityName";
			/*
leftC:
	orgCode 
	orgName

rightC:
legalEntityId --> registrationNumber 
legalEntityName
 
			 */
			
			if(params==null || params.size()<1){
				
			}else{
				
				HashMap<String, String> valueNoEmptyMap = new HashMap<String, String>();
				
				Set<String> keys = params.keySet(); 
				for(String k : keys ){
					
					if( !LittleUtils.strEmpty(  params.get(k) ) ){
						
						valueNoEmptyMap.put(k, params.get(k).trim());
					}
				}
				
				if(valueNoEmptyMap.size()>0){
					
					sb.append(" and ( ");
					
					Set<String> keys2 = valueNoEmptyMap.keySet();
					
					int i=0;
					for(String k2 : keys2){
						
						if(i > 0){
							sb.append(" or ");
						}
						
						if(leftFields.contains(k2)){
							sb.append("leftC.");
						}else if(rightFields.contains(k2)){
							sb.append("rightC.");
						}
						
						sb.append( k2 ).append(" like :").append(k2);
						values.put( k2, valueNoEmptyMap.get(k2)+"%" );
						++i;
					}
					
					sb.append(" ) ");
				}
			}
			
			log.info(" will run query: "+sb);
			
		
		return pageBy(sb, values, pageIndex, pageSize);

	}
	
	public DaoPage findTmsMdOrgLegalEntityByParams(Map<String, String> params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdOrgLegalEntityQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);

	}
/**
 * 参数设置
 * @param query
 * @param values
 * @param params
 */
	private void buildTmsMdOrgLegalEntityQuery(StringBuffer query,Map values,Map<String, String> params) {
		query.append(" from TmsMdOrgLegalEntity where flag=").append(LittleUtils.one);
		
		
		if(params==null || params.size()<1){
			
		}else{
			params.remove("pageSize");
			params.remove("pageNumber");
		}
		
		
		if(params==null || params.size()<1){
			
		}else{
			
			HashMap<String, String> valueNoEmptyMap = new HashMap<String, String>();
			
			Set<String> keys = params.keySet(); 
			for(String k : keys ){
				
				if( !LittleUtils.strEmpty(  params.get(k) ) ){
					
					valueNoEmptyMap.put(k, params.get(k).trim());
				}
			}
			
			if(valueNoEmptyMap.size()>0){
				
				query.append(" and ( ");
				
				Set<String> keys2 = valueNoEmptyMap.keySet();
				
				int i=0;
				for(String k2 : keys2){
					
					if(i > 0){
						query.append(" or ");
					}
					
					query.append( k2 ).append(" like :").append(k2);
					values.put( k2, valueNoEmptyMap.get(k2)+"%" );
					++i;
				}
				
				query.append(" ) ");
			}
		}
		
		log.info(" will run query: "+query);
		
	}
	
	
	
	public TmsMdLegalEntity getLegalEntityByEntityName(String entityName) {
		StringBuffer query=new StringBuffer();
		Map<String, Object> values=new HashMap<String, Object>();
		query.append("from TmsMdLegalEntity L WHERE L.legalEntityName=:entityName");
		values.put("entityName", entityName);
		List<TmsMdLegalEntity> entitys=findBy(query, values);
		if(entitys.size()==0){
			return null;		
		}else{
			TmsMdLegalEntity entity=(TmsMdLegalEntity)entitys.get(0);
			return entity;
		}
	}
	

	
	/**
	 * @author pusiyi
	 */
	@Override
	public TmsMdLegalEntity findLegalEntityById(String legalEntityId) {
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		query.append(" from TmsMdLegalEntity where 1=1 ");
		String value = legalEntityId;
		if(value!=null)
		{
			query.append(" and id=:legalid");
			values.put("legalid", value);
		}
		List<TmsMdLegalEntity> list = findBy(query, values);
		if(list.size() == 0){
			return null;
		}else{
			
			return list.get(0);
		}
	}
	
	public BaseOrg findBaseOrgBycode(String orgCode) {
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		query.append(" from BaseOrg where 1=1 ");
		String value = orgCode;
		if(value!=null)
		{
			query.append(" and orgCode=:orgCode");
			values.put("orgCode", value);
		}
		List<BaseOrg> list = findBy(query, values);
		if(list.size() == 0){
			return null;
		}else{
			
			return list.get(0);
		}
	}
	
	public DaoPage  findAllBaseOrg(Map<String, Object>parameter, int pageNumber, int pageSize) {
        StringBuffer query=new StringBuffer();
        StringBuffer queryCount=new StringBuffer();
        Map values=new HashMap();
        query.append("select g.* from base_org g where g.org_id not in (select y.org_id from tms_md_org_legal_entity y) ");
        queryCount.append("select count(*) from base_org g where g.org_id not in (select y.org_id from tms_md_org_legal_entity y) ");
        DaoPage list = this.pageBySql(query, queryCount, values, pageNumber, pageSize);
		return list;

	}
	/**
	 * this is wrong function, don't use this one
	 * 弹出框纳税人识别码
	 */
	@Override
	public DaoPage dialoglegalEntitysearch(Map<String, Object> parameter,
			int pageNumber, int pageSize) {
		  StringBuffer query=new StringBuffer();
	        StringBuffer queryCount=new StringBuffer();
	     Map values=new HashMap();
//			query.append(" from  (( select  id, orgCode,orgName  from BaseOrg  where id not in  ( select orgId from TmsMdOrgLegalEntity ) ) ) where  1=1 ");
	        query.append("select g.* from tms_md_legal_entity g where g.legal_entity_id not in (select y.legal_entity_id from tms_md_org_legal_entity y) ");
	        queryCount.append("select count(*) from tms_md_legal_entity g where g.legal_entity_id not in (select y.legal_entity_id from tms_md_org_legal_entity y) ");
	        DaoPage list = this.pageBySql(query, queryCount, values, pageNumber, pageSize);
			return list;
	}
/**
 * 主面板组织查询
 */
	@Override
	public DaoPage orgsearch(Map<String, Object> parameter, int pageNumber,
			int pageSize) {
		StringBuffer query=new StringBuffer();
		Map<String, Object> values=new HashMap<String, Object>();
		query.append("from BaseOrg L where 1=1");
		String value = (String) parameter.get("");
		if(value!=null)
		{
			query.append(" and id=:legalid");
			values.put("legalid", value);
		}
		return pageBy(query, values, pageNumber, pageSize);
	}
	
	
	
	
	public List<TmsMdOrgLegalEntity> findTmsMdOrgLegalEntityByParams(Map<String, String> params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdOrgLegalEntityQuery(query, values, params);
		return findBy(query, values);
	}
	
	@Override
	public TmsMdOrgLegalEntity findTmsMdOrgLegalEntity(String legalEntityId) {
		StringBuffer query = new StringBuffer();
		Map values = new HashMap();
		query.append(" from TmsMdOrgLegalEntity where 1=1 ");
		String value = legalEntityId;
		if (value != null) {
			query.append(" and legalEntityId=:legalEntityId");
			values.put("legalEntityId", value);
		}
		List<TmsMdOrgLegalEntity> list = findBy(query, values);
		if (list.size() == 0) {
			return null;
		} else {

			return list.get(0);
		}
	}
	@Override
	public List<TmsMdOrgLegalEntity> findAllTmsMdOrgLegalEntities() {
		StringBuffer query = new StringBuffer();
		Map values = new HashMap();
		query.append(" from TmsMdOrgLegalEntity where 1=1 ");
		return findBy(query, values);
	}

}

