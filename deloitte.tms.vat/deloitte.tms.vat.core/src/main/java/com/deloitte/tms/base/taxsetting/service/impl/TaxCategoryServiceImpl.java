package com.deloitte.tms.base.taxsetting.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.base.taxsetting.model.TaxCategory;
import com.deloitte.tms.base.taxsetting.model.TaxCategoryInParam;
import com.deloitte.tms.base.taxsetting.model.Items;
import com.deloitte.tms.base.taxsetting.model.ItemsInParam;
import com.deloitte.tms.base.taxsetting.dao.TaxCategoryDao;
import com.deloitte.tms.base.taxsetting.service.TaxCategoryService;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
/**
 * Home object for domain model class TaxCategory.
 * @see com.deloitte.tms.base.taxsetting.model
 * @author Hibernate Tools
 */
@Component(TaxCategoryService.BEAN_ID)
public class TaxCategoryServiceImpl extends BaseService implements TaxCategoryService{
	@Resource
	TaxCategoryDao taxCategoryDao;

	@Override
	public IDao getDao() {
		return taxCategoryDao;
	}

	@Override
	public DaoPage findTaxCategoryByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= taxCategoryDao.findTaxCategoryByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTaxCategoryToInParam((List<TaxCategory>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TaxCategoryInParam> findTaxCategoryByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TaxCategory> temp= taxCategoryDao.findTaxCategoryByParams(params);
		return convertTaxCategoryToInParam(temp);
	}
	public List findBySearchTax(String hql)
	{
		return taxCategoryDao.findBySearchTax(hql);
	}
	@Override
	public void saveTaxCategoryDataListsMap(Map dataListsMap) {
		Collection<TaxCategoryInParam> deleteList = BatchUtils.to(TaxCategoryInParam.class).getDeleteEntities(dataListsMap);
		Collection<TaxCategoryInParam> insertList =  BatchUtils.to(TaxCategoryInParam.class).getInsertEntities(dataListsMap);
		Collection<TaxCategoryInParam> updateList =  BatchUtils.to(TaxCategoryInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TaxCategoryInParam inParam: updateList){
				TaxCategory entity=convertTaxCategoryInParamToEntity(inParam);
				taxCategoryDao.update(entity);
			}		
//			taxCategoryDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TaxCategoryInParam inParam: insertList){
				TaxCategory entity=convertTaxCategoryInParamToEntity(inParam);
				taxCategoryDao.save(entity);
				inParam.setId(entity.getId());
			}
//			taxCategoryDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TaxCategoryInParam inParam:deleteList){
				TaxCategory entity=new TaxCategory();
				entity.setId(inParam.getId());
				taxCategoryDao.remove(entity);
			}
//			taxCategoryDao.removeAll(deleteList);
		}
		
	}
	private List<TaxCategoryInParam> convertTaxCategoryToInParam(List<TaxCategory> models){
		List<TaxCategoryInParam> result=new ArrayList<TaxCategoryInParam>();
		for(TaxCategory initiation:models){
			TaxCategoryInParam inparam=convertTaxCategoryToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TaxCategoryInParam convertTaxCategoryToInParam(TaxCategory model){
		TaxCategoryInParam inparam=new TaxCategoryInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TaxCategory convertTaxCategoryInParamToEntity(TaxCategoryInParam inParam){
		TaxCategory entity=new TaxCategory();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	@Override
	public DaoPage findItemsByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= taxCategoryDao.findItemsByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertItemsToInParam((List<Items>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<ItemsInParam> findItemsByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<Items> temp= taxCategoryDao.findItemsByParams(params);
		return convertItemsToInParam(temp);
	}
	@Override
	public void saveItemsDataListsMap(Map dataListsMap) {
		Collection<ItemsInParam> deleteList = BatchUtils.to(ItemsInParam.class).getDeleteEntities(dataListsMap);
		Collection<ItemsInParam> insertList =  BatchUtils.to(ItemsInParam.class).getInsertEntities(dataListsMap);
		Collection<ItemsInParam> updateList =  BatchUtils.to(ItemsInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(ItemsInParam inParam: updateList){
				Items entity=convertItemsInParamToEntity(inParam);
				taxCategoryDao.update(entity);
			}		
//			taxCategoryDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(ItemsInParam inParam: insertList){
				Items entity=convertItemsInParamToEntity(inParam);
				taxCategoryDao.save(entity);
				inParam.setId(entity.getId());
			}
//			taxCategoryDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(ItemsInParam inParam:deleteList){
				Items entity=new Items();
				entity.setId(inParam.getId());
				taxCategoryDao.remove(entity);
			}
//			taxCategoryDao.removeAll(deleteList);
		}
	}
	private List<ItemsInParam> convertItemsToInParam(List<Items> models){
		List<ItemsInParam> result=new ArrayList<ItemsInParam>();
		for(Items initiation:models){
			ItemsInParam inparam=convertItemsToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public ItemsInParam convertItemsToInParam(Items model){
		ItemsInParam inparam=new ItemsInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public Items convertItemsInParamToEntity(ItemsInParam inParam){
		Items entity=new Items();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}

	@Override
	public String findTaxCategoryNameById(String categoryId) {
		String categoryName=taxCategoryDao.findTaxCategoryNameById(categoryId);
		return categoryName;
	}
}

