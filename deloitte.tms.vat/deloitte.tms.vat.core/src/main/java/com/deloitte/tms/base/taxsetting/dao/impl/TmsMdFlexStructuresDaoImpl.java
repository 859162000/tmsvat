package com.deloitte.tms.base.taxsetting.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.base.taxsetting.dao.TmsMdFlexStructuresDao;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexSegments;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexStructures;
/**
 * Home object for domain model class TmsMdFlexStructures.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdFlexStructuresDao.BEAN_ID)
public class TmsMdFlexStructuresDaoImpl extends BaseDao<TmsMdFlexStructures> implements TmsMdFlexStructuresDao{
	public DaoPage findTmsMdFlexStructuresByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdFlexStructuresQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<TmsMdFlexStructures> findTmsMdFlexStructuresByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdFlexStructuresQuery(query, values, params);
		return findBy(query, values);
	}
	
//	public List<TmsMdFlexStructures> findSelectByParams(){
//		
//		StringBuffer query=new StringBuffer();
//		query.append(" from TmsMdFlexStructures where 1=1 ");
//		
//		return  findBy(query, values);
//	}
	
	
	
	private void buildTmsMdFlexStructuresQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdFlexStructures where 1=1 ");
		Object value=params.get("status");
		Object value2=params.get("flexStructuresCode");
		Object value3=params.get("flexStructuresDescription");
		
		
		
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		if(value2!=null && !"".equals(value2))
		{
			query.append(" and flexStructuresCode like :flexStructuresCode");
			values.put("flexStructuresCode", "%"+value2+"%");
		}
		if(value3!=null && !"".equals(value3))
		{
			query.append(" and flexStructuresDescription like :flexStructuresDescription");
			values.put("flexStructuresDescription", "%"+value3+"%");
		}
		
		
		
		
	}
	public DaoPage findTmsMdFlexSegmentsByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdFlexSegmentsQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<TmsMdFlexSegments> findTmsMdFlexSegmentsByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdFlexSegmentsQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildTmsMdFlexSegmentsQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdFlexSegments where 1=1 ");
		
		Object value=params.get("status");
		Object value2=params.get("id");
	
		if(value2!=null&&!"".equals(value2))
		{
			//value2=Long.parseLong(value2.toString());
						
			query.append(" and flexStructuresId=:id");
			values.put("id", value2);
		}
		
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
	}
}

