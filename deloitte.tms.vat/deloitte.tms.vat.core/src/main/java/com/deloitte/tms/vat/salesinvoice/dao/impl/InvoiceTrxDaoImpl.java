package com.deloitte.tms.vat.salesinvoice.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.vat.salesinvoice.dao.InvoiceTrxDao;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxD;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxDataDict;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxH;
import com.itextpdf.text.pdf.PdfStructTreeController.returnType;
/**
 * Home object for domain model class InvoiceTrx.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Component(InvoiceTrxDao.BEAN_ID)
public class InvoiceTrxDaoImpl extends BaseDao<InvoiceTrxH> implements InvoiceTrxDao{
	
	public List<InvoiceTrxH> getLatestInvoiceTrxH()
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		Date date = new Date();
		query.append(" from InvoiceTrxH where 1=1 and  flag = 1 ");
		query.append(" and invoiceTrxDate=:invoiceTrxDate order by crvatInvoiceTrxNumber desc");
		values.put("invoiceTrxDate", date);
		return findBy(query, values);
	}
	
	public DaoPage findInvoiceTrxByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoiceTrxQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	
	public DaoPage findInvoiceTrxLByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoiceTrxLQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}

	public List<InvoiceTrxH> findInvoiceTrxByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoiceTrxQuery(query, values, params);
		return findBy(query, values);
	}
	
	public List<InvoiceTrxD> findInvoiceTrxDByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTrxDQuery(query, values, params);
		return findBy(query, values);
	}
	
	private void buildTrxDQuery(StringBuffer query,Map values,Map params) {
		query.append(" from InvoiceTrxD where 1=1 and  flag = 1 ");
		
		Object value=params.get("invoiceCode");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and invoiceCode=:invoiceCode");
			values.put("invoiceCode", value);
		}
		value=params.get("invoiceNumber");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and invoiceNumber=:invoiceNumber");
			values.put("invoiceNumber", value);
		}
	}
	private void buildInvoiceTrxQuery(StringBuffer query,Map values,Map params) {
		query.append(" from InvoiceTrxH where 1=1 and  flag = 1");
		
		Object value=params.get("crvatInvoiceTrxNumber");
		if(!AssertHelper.empty(value))
		{
			query.append(" and crvatInvoiceTrxNumber = :crvatInvoiceTrxNumber");
			values.put("crvatInvoiceTrxNumber", value);
		}
		value=params.get("approvalStatus");
		if(!AssertHelper.empty(value))
		{
			query.append(" and approvalStatus=:approvalStatus");
			values.put("approvalStatus", value);
		}
		value=params.get("startDate");
		if(!AssertHelper.empty(value))
		{
			query.append(" and to_char(approvalDate,'yyyy-mm-dd')>=:startDate");
			values.put("startDate", value);
		}
		value=params.get("endDate");
		if(!AssertHelper.empty(value))
		{
			query.append(" and to_char(approvalDate,'yyyy-mm-dd')<=:endDate");
			values.put("endDate", value);
		}
		query.append(" order by approvalStatus,crvatInvoiceTrxNumber desc ");
	}
	private void buildInvoiceTrxLQuery(StringBuffer query,Map values,Map params) {
		query.append(" from InvoiceTrxL where 1=1 and  flag = 1 ");
		Object value=params.get("crvatInvoiceTrxHid");
		if(!AssertHelper.empty(value))
		{
			query.append(" and CRVAT_INVOICE_TRX_H_ID=:crvatInvoiceTrxHid");
			values.put("crvatInvoiceTrxHid", value);
		}
	}
	
	@Override
	public void deleteTrx(String id) {
		
		StringBuffer query=new StringBuffer();
		Map values=new HashMap<String, Object>();
		query.append("delete from InvoiceTrxH where id =:Id ");
		values.put("Id", id);
		executeHqlProduce(query.toString(), values);
	}
	@Override
	public void deleteTrxL(String id) {
		
		StringBuffer query=new StringBuffer();
		Map values=new HashMap<String, Object>();
		query.append("delete from InvoiceTrxL where id =:Id ");
		values.put("Id", id);
		executeHqlProduce(query.toString(), values);
	}

	@Override
	public InvoiceTrxD getInvoice(String invoiceCode, String invoiceNumber) {
		AssertHelper.notEmpty_assert(invoiceNumber, "发票号码不能为空");
		AssertHelper.notEmpty_assert(invoiceCode, "发票编码不能为空");
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		query.append(" from InvoiceTrxD where 1=1 and  flag = 1 ");
		query.append(" and invoiceNumber=:invoiceNumber");
		values.put("invoiceNumber", invoiceNumber);
		query.append(" and invoiceCode=:invoiceCode");
		values.put("invoiceCode", invoiceCode);
		List<InvoiceTrxD> temps=findBy(query,values);
		if(temps.size()>0){
			return temps.get(0);
		}else {
			return null;
		}
	}
	
}

