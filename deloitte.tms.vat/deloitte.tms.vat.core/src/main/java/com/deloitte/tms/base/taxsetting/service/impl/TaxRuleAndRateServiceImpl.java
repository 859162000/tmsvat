package com.deloitte.tms.base.taxsetting.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.base.taxsetting.model.TaxRuleAndRate;
import com.deloitte.tms.base.taxsetting.model.TaxRuleAndRateInParam;
import com.deloitte.tms.base.taxsetting.dao.TaxRuleAndRateDao;
import com.deloitte.tms.base.taxsetting.service.TaxRuleAndRateService;
/**
 * Home object for domain model class TaxRuleAndRate.
 * @see com.deloitte.tms.base.taxsetting.model
 * @author Hibernate Tools
 */
@Component(TaxRuleAndRateService.BEAN_ID)
public class TaxRuleAndRateServiceImpl extends BaseService implements TaxRuleAndRateService{
	@Resource
	TaxRuleAndRateDao taxRuleAndRateDao;

	@Override
	public IDao getDao() {
		return taxRuleAndRateDao;
	}

	@Override
	public DaoPage findTaxRuleAndRateByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= taxRuleAndRateDao.findTaxRuleAndRateByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTaxRuleAndRateToInParam((List<TaxRuleAndRate>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TaxRuleAndRateInParam> findTaxRuleAndRateByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TaxRuleAndRate> temp= taxRuleAndRateDao.findTaxRuleAndRateByParams(params);
		return convertTaxRuleAndRateToInParam(temp);
	}
	@Override
	public void saveTaxRuleAndRateDataListsMap(Map dataListsMap) {
		Collection<TaxRuleAndRateInParam> deleteList = BatchUtils.to(TaxRuleAndRateInParam.class).getDeleteEntities(dataListsMap);
		Collection<TaxRuleAndRateInParam> insertList =  BatchUtils.to(TaxRuleAndRateInParam.class).getInsertEntities(dataListsMap);
		Collection<TaxRuleAndRateInParam> updateList =  BatchUtils.to(TaxRuleAndRateInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TaxRuleAndRateInParam inParam: updateList){
				TaxRuleAndRate entity=convertTaxRuleAndRateInParamToEntity(inParam);
				taxRuleAndRateDao.update(entity);
			}		
//			taxRuleAndRateDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TaxRuleAndRateInParam inParam: insertList){
				TaxRuleAndRate entity=convertTaxRuleAndRateInParamToEntity(inParam);
				taxRuleAndRateDao.save(entity);
				inParam.setId(entity.getId());
			}
//			taxRuleAndRateDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TaxRuleAndRateInParam inParam:deleteList){
				TaxRuleAndRate entity=new TaxRuleAndRate();
				entity.setId(inParam.getId());
				taxRuleAndRateDao.remove(entity);
			}
//			taxRuleAndRateDao.removeAll(deleteList);
		}
		
	}
	private List<TaxRuleAndRateInParam> convertTaxRuleAndRateToInParam(List<TaxRuleAndRate> models){
		List<TaxRuleAndRateInParam> result=new ArrayList<TaxRuleAndRateInParam>();
		for(TaxRuleAndRate initiation:models){
			TaxRuleAndRateInParam inparam=convertTaxRuleAndRateToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TaxRuleAndRateInParam convertTaxRuleAndRateToInParam(TaxRuleAndRate model){
		TaxRuleAndRateInParam inparam=new TaxRuleAndRateInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TaxRuleAndRate convertTaxRuleAndRateInParamToEntity(TaxRuleAndRateInParam inParam){
		TaxRuleAndRate entity=new TaxRuleAndRate();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
}

