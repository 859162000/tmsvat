package com.deloitte.tms.vat.trnsctrecog.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.base.masterdata.model.Customer;
import com.deloitte.tms.base.masterdata.model.TmsMdTaxTrxType;
import com.deloitte.tms.pl.cache.utils.DictionaryCacheUtils;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.vat.trnsctrecog.model.TmsCrvatTrxAffirm;
import com.deloitte.tms.vat.trnsctrecog.model.TmsCrvatTrxAffirmInParam;
import com.deloitte.tms.vat.trnsctrecog.dao.TmsCrvatTrxAffirmDao;
import com.deloitte.tms.vat.trnsctrecog.service.TmsCrvatTrxAffirmService;
/**
 * Home object for domain model class TmsCrvatTrxAffirm.
 * @see com.deloitte.tms.vat.trnsctrecog.model
 * @author Hibernate Tools
 */
@Component(TmsCrvatTrxAffirmService.BEAN_ID)
public class TmsCrvatTrxAffirmServiceImpl extends BaseService implements TmsCrvatTrxAffirmService{
	@Resource
	TmsCrvatTrxAffirmDao tmsCrvatTrxAffirmDao;

	@Override
	public IDao getDao() {
		return tmsCrvatTrxAffirmDao;
	}
    /**
     * 交易认定信息查询
     */
	@Override
	public DaoPage findTmsCrvatTrxAffirmByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsCrvatTrxAffirmDao.findTmsCrvatTrxAffirmByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsCrvatTrxAffirmToInParam((List<TmsCrvatTrxAffirm>) daoPage.getResult()));
		return daoPage;
	}
	/**
	 * 查询信息处理
	 * @param models
	 * @return
	 */
	private List<TmsCrvatTrxAffirmInParam> convertTmsCrvatTrxAffirmToInParam(List<TmsCrvatTrxAffirm> models){
		List<TmsCrvatTrxAffirmInParam> result=new ArrayList<TmsCrvatTrxAffirmInParam>();
		for(TmsCrvatTrxAffirm initiation:models){
			TmsCrvatTrxAffirmInParam inparam=convertTmsCrvatTrxAffirmToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	/**
	 * 组织名称取得
	 */
	public TmsCrvatTrxAffirmInParam convertTmsCrvatTrxAffirmToInParam(TmsCrvatTrxAffirm model){
		TmsCrvatTrxAffirmInParam inparam=new TmsCrvatTrxAffirmInParam();
		ReflectUtils.copyProperties(model, inparam);
		inparam.setBaseOrg(model.getBaseOrg());//组织名称获得
		inparam.setOrgCode(model.getBaseOrg().getOrgCode());
		Customer customer = model.getCustomer();
		inparam.setCustomerName(customer.getCustomerName());
		inparam.setCustomerNumber(customer.getCustomerNumber());
		
		TmsMdTaxTrxType tmsMdTaxTrxType = model.getTmsMdTaxTrxType();
		if(tmsMdTaxTrxType!=null){
		inparam.setTaxTrxTypeCode(tmsMdTaxTrxType.getTaxTrxTypeCode());
		inparam.setTaxTrxTypeName(tmsMdTaxTrxType.getTaxTrxTypeName());
		}
		//来源系统名称获得
	inparam.setSourceCode(DictionaryCacheUtils.getCodeName("VAT_TRX_AFFIRM_DATA_SOURCE", model.getSourceCode()));
		return inparam;
	}
	
	
	

	/**
	 * 查询组织
	 */
	@Override
	public DaoPage findTmsCrvatTrxAffirmByOrganization_id(
			Map<String, Object> parameter, Integer pageNumber, Integer pageSize) {
		DaoPage daoPage = tmsCrvatTrxAffirmDao.findTmsCrvatTrxAffirmByOrganization_id(parameter,pageNumber,pageSize);
		return daoPage;
	}
	/**
	 * 查询涉税交易类型
	 */
	@Override
	public DaoPage transactiontype_id(Map<String, Object> parameter,
			Integer pageNumber, Integer pageSize) {
		DaoPage daoPage = tmsCrvatTrxAffirmDao.transactiontype_id(parameter,pageNumber,pageSize);
		return daoPage;
	}

	
	@Override
	public List<TmsCrvatTrxAffirmInParam> findTmsCrvatTrxAffirmByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsCrvatTrxAffirm> temp= tmsCrvatTrxAffirmDao.findTmsCrvatTrxAffirmByParams(params);
		return convertTmsCrvatTrxAffirmToInParam(temp);
	}
	/**
	 * 保存信息
	 */
	@Override
	public void saveTmsCrvatTrxAffirmDataListsMap(Map dataListsMap) {
		Collection<TmsCrvatTrxAffirmInParam> deleteList = BatchUtils.to(TmsCrvatTrxAffirmInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsCrvatTrxAffirmInParam> insertList =  BatchUtils.to(TmsCrvatTrxAffirmInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsCrvatTrxAffirmInParam> updateList =  BatchUtils.to(TmsCrvatTrxAffirmInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsCrvatTrxAffirmInParam inParam: updateList){
				TmsCrvatTrxAffirm entity=convertTmsCrvatTrxAffirmInParamToEntity(inParam);
				tmsCrvatTrxAffirmDao.update(entity);
			}		
//			tmsCrvatTrxAffirmDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsCrvatTrxAffirmInParam inParam: insertList){
				TmsCrvatTrxAffirm entity=convertTmsCrvatTrxAffirmInParamToEntity(inParam);
				tmsCrvatTrxAffirmDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsCrvatTrxAffirmDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsCrvatTrxAffirmInParam inParam:deleteList){
				TmsCrvatTrxAffirm entity=new TmsCrvatTrxAffirm();
				entity.setId(inParam.getId());
				tmsCrvatTrxAffirmDao.remove(entity);
			}
//			tmsCrvatTrxAffirmDao.removeAll(deleteList);
		}
		
	}
	
	public TmsCrvatTrxAffirm convertTmsCrvatTrxAffirmInParamToEntity(TmsCrvatTrxAffirmInParam inParam){
		TmsCrvatTrxAffirm entity=new TmsCrvatTrxAffirm();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	/**
	 * 手工认定
	 */
	@Override
	public String loadTransactionException(Map<String, Object> parameter) {
		String tips = tmsCrvatTrxAffirmDao.loadTransactionException(parameter);
		return tips;
		
	}

	
	

	

	
}

