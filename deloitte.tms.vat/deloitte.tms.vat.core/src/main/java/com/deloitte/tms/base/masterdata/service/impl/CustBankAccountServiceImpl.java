package com.deloitte.tms.base.masterdata.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.base.masterdata.model.CustBankAccount;
import com.deloitte.tms.base.masterdata.model.CustBankAccountInParam;
import com.deloitte.tms.base.masterdata.dao.CustBankAccountDao;
import com.deloitte.tms.base.masterdata.service.CustBankAccountService;
/**
 * Home object for domain model class CustBankAccount.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(CustBankAccountService.BEAN_ID)
public class CustBankAccountServiceImpl extends BaseService implements CustBankAccountService{
	@Resource
	CustBankAccountDao custBankAccountDao;

	@Override
	public IDao getDao() {
		return custBankAccountDao;
	}

	@Override
	public DaoPage findCustBankAccountByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= custBankAccountDao.findCustBankAccountByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertCustBankAccountToInParam((List<CustBankAccount>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<CustBankAccountInParam> findCustBankAccountByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<CustBankAccount> temp= custBankAccountDao.findCustBankAccountByParams(params);
		return convertCustBankAccountToInParam(temp);
	}
	@Override
	public void saveCustBankAccountDataListsMap(Map dataListsMap) {
		Collection<CustBankAccountInParam> deleteList = BatchUtils.to(CustBankAccountInParam.class).getDeleteEntities(dataListsMap);
		Collection<CustBankAccountInParam> insertList =  BatchUtils.to(CustBankAccountInParam.class).getInsertEntities(dataListsMap);
		Collection<CustBankAccountInParam> updateList =  BatchUtils.to(CustBankAccountInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(CustBankAccountInParam inParam: updateList){
				CustBankAccount entity=convertCustBankAccountInParamToEntity(inParam);
				custBankAccountDao.update(entity);
			}		
//			custBankAccountDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(CustBankAccountInParam inParam: insertList){
				CustBankAccount entity=convertCustBankAccountInParamToEntity(inParam);
				custBankAccountDao.save(entity);
				inParam.setId(entity.getId());
			}
//			custBankAccountDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(CustBankAccountInParam inParam:deleteList){
				CustBankAccount entity=new CustBankAccount();
				entity.setId(inParam.getId());
				custBankAccountDao.remove(entity);
			}
//			custBankAccountDao.removeAll(deleteList);
		}
		
	}
	private List<CustBankAccountInParam> convertCustBankAccountToInParam(List<CustBankAccount> models){
		List<CustBankAccountInParam> result=new ArrayList<CustBankAccountInParam>();
		for(CustBankAccount initiation:models){
			CustBankAccountInParam inparam=convertCustBankAccountToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public CustBankAccountInParam convertCustBankAccountToInParam(CustBankAccount model){
		CustBankAccountInParam inparam=new CustBankAccountInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public CustBankAccount convertCustBankAccountInParamToEntity(CustBankAccountInParam inParam){
		CustBankAccount entity=new CustBankAccount();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
}

