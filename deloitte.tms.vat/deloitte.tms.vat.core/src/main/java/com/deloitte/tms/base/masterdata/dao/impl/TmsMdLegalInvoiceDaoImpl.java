package com.deloitte.tms.base.masterdata.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.base.masterdata.dao.TmsMdLegalInvoiceDao;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntity;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalInvoice;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.itextpdf.text.pdf.PdfStructTreeController.returnType;
/**
 * Home object for domain model class TmsMdLegalInvoice.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdLegalInvoiceDao.BEAN_ID)
public class TmsMdLegalInvoiceDaoImpl extends BaseDao<TmsMdLegalInvoice> implements TmsMdLegalInvoiceDao{
	public DaoPage findTmsMdLegalInvoiceByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdLegalInvoiceQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<TmsMdLegalInvoice> findTmsMdLegalInvoiceByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdLegalInvoiceQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildTmsMdLegalInvoiceQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdLegalInvoice where 1=1 ");
		Object value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}if(AssertHelper.isOrNotEmpty_assert(params.get("legalEntityId"))){
			query.append(" and legalEntityId=:legalEntityId");
			values.put("legalEntityId", params.get("legalEntityId"));
		}
		query.append(" and flag = 1");
	}
	
	/**   
	 * @return  
	 * @see com.deloitte.tms.base.masterdata.dao.TmsMdLegalInvoiceDao#findLegalEntity()  
	 */
	
	private void buildLegalEntityQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdLegalEntity where 1=1 ");
		Object value=params.get("status");
		Object legalEntityCode=params.get("legalEntityCode");
		if(AssertHelper.isOrNotEmpty_assert(value))
		{
			query.append(" and status=:status");
			values.put("status", value);
		}if(AssertHelper.isOrNotEmpty_assert(legalEntityCode)){
			query.append(" and legalEntityCode=:legalEntityCode");
			values.put("legalEntityCode", legalEntityCode);
		}if(AssertHelper.isOrNotEmpty_assert(params.get("legalEntityId"))){
			query.append(" and legalEntityId=:legalEntityId");
			values.put("legalEntityId", params.get("legalEntityId"));
		}if(AssertHelper.isOrNotEmpty_assert(params.get("id"))){
			query.append(" and legalInvoiceId=:legalInvoiceId");
			values.put("legalInvoiceId", params.get("id"));
		}
	}
	@Override
	public TmsMdLegalEntity findLegalEntity(Map<String, Object> map) {
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildLegalEntityQuery(query, values, map);
		//TmsMdLegalEntity entity = (TmsMdLegalEntity) findBy(query, values).get(0);
		List<TmsMdLegalEntity>list=findBy(query, values);
		if(values.size()>0){
			if(list.size()>0){
				return list.get(0);
			}else{
				return new TmsMdLegalEntity();
			}
		}else {
			return new TmsMdLegalEntity();
		}
	}
}

