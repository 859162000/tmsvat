package com.deloitte.tms.vat.purchinvoice.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.enums.DataStatus;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.pl.security.utils.LittleUtils;
import com.deloitte.tms.vat.core.common.ExcelProcess;
import com.deloitte.tms.vat.purchinvoice.model.TmsDrvatInvoiceTrxH;
import com.deloitte.tms.vat.purchinvoice.model.TmsDrvatInvoiceTrxHInParam;
import com.deloitte.tms.vat.purchinvoice.model.TmsDrvatInvoiceTrxL;
import com.deloitte.tms.vat.purchinvoice.model.TmsDrvatInvoiceTrxLInParam;
import com.deloitte.tms.vat.purchinvoice.dao.TmsDrvatInvoiceTrxHDao;
import com.deloitte.tms.vat.purchinvoice.service.TmsDrvatInvoiceTrxHService;
/**
 * Home object for domain model class TmsDrvatInvoiceTrxH.
 * @see com.deloitte.tms.vat.purchinvoice.model
 * @author Hibernate Tools
 */
@Component(TmsDrvatInvoiceTrxHService.BEAN_ID)
public class TmsDrvatInvoiceTrxHServiceImpl extends BaseService implements TmsDrvatInvoiceTrxHService{
	
	public Logger log= Logger.getLogger(this.getClass());
	
	public static Integer tran4Records=50;
	
	@Resource
	TmsDrvatInvoiceTrxHDao tmsDrvatInvoiceTrxHDao;

	@Override
	public IDao getDao() {
		return tmsDrvatInvoiceTrxHDao;
	}
	
	@Override
	public void writeBackAuthen(TmsDrvatInvoiceTrxLInParam record){
		
		tmsDrvatInvoiceTrxHDao.writeBackAuthen( record);
	}

	@Override
	public DaoPage findTmsDrvatInvoiceTrxHByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsDrvatInvoiceTrxHDao.findTmsDrvatInvoiceTrxHByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsDrvatInvoiceTrxHToInParam((List<TmsDrvatInvoiceTrxH>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TmsDrvatInvoiceTrxHInParam> findTmsDrvatInvoiceTrxHByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsDrvatInvoiceTrxH> temp= tmsDrvatInvoiceTrxHDao.findTmsDrvatInvoiceTrxHByParams(params);
		return convertTmsDrvatInvoiceTrxHToInParam(temp);
	}
	@Override
	public void saveTmsDrvatInvoiceTrxHDataListsMap(Map dataListsMap) {
		Collection<TmsDrvatInvoiceTrxHInParam> deleteList = BatchUtils.to(TmsDrvatInvoiceTrxHInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsDrvatInvoiceTrxHInParam> insertList =  BatchUtils.to(TmsDrvatInvoiceTrxHInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsDrvatInvoiceTrxHInParam> updateList =  BatchUtils.to(TmsDrvatInvoiceTrxHInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsDrvatInvoiceTrxHInParam inParam: updateList){
				TmsDrvatInvoiceTrxH entity=convertTmsDrvatInvoiceTrxHInParamToEntity(inParam);
				tmsDrvatInvoiceTrxHDao.update(entity);
			}		
//			tmsDrvatInvoiceTrxHDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsDrvatInvoiceTrxHInParam inParam: insertList){
				TmsDrvatInvoiceTrxH entity=convertTmsDrvatInvoiceTrxHInParamToEntity(inParam);
				tmsDrvatInvoiceTrxHDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsDrvatInvoiceTrxHDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsDrvatInvoiceTrxHInParam inParam:deleteList){
				TmsDrvatInvoiceTrxH entity=new TmsDrvatInvoiceTrxH();
				entity.setId(inParam.getId());
				tmsDrvatInvoiceTrxHDao.remove(entity);
			}
//			tmsDrvatInvoiceTrxHDao.removeAll(deleteList);
		}
		
	}
	private List<TmsDrvatInvoiceTrxHInParam> convertTmsDrvatInvoiceTrxHToInParam(List<TmsDrvatInvoiceTrxH> models){
		List<TmsDrvatInvoiceTrxHInParam> result=new ArrayList<TmsDrvatInvoiceTrxHInParam>();
		for(TmsDrvatInvoiceTrxH initiation:models){
			TmsDrvatInvoiceTrxHInParam inparam=convertTmsDrvatInvoiceTrxHToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TmsDrvatInvoiceTrxHInParam convertTmsDrvatInvoiceTrxHToInParam(TmsDrvatInvoiceTrxH model){
		TmsDrvatInvoiceTrxHInParam inparam=new TmsDrvatInvoiceTrxHInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TmsDrvatInvoiceTrxH convertTmsDrvatInvoiceTrxHInParamToEntity(TmsDrvatInvoiceTrxHInParam inParam){
		TmsDrvatInvoiceTrxH entity=new TmsDrvatInvoiceTrxH();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	@Override
	public DaoPage findTmsDrvatInvoiceTrxLByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsDrvatInvoiceTrxHDao.findTmsDrvatInvoiceTrxLByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsDrvatInvoiceTrxLToInParam((List<TmsDrvatInvoiceTrxL>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TmsDrvatInvoiceTrxLInParam> findTmsDrvatInvoiceTrxLByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsDrvatInvoiceTrxL> temp= tmsDrvatInvoiceTrxHDao.findTmsDrvatInvoiceTrxLByParams(params);
		return convertTmsDrvatInvoiceTrxLToInParam(temp);
	}
	
	
	@Override
	public DaoPage findTmsDrvatInvoiceTrxLByParams2(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsDrvatInvoiceTrxHDao.findTmsDrvatInvoiceTrxLByParams2(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsDrvatInvoiceTrxLToInParam((List<TmsDrvatInvoiceTrxL>) daoPage.getResult()));
		return daoPage;
	}
	
	@Override
	public List<TmsDrvatInvoiceTrxLInParam> findTmsDrvatInvoiceTrxLByParams2(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsDrvatInvoiceTrxL> temp= tmsDrvatInvoiceTrxHDao.findTmsDrvatInvoiceTrxLByParams2(params);
		return convertTmsDrvatInvoiceTrxLToInParam(temp);
	}
	
	@Override
	public List<TmsDrvatInvoiceTrxLInParam> findTmsDrvatInvoiceTrxLByDate(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsDrvatInvoiceTrxL> temp= tmsDrvatInvoiceTrxHDao.findTmsDrvatInvoiceTrxLByDate(params);
		return convertTmsDrvatInvoiceTrxLToInParam(temp);
	}
	
	@Override
	public List<TmsDrvatInvoiceTrxLInParam> findTrxL4Exist(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsDrvatInvoiceTrxL> temp= tmsDrvatInvoiceTrxHDao.findTmsDrvatInvoiceTrxLByParams2(params);
		return convertTmsDrvatInvoiceTrxLToInParam(temp);
	}
	
		
	
	@Override
	public void saveTmsDrvatInvoiceTrxLDataListsMap(Map dataListsMap) {
		Collection<TmsDrvatInvoiceTrxLInParam> deleteList = BatchUtils.to(TmsDrvatInvoiceTrxLInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsDrvatInvoiceTrxLInParam> insertList =  BatchUtils.to(TmsDrvatInvoiceTrxLInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsDrvatInvoiceTrxLInParam> updateList =  BatchUtils.to(TmsDrvatInvoiceTrxLInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsDrvatInvoiceTrxLInParam inParam: updateList){
				TmsDrvatInvoiceTrxL entity=convertTmsDrvatInvoiceTrxLInParamToEntity(inParam);
				tmsDrvatInvoiceTrxHDao.update(entity);
			}		
//			tmsDrvatInvoiceTrxHDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsDrvatInvoiceTrxLInParam inParam: insertList){
				TmsDrvatInvoiceTrxL entity=convertTmsDrvatInvoiceTrxLInParamToEntity(inParam);
				tmsDrvatInvoiceTrxHDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsDrvatInvoiceTrxHDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsDrvatInvoiceTrxLInParam inParam:deleteList){
				TmsDrvatInvoiceTrxL entity=new TmsDrvatInvoiceTrxL();
				entity.setId(inParam.getId());
				tmsDrvatInvoiceTrxHDao.remove(entity);
			}
//			tmsDrvatInvoiceTrxHDao.removeAll(deleteList);
		}
	}
	private List<TmsDrvatInvoiceTrxLInParam> convertTmsDrvatInvoiceTrxLToInParam(List<TmsDrvatInvoiceTrxL> models){
		List<TmsDrvatInvoiceTrxLInParam> result=new ArrayList<TmsDrvatInvoiceTrxLInParam>();
		for(TmsDrvatInvoiceTrxL initiation:models){
			TmsDrvatInvoiceTrxLInParam inparam=convertTmsDrvatInvoiceTrxLToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TmsDrvatInvoiceTrxLInParam convertTmsDrvatInvoiceTrxLToInParam(TmsDrvatInvoiceTrxL model){
		TmsDrvatInvoiceTrxLInParam inparam=new TmsDrvatInvoiceTrxLInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TmsDrvatInvoiceTrxL convertTmsDrvatInvoiceTrxLInParamToEntity(TmsDrvatInvoiceTrxLInParam inParam){
		TmsDrvatInvoiceTrxL entity=new TmsDrvatInvoiceTrxL();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	
	
	
	@Override
	public void saveTmsInVoiceLMap(Map dataListsMap) {
		Collection<TmsDrvatInvoiceTrxL> deleteList = BatchUtils.to(TmsDrvatInvoiceTrxL.class).getDeleteEntities(dataListsMap);
		Collection<TmsDrvatInvoiceTrxL> insertList =  BatchUtils.to(TmsDrvatInvoiceTrxL.class).getInsertEntities(dataListsMap);
		Collection<TmsDrvatInvoiceTrxL> updateList =  BatchUtils.to(TmsDrvatInvoiceTrxL.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsDrvatInvoiceTrxL inParam: updateList){
				
				tmsDrvatInvoiceTrxHDao.update(inParam);
			}		
//			tmsDrvatInvoiceTrxHDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsDrvatInvoiceTrxL inParam: insertList){
				
				tmsDrvatInvoiceTrxHDao.save(inParam);
				
			}
//			tmsDrvatInvoiceTrxHDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsDrvatInvoiceTrxL inParam:deleteList){
				
			
				tmsDrvatInvoiceTrxHDao.remove(inParam);
			}
//			tmsDrvatInvoiceTrxHDao.removeAll(deleteList);
		}
	}
	
	@Override
	public StringBuffer importExcel(InputStream content){
		
		StringBuffer existStr=null;
		
		try{
			ExcelProcess excelProcess = new ExcelProcess();
			excelProcess.importExcelInit(content);
			Integer rowNum = excelProcess.getRowNum(excelProcess.sheetIndexDefault);
			List<TmsDrvatInvoiceTrxL> eachTranModle=new ArrayList<TmsDrvatInvoiceTrxL>();
			for(int i = 1; i<=rowNum; i++){
				String[] rowData = excelProcess.getRowData(excelProcess.sheetIndexDefault, i);
				eachTranModle.add(new TmsDrvatInvoiceTrxL(rowData));
			}
			
			log.info("orgional size: "+eachTranModle.size());
			existStr=null;
			existStr = findExistsRecords(eachTranModle);
			log.info("after remove exists size is: "+eachTranModle.size());
			
			if(eachTranModle==null || eachTranModle.size()<1){
				
			}else{
				log.info("existStr.toString():" +existStr.toString()+";");
				
				String ttt=existStr.toString();
				if( LittleUtils.strEmpty(  ttt          ) || AssertHelper.empty(ttt)  ){
					
					saveImportTmsInVoiceLData(eachTranModle);
				}else{
					log.info("wil not save as has duplication existStr:"+existStr+";");
				}			
			}
			
			log.info("will return existStr:"+existStr+";");
			return existStr;
		}catch(Exception ex){
			ex.printStackTrace();
			log.info(ex.getMessage());
			log.info("will return existStr:"+existStr+";");
			return existStr;
		}
	}
	
	
	public StringBuffer findExistsRecords(List<TmsDrvatInvoiceTrxL> orgs){
		
		//List<TmsDrvatInvoiceTrxL> distinctList=new ArrayList<TmsDrvatInvoiceTrxL>();
		StringBuffer existStr=new StringBuffer();
		int i=0;
		
		try{
			
		for(TmsDrvatInvoiceTrxL org : orgs){
			
			HashMap<String, String> params = new HashMap<String, String>();
			
			String v1 = org.getInvoiceCode();
			if(   LittleUtils.strEmpty(v1) || AssertHelper.empty(v1) ){
				continue;//both two no empty will search as one field no identify
			}else{
				params.put("invoiceCode", v1.trim());
			}
			
			String v2 = org.getInvoiceNumber();
			
			if( LittleUtils.strEmpty(v2) || AssertHelper.empty(v2) ){
				continue;
			}else{
				params.put("invoiceNumber", v2.trim());
			}
			
			List list = this.tmsDrvatInvoiceTrxHDao.findExistsRecords(params);
			
			try{
			System.out.println("list size is : "+ list.size());
			}catch(Exception xx){
				//xx.printStackTrace();
			}
			if(list==null || list.size()<1){
				
				//distinctList.add(org);
			}else{			
				
				if(i>0){
					existStr.append(",");
				}
				existStr.append(i+1);
			}	
			
			 ++i;
		}
		
		//orgs=null;
		//orgs=distinctList;
	
		
		}catch(Exception e){
			
			
			e.printStackTrace();			
		}	
		
		return existStr;
	}
	
	
	private void saveImportTmsInVoiceLData(
			List<TmsDrvatInvoiceTrxL> eachTranModleLeft) {
		
		try{
		
		for(TmsDrvatInvoiceTrxL inParam: eachTranModleLeft){
			
			tmsDrvatInvoiceTrxHDao.save(inParam);
			
		}
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	@Override
	public void removeTrxL(String ids){
		
		try{
			this.tmsDrvatInvoiceTrxHDao.removeTrxL(ids);
		}catch(Exception e){
			e.printStackTrace();
		}
	}

}

