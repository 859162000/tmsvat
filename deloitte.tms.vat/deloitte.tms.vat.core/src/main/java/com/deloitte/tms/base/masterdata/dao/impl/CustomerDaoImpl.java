package com.deloitte.tms.base.masterdata.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.base.masterdata.model.Customer;
import com.deloitte.tms.base.masterdata.dao.CustomerDao;
/**
 * Home object for domain model class Customer.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(CustomerDao.BEAN_ID)
public class CustomerDaoImpl extends BaseDao<Customer> implements CustomerDao{
	public DaoPage findCustomerByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildCustomerQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<Customer> findCustomerByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildCustomerQuery(query, values, params);
		return findBy(query, values);
	}
	
	private void buildCustomerQuery(StringBuffer query,Map values,Map params) {
		query.append(" from Customer where 1=1 ");
		Object value=params.get("status");
		
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		value=params.get("customerNumber");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and customerNumber=:customerNumber");
			values.put("customerNumber", value);
		}
		
		value=params.get("customerName");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and customerName like:customerName");
			values.put("customerName", "%"+value+"%");
		}
		
		value=params.get("gsnRegistrationNumber");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and gsnRegistrationNumber=:gsnRegistrationNumber");
			values.put("gsnRegistrationNumber", value);
		}
		//是否有效
		value=params.get("enabledFlag");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and enabledFlag=:enabledFlag");
			values.put("enabledFlag", value);
		}
		//是否预约开票
		value=params.get("isAppointInvoice");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and isAppointInvoice=:isAppointInvoice");
			values.put("isAppointInvoice", value);
		}
		//客户主题类型
		value=params.get("custLegalEntityType");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and custLegalEntityType=:custLegalEntityType");
			values.put("custLegalEntityType", value);
		}
		
		
		//################################################
		//证件类型
	    Object	value6 =params.get("discOption");
		if(AssertHelper.notEmpty(value6))
		{
		
		//  System.out.println("~~~~~~~~~~#~~~~~~~~~~~"+value6);
//		value=params.get("search_Number");
		if( value6.equals("1")){
			
			query.append(" and custRegistrationCode=:custRegistrationCode");
			values.put("custRegistrationCode", value6);
			
			
			//纳税人识别号
	       Object	value7=params.get("searchNumber");
			if(AssertHelper.notEmpty(value7))
			{
				query.append(" and custRegistrationNumber=:custRegistrationNumber");
				values.put("custRegistrationNumber", value7);	
				
			}			
		}
		if(value6.equals("2")){
			
			query.append(" and custRegistrationCode=:custRegistrationCode");
			values.put("custRegistrationCode", value6);
			
					//同一社会信用玛
		Object	value8=params.get("searchNumber");
			if(AssertHelper.notEmpty(value8))
			{
				query.append(" and gsnRegistrationNumber=:gsnRegistrationNumber");
				values.put("gsnRegistrationNumber", value8);
				
			}			
		}
	if(value6.equals("3")){
		
		
		
		Object	value9=params.get("searchNumber");
			if(AssertHelper.notEmpty(value9))
			{
				query.append(" and customerNumber = :customerNumber");
				values.put("customerNumber", value9.toString());
				
			}			
		}				
		}
		
		
		

	}
	@Override
	public List<Customer> getCustomer(int pageIndex, int pageSize) {
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		query.append(" from Customer where 1=1 ");
		return findByPage(query, values, pageIndex, pageSize);
	}
	@Override
	public List getCustBankAccount(int pageIndex, int pageSize) {
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		query.append(" from CustBankAccount where 1=1 ");
		return findByPage(query, values, pageIndex, pageSize);
	}
	@Override
	public List getCustomerSite(int pageIndex, int pageSize) {
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		query.append(" from CustomerSite where 1=1 ");
		return findByPage(query, values, pageIndex, pageSize);
	}	
}

