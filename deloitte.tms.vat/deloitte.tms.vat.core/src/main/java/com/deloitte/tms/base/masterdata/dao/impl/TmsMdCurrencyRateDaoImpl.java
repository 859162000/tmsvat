package com.deloitte.tms.base.masterdata.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.DateUtils;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.base.masterdata.model.TmsMdCurrencyRate;
import com.deloitte.tms.base.masterdata.dao.TmsMdCurrencyRateDao;
/**
 * Home object for domain model class TmsMdCurrencyRate.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdCurrencyRateDao.BEAN_ID)
public class TmsMdCurrencyRateDaoImpl extends BaseDao<TmsMdCurrencyRate> implements TmsMdCurrencyRateDao{
	public DaoPage findTmsMdCurrencyRateByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdCurrencyRateQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<TmsMdCurrencyRate> findTmsMdCurrencyRateByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdCurrencyRateQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildTmsMdCurrencyRateQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdCurrencyRate where 1=1 ");
		Object value=params.get("status");
		Object value2=params.get("sourceCurrencyCode");
		Object value3=params.get("targetCurrencyCode");
		Object value4=params.get("currencyRate");
		String value5=(String) params.get("exchangeDate");
		Object value6=params.get("description");
		
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		if(value2!=null && !"".equals(value2) )
		{
			query.append(" and sourceCurrencyCode like :sourceCurrencyCode");
			values.put("sourceCurrencyCode", "%"+value2+"%");
		}
		if(value3!=null && !"".equals(value3) )
		{
			query.append(" and targetCurrencyCode like :targetCurrencyCode");
			values.put("targetCurrencyCode", "%"+value3+"%");
		}
		if(value4!=null && !"".equals(value4) )
		{
			query.append(" and currencyRate like :currencyRate");
			values.put("currencyRate", "%"+value4+"%");
		}
		if(value5!=null && !"".equals(value5) )
		{
			query.append(" and exchangeDate <= :exchangeDate");									
			values.put("exchangeDate", DateUtils.parseTime(value5, "yyyy-MM-dd"));
		}
		if(value6!=null && !"".equals(value6) )
		{
			query.append(" and description like :description");
			values.put("description", "%"+value6+"%");
		}
		
	}
}

