package com.deloitte.tms.vat.salesinvoice.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.math.BigDecimal;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.cache.utils.DictionaryCacheUtils;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.vat.base.enums.CrvatReverseReqResEnums;
import com.deloitte.tms.vat.base.enums.CrvatTaxPoolStatuEnums;
import com.deloitte.tms.vat.salesinvoice.dao.TmsCrvatInvReverseReqDao;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolH;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvReverseReq;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvReverseReqInParam;
import com.deloitte.tms.vat.salesinvoice.service.TmsCrvatInvReverseReqService;
import com.itextpdf.text.pdf.PdfStructTreeController.returnType;
/**
 * Home object for domain model class TmsCrvatInvReverseReq.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Component(TmsCrvatInvReverseReqService.BEAN_ID)
public class TmsCrvatInvReverseReqServiceImpl extends BaseService implements TmsCrvatInvReverseReqService{
	@Resource
	TmsCrvatInvReverseReqDao tmsCrvatInvReverseReqDao;

	@Override
	public IDao getDao() {
		return tmsCrvatInvReverseReqDao;
	}

	@Override
	public DaoPage findTmsCrvatInvReverseReqByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsCrvatInvReverseReqDao.findTmsCrvatInvReverseReqObjectByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertObjectToInParam((List<Object[]>) daoPage.getResult()));
		return daoPage;
	}


	private List<TmsCrvatInvReverseReqInParam> convertObjectToInParam(List<Object[]> models){
		List<TmsCrvatInvReverseReqInParam> result=new ArrayList<TmsCrvatInvReverseReqInParam>();
		for(Object[] initiation:models){
			TmsCrvatInvReverseReqInParam inparam=convertObjectToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}

	public TmsCrvatInvReverseReqInParam convertObjectToInParam(Object[] model){
		TmsCrvatInvReverseReqInParam inparam=new TmsCrvatInvReverseReqInParam();
		int i=0;
		Map<String,String> categoryMap = DictionaryCacheUtils.getCodesByCvalueMap("VAT_CR_INVOICE_TYPE");
		Map<String,String> registerTypeMap = DictionaryCacheUtils.getCodesByCvalueMap("VAT_CUSTOMER_DISC_OPTION");
		
		inparam.setPrintHId((String)model[i++]);
		inparam.setOriInventoryInvoiceId((String)model[i++]);
		inparam.setCategory(categoryMap.get((String)model[i++]));
		inparam.setVersion((BigDecimal)model[i++]);
		inparam.setOriInvoiceCode((String)model[i++]);
		inparam.setOriInvoiceNumber((String)model[i++]);
		inparam.setPrintTerminalNumber((String)model[i++]);
		inparam.setCustomName((String)model[i++]);
		inparam.setCustomRegisterNumber((String)model[i++]);
		inparam.setCustomRegisterType(registerTypeMap.get((String)model[i++]));
		inparam.setVatNetValue((BigDecimal)model[i++]);
		inparam.setVatTaxValue((BigDecimal)model[i++]);
		inparam.setVatAmountValue(inparam.getVatNetValue().add(inparam.getVatTaxValue()));
		inparam.setInvoicePrintDate((Date)model[i++]);
		inparam.setRequestBy((String)model[i++]);
		inparam.setId((String)model[i++]);
		return inparam;
	}

	@Override
	public void removeCrvatInvReverseReqById(String id) {
		
		tmsCrvatInvReverseReqDao.removeCrvatInvReverseReqById(id);
	}

	@Override
	public List<String> resetCrvatTaxPoolStatus(String invoiceCode,
			String invoiceNumber) {
		return tmsCrvatInvReverseReqDao.resetCrvatTaxPoolStatus(invoiceCode, invoiceNumber, CrvatTaxPoolStatuEnums.APPFORM_REVOKED.getValue());
	}

	@Override
	public CrvatReverseReqResEnums checkExistVoice(String invoiceCode, String invoiceNumber,String informationNumber) {
		// TODO Auto-generated method stub
		String reverseInvoiceCode =new String();
		String reverseInvoiceNumber =new String();
		String reverseInformtionNumber = new String();
		List<Object[]> rows = tmsCrvatInvReverseReqDao.checkExistVoice(reverseInvoiceCode, reverseInvoiceNumber, informationNumber);
		for (int i=0;i<rows.size();i++){
			reverseInvoiceCode=rows.get(i)[2].toString();
			reverseInvoiceNumber=rows.get(i)[3].toString();
			reverseInformtionNumber=rows.get(i)[6].toString();
			if (invoiceCode.equals(reverseInvoiceCode) && invoiceNumber.equals(reverseInvoiceNumber)){
				return CrvatReverseReqResEnums.applied;
			}
			if (informationNumber.equals(reverseInformtionNumber)) {
				return CrvatReverseReqResEnums.errerformnumber;
			}
		}
		
		return CrvatReverseReqResEnums.succeeded;
	}
	








}

