package com.deloitte.tms.vat.salesinvoice.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.criteria.From;

import org.apache.poi.ss.usermodel.Row;
import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.vat.salesinvoice.dao.TmsCrvatInvReverseReqDao;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolH;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvReverseReq;
import com.itextpdf.text.pdf.PdfStructTreeController.returnType;
/**
 * Home object for domain model class TmsCrvatInvReverseReq.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Component(TmsCrvatInvReverseReqDao.BEAN_ID)
public class TmsCrvatInvReverseReqDaoImpl extends BaseDao<TmsCrvatInvReverseReq> implements TmsCrvatInvReverseReqDao{


	public DaoPage findTmsCrvatInvReverseReqObjectByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		
		Map values=new HashMap();
		query.append(" select * from (select ph.invoice_prt_pool_h_id,");
		query.append("	 ph.INVENTORY_INVOICE_ID,");
		query.append("   ph.invoice_category,");
		query.append("   ph.print_version,");
		query.append("   ph.invoice_code,");
		query.append("   ph.invoice_number,");
		query.append("   ph.equipment_code,");
		query.append("   ph.customer_name,");
		query.append("   ph.cust_registration_number,");
		query.append("   ph.cust_registration_code,");
		query.append("   (select sum(prl.ACCTD_AMOUNT_CR) from tms_crvat_inv_prt_pool_l prl where prl.invoice_prt_pool_h_id = ph.invoice_prt_pool_h_id) netvalue,");
		query.append("   (select sum(prl.vat_amount) from tms_crvat_inv_prt_pool_l prl where prl.invoice_prt_pool_h_id = ph.invoice_prt_pool_h_id) taxvalue,");
		query.append("   ph.INVOICE_PRINT_DATE,");
		query.append("   (select re.request_by from tms_crvat_inv_reverse_req re where ph.invoice_code = re.invoice_code and ph.invoice_number = ph.invoice_number),");
		query.append("   (select re.invoice_reverse_req_id from tms_crvat_inv_reverse_req re where ph.invoice_code = re.invoice_code and ph.invoice_number = ph.invoice_number)");
		query.append(" from tms_crvat_inv_prt_pool_h ph where ph.invoice_code is not null and ph.invoice_number is not null ) gr where 1=1");
		
		Object value=params.get("category");
		if(value!="")
		{
			query.append(" and gr.invoice_category=:category");
			values.put("category",value);
		}
		
		value=params.get("customRegisterNumber");
		if(value!="")
		{
			query.append(" and gr.CUST_REGISTRATION_NUMBER like :customRegisterNumber ");
			values.put("customRegisterNumber","%"+value+"%");
		}

		value=params.get("customRegisterType");
		if(value!="")
		{
			query.append(" and gr.CUST_REGISTRATION_CODE=:customRegisterType");
			values.put("customRegisterType",value);
		}
		
		value=params.get("oriInvoiceNumber");
		if(value!="")
		{
			query.append(" and gr.INVOICE_NUMBER like :oriInvoiceNumber");
			values.put("oriInvoiceNumber", "%"+value+"%");
		}
		value=params.get("oriInvoiceCode");
		if(value!="")
		{
			query.append(" and gr.INVOICE_CODE like :oriInvoiceCode");
			values.put("oriInvoiceCode", "%"+value+"%");
		}
		value=params.get("invoicePrintDate");
		if(value!="")
		{
			query.append(" and to_char(gr.INVOICE_PRINT_DATE,'yyyy-mm-dd')=:invoicePrintDate");
			values.put("invoicePrintDate", value);
		}
		
		return pageBySql(query,values, pageIndex, pageSize);
	}
	@Override
	public void removeCrvatInvReverseReqById(String id) {
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		Object value = id;
		
		if(value != "")
		{
			query.append("delete from tms_crvat_inv_reverse_req re where re.invoice_reverse_req_id = :Id");
			values.put("Id",value);
		}
		
		executeSql(query, values);
		
		
	}
	@Override
	public  List<String> resetCrvatTaxPoolStatus(String invoiceCode,
			String invoiceNumber, String status) {
		
		List<String> trxIds = seleTrx(invoiceCode, invoiceNumber);
		if (trxIds.size()==0){
			return trxIds;
		}
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		
		Object value= status;
		query.append(" update tms_crvat_trx_pool_all pa set pa.status = :status ");
		values.put("status", value);
		query.append(" where pa.crvat_trx_pool_id in (");
		
		for (int i=0;i<trxIds.size();i++){
			if (i>0){
				query.append(" , ");
			}
			value = trxIds.get(i);
			query.append(" :Id"+String.valueOf(i));
			values.put("Id"+String.valueOf(i), value);
		}
		
		query.append("	)");
		
		executeSql(query, values);
		
		return trxIds;
	}

	private List<String> seleTrx(String invoiceCode,String invoiceNumber){
		
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		
		query.append(" select rl.crvat_trx_pool_id");
		query.append(" from (select * from tms_crvat_inv_prt_pool_h ph");
		
		Object value = invoiceCode;
		query.append(" where ph.invoice_code = :invoiceCode ");		
		values.put("invoiceCode",value);

		value = invoiceNumber;
		query.append(" and ph.invoice_number = :invoiceNumber ");
		values.put("invoiceNumber",value);
		
		query.append(" and rownum = 1) bi , tms_crvat_invoice_pre_h prh, tms_crvat_invoice_pre_l prl , tms_crvat_invoice_req_l rl");
		query.append(" where bi.crvat_invoice_pre_h_id=prh.crvat_invoice_pre_h_id(+)");
		query.append(" and prh.crvat_invoice_pre_h_id=prl.crvat_invoice_pre_h_id(+)");
		query.append(" and prl.crvat_invoice_req_l_id=rl.crvat_invoice_req_l_id");
		
		return findBySql(query, values);
	}
	@Override
	public List<Object[]> checkExistVoice(String invoiceCode, String invoiceNumber,String informationNumber) {
		// TODO Auto-generated method stub
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		query.append("select * from tms_crvat_inv_reverse_req");
		return findBySql(query, values);
	}

}

