package com.deloitte.tms.base.masterdata.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.base.masterdata.model.TmsMdCurrencyRate;
import com.deloitte.tms.base.masterdata.model.TmsMdCurrencyRateInParam;
import com.deloitte.tms.base.masterdata.dao.TmsMdCurrencyRateDao;
import com.deloitte.tms.base.masterdata.service.TmsMdCurrencyRateService;
/**
 * Home object for domain model class TmsMdCurrencyRate.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdCurrencyRateService.BEAN_ID)
public class TmsMdCurrencyRateServiceImpl extends BaseService implements TmsMdCurrencyRateService{
	@Resource
	TmsMdCurrencyRateDao tmsMdCurrencyRateDao;

	@Override
	public IDao getDao() {
		return tmsMdCurrencyRateDao;
	}

	@Override
	public DaoPage findTmsMdCurrencyRateByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsMdCurrencyRateDao.findTmsMdCurrencyRateByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsMdCurrencyRateToInParam((List<TmsMdCurrencyRate>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TmsMdCurrencyRateInParam> findTmsMdCurrencyRateByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsMdCurrencyRate> temp= tmsMdCurrencyRateDao.findTmsMdCurrencyRateByParams(params);
		return convertTmsMdCurrencyRateToInParam(temp);
	}
	@Override
	public void saveTmsMdCurrencyRateDataListsMap(Map dataListsMap) {
		Collection<TmsMdCurrencyRateInParam> deleteList = BatchUtils.to(TmsMdCurrencyRateInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsMdCurrencyRateInParam> insertList =  BatchUtils.to(TmsMdCurrencyRateInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsMdCurrencyRateInParam> updateList =  BatchUtils.to(TmsMdCurrencyRateInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsMdCurrencyRateInParam inParam: updateList){
				TmsMdCurrencyRate entity=convertTmsMdCurrencyRateInParamToEntity(inParam);
				tmsMdCurrencyRateDao.update(entity);
			}		
//			tmsMdCurrencyRateDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsMdCurrencyRateInParam inParam: insertList){
				TmsMdCurrencyRate entity=convertTmsMdCurrencyRateInParamToEntity(inParam);
				tmsMdCurrencyRateDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsMdCurrencyRateDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsMdCurrencyRateInParam inParam:deleteList){
				TmsMdCurrencyRate entity=new TmsMdCurrencyRate();
				entity.setId(inParam.getId());
				tmsMdCurrencyRateDao.remove(entity);
			}
//			tmsMdCurrencyRateDao.removeAll(deleteList);
		}
		
	}
	private List<TmsMdCurrencyRateInParam> convertTmsMdCurrencyRateToInParam(List<TmsMdCurrencyRate> models){
		List<TmsMdCurrencyRateInParam> result=new ArrayList<TmsMdCurrencyRateInParam>();
		for(TmsMdCurrencyRate initiation:models){
			TmsMdCurrencyRateInParam inparam=convertTmsMdCurrencyRateToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TmsMdCurrencyRateInParam convertTmsMdCurrencyRateToInParam(TmsMdCurrencyRate model){

		TmsMdCurrencyRateInParam inparam=new TmsMdCurrencyRateInParam();
		if(model.getBaseOrg() != null && !"".equals(model.getBaseOrg())){
			inparam.setOrgName(model.getBaseOrg().getOrgName());
		}else{
			
			inparam.setOrgName("");
		}
		
		
		ReflectUtils.copyProperties(model, inparam);

		return inparam;
	}
	public TmsMdCurrencyRate convertTmsMdCurrencyRateInParamToEntity(TmsMdCurrencyRateInParam inParam){
		TmsMdCurrencyRate entity=new TmsMdCurrencyRate();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
}

