package com.deloitte.tms.base.masterdata.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.stereotype.Component;

import com.deloitte.tms.base.masterdata.dao.TmsMdUsageLocalLegalDao;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntity;
import com.deloitte.tms.base.masterdata.model.TmsMdUsageLocalLegal;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.pl.security.utils.LittleUtils;
/**
 * Home object for domain model class TmsMdUsageLocalLegal.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdUsageLocalLegalDao.BEAN_ID)
public class TmsMdUsageLocalLegalDaoImpl extends BaseDao<TmsMdUsageLocalLegal> implements TmsMdUsageLocalLegalDao{
	
	//public static final String IDSPE="#xfxDeloitte#";
	public static final String IDSPE=",";
	
	@Override
	public List getOrgByRelationKeyId(String mainClass, String relationClass, String relationKeyId, List<String> fieldList){
		

		StringBuffer sb = new StringBuffer();
		
		
	if(false){	
		if(fieldList!=null &&  fieldList.size() > 0){
			
			sb.append(" select ");
			
			int i=0; int len = fieldList.size();
			
			for(String s : fieldList){
				
				sb.append( s);
				
				if(i++ < len-1){
					sb.append(", ");
				}
			}
			
		}
	}
		
		sb.append(" from ").append(mainClass).append(" where flag=").append(LittleUtils.one);
		
		sb.append("and id in ( ");
		
		sb.append("  select orgId from  ").append(relationClass).append(" where id=:").append("relationKeyId").append(" and flag=").append(LittleUtils.one);
		sb.append(" ) ");
		
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("relationKeyId", relationKeyId);
		System.out.println("getOrgByRelationKeyId will run hql: "+sb.toString());
		
		List list =this.findBy(sb.toString(), map);
		
		return list;
		
	}
	
	@Override
	public List<?> findAllTargetByFlag(String mainClass){
		StringBuffer sb = new StringBuffer();
		
		sb.append(" from ").append(mainClass).append(" where flag=").append(LittleUtils.one);
		
		List<?> list = this.find(sb.toString());
		
		return list;
	}
	
	/**
	 * filterClass is like tms_md_usage_local_legal
	 * orgClass is tms_md_legal_entity
	 *〈一句话功能简述〉 
	 * 功能详细描述
	 * @param orgClass
	 * @param filterClass
	 * @return
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 * 
	 * for select x1, x2 from table use
	 */
	@Override
	public List<Object[]> listByFilter(String orgClass, String filterClass, ArrayList<String> fieldList){
		
		StringBuffer legalSb= new StringBuffer();
		
		if(fieldList!=null &&  fieldList.size() > 0){
			
			legalSb.append(" select ");
			
			int i=0; int len = fieldList.size();
			
			for(String s : fieldList){
				
				legalSb.append( s);
				
				if(i++ < len-1){
					legalSb.append(", ");
				}
			}
			
		}
		
		
		legalSb.append(" from ");
	
		//legalSb.append(orgClass ).append("  orgClass where   orgClass.flag!='0' and orgClass.id not in (select legalEntityId from  ").append(filterClass).append(" where flag!='0' )");
		
		if(AssertHelper.empty(filterClass)){
			
			legalSb.append(orgClass ).append("  orgClass where   orgClass.flag!='0' ");
			
		}else{
			
			legalSb.append(orgClass ).append("  orgClass where   orgClass.flag!='0' and orgClass.id not in (select legalEntityId from  ").append(filterClass).append(" where flag!='0' )");
			
			}
		
		
		
		
		System.out.println("UsageLocalMgtController > listLegalFreeNew will run hql: "+legalSb.toString());
	   // List<TmsMdLegalEntity>	legalList = tmsMdUsageLocalLegalService.findBy(legalSb, new HashMap());
		
		//public List findBy(StringBuffer hql, Map params) {
		
		List<Object[]>	legalList = this.findBy(legalSb);
		
		return legalList;
	}
	
	
/**
 * @author tigchen	
 * @param orgClass
 * @param filterClass
 * @param fieldList
 * @param extraKeyName
 * @return  
 * @see com.deloitte.tms.base.masterdata.dao.TmsMdUsageLocalLegalDao#listByFilter(java.lang.String, java.lang.String, java.util.ArrayList, java.lang.String)
 */
@Override	
public List<?> listByFilter(String orgClass, String filterClass, ArrayList<String> fieldList, String extraKeyName){
		
		StringBuffer legalSb= new StringBuffer();
		
		if(fieldList!=null &&  fieldList.size() > 0){
			
			legalSb.append(" select ");
			
			int i=0; int len = fieldList.size();
			
			for(String s : fieldList){
				
				legalSb.append( s);
				
				if(i++ < len-1){
					legalSb.append(", ");
				}
			}
			
		}
		
		
		legalSb.append(" from ");
	
		//legalSb.append(orgClass ).append("  orgClass where   orgClass.flag!='0' and orgClass.id not in (select legalEntityId from  ").append(filterClass).append(" where flag!='0' )");
		
		if(AssertHelper.empty(filterClass)){
			
			legalSb.append(orgClass ).append("  orgClass where   orgClass.flag!='0' ");
			
		}else{
			
			//legalSb.append(orgClass ).append("  orgClass where   orgClass.flag!='0' and orgClass.id not in (select legalEntityId from  ").append(filterClass).append(" where flag!='0' )");
			
			
			legalSb.append(orgClass ).append("  orgClass where   orgClass.flag=").append(LittleUtils.one);
			legalSb.append(" and orgClass.id not in");
			legalSb.append( " ( ");
				legalSb.append( " select ");
				legalSb.append( extraKeyName);
				legalSb.append(" from  ").append(filterClass).append(" where flag=").append(LittleUtils.one); 
				
			legalSb.append(" )");
			
		}
		
		
		
		
		System.out.println("UsageLocalMgtController > listLegalFreeNew will run hql: "+legalSb.toString());
	   // List<TmsMdLegalEntity>	legalList = tmsMdUsageLocalLegalService.findBy(legalSb, new HashMap());
		
		//public List findBy(StringBuffer hql, Map params) {
		
		List<?>	legalList = this.findBy(legalSb);
		
		return legalList;
	}
	
@Override
public void removeByKeysUseFlag(String id, String targetClassName){

	String ids = id;
	
	String[] idArray = ids.split(IDSPE);
	
	StringBuffer sb = new StringBuffer();

	
	StringBuffer sb1 = new StringBuffer();
	//StringBuffer sb2 = new StringBuffer();
	
	int len = idArray.length;
	int index=0;
	for(String k : idArray){
		
		sb1.append(" '").append( k ).append("'");
		
	//	sb2.append(" '").append( map.get(k) ).append("'");
		
		if(++index < len){
			sb1.append(" , ");
			
			//sb2.append(", ");
		}
	}
	
	
	sb.append(" update   ").append(targetClassName);
	
	sb.append(" set flag=").append(LittleUtils.zero);
	sb.append(" where id in ( ");//legalEntityId is extrernal key, use this before use key 
	
	sb.append(sb1);
	
	sb.append("  )");
	
	
	System.out.println("execDelHqlDefault will run hql: "+ sb.toString());
	
	
	//BaseDaoSimple > public Integer executeHqlProduce(String sql, Map values)
	this.executeHqlProduce(sb.toString(), new HashMap());

}


	/**
	 * @author tigchen
	 *〈一句话功能简述〉 
	 * 功能详细描述
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 */
	
	@Override
	public void removeByKeysUseFlag(HashMap keysMap, String targetClassName){

		String ids = (String)keysMap.get("id");
		
		String[] idArray = ids.split(IDSPE);
		
		StringBuffer sb = new StringBuffer();
	
		
		StringBuffer sb1 = new StringBuffer();
		//StringBuffer sb2 = new StringBuffer();
		
		int len = idArray.length;
		int index=0;
		for(String k : idArray){
			
			sb1.append(" '").append( k ).append("'");
			
		//	sb2.append(" '").append( map.get(k) ).append("'");
			
			if(++index < len){
				sb1.append(" , ");
				
				//sb2.append(", ");
			}
		}
		
		
		sb.append(" update   ").append(targetClassName);
		
		sb.append(" set flag='0' where legalEntityId in ( ");//legalEntityId is extrernal key, use this before use key 
		
		sb.append(sb1);
		
		sb.append("  )");
		
		
		System.out.println("execDelHqlDefault will run hql: "+ sb.toString());
		
		
		//BaseDaoSimple > public Integer executeHqlProduce(String sql, Map values)
		this.executeHqlProduce(sb.toString(), new HashMap());
	
	}
	
	/**
	 * @author tigchen
	 */
	public List<Object[]> findModelInParaByDefault(String mainTable, String extrTable){
		
/*		String mainTable=TmsMdLegalEnablePrint.class.getName();
		String extrTable=TmsMdLegalEntity.class.getName();*/
		
		StringBuffer hpl=new StringBuffer();
		
		hpl.append( " select t1 , t2.legalEntityName from ").append( mainTable).append( "  t1 , ").append( extrTable).append(" t2").append( " where t1.flag!='0' "    );
		
		hpl.append("  and t2.flag!='0'  and t1.legalEntityId=t2.id");
		
	
		HashMap params=new HashMap();
		
			
		List<Object[]> modelInPara = this.findBy(hpl, params);
		
		return modelInPara;
	}
	
	
	public DaoPage findTmsMdUsageLocalLegalByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdUsageLocalLegalQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<TmsMdUsageLocalLegal> findTmsMdUsageLocalLegalByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdUsageLocalLegalQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildTmsMdUsageLocalLegalQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdUsageLocalLegal where 1=1 ");
		Object value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("legalEntityCode")))
		{
			query.append(" and legalEntityId like :legalEntityId");
			values.put("legalEntityId", "%"+params.get("legalEntityId")+"%");
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("parentId")))
		{
			query.append(" and parentId like :parentId");
			values.put("parentId", "%"+params.get("parentId")+"%");
		}
	}
	public TmsMdUsageLocalLegal findTmsMdUsageLocalLegal(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdUsageLocalLegalQuery(query, values, params);
		return (TmsMdUsageLocalLegal) getFirstRecord(findBy(query, values));
	}

	public TmsMdLegalEntity findTmsMdLegalEntity(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdLegalEntityQuery(query, values, params);
		return (TmsMdLegalEntity) getFirstRecord(findBy(query, values));
	}
	private void buildTmsMdLegalEntityQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdLegalEntity where 1=1 ");
		Object value=params.get("tmsMdUsageLocalLegalId");
		AssertHelper.notEmpty_assert("TmsMdLegalEntity关联主键不能为空");
		if(value!=null&&!"".equals(value))
		{
			value=Long.parseLong(value.toString());
			query.append(" and tmsMdUsageLocalLegalId=:tmsMdUsageLocalLegalId");
			values.put("tmsMdUsageLocalLegalId", value);
		}
	}

	@Override
	public void listByMix(String orgClass, String filterClass,
			ArrayList<String> fieldList) {
		
		
	}
	
	
	@Override
	public DaoPage listByFilter2DaoPage(String orgClass, String filterClass, ArrayList<String> fieldList, Map<String, Object> para){
		
		HashMap<String, Object> map = new HashMap<String, Object>();
		
		Integer pageNumber;
		Integer pageSize;
		if(AssertHelper.empty(para) || para.size()<1){
			pageNumber=LittleUtils.pageNumber;
			pageSize=LittleUtils.pageSize;
		}else{
			
			try{
			 pageNumber=Integer.valueOf((String)para.get("pageNumber"));
			 pageSize =Integer.valueOf((String)para.get("pageSize"));
			if(AssertHelper.empty(pageNumber) || pageNumber < 1){
				pageNumber=LittleUtils.pageNumber;
			}
			if(AssertHelper.empty(pageSize) || pageSize < 1){
				pageSize=LittleUtils.pageSize;
			}
			}catch(Exception e){
				pageNumber=LittleUtils.pageNumber;
				pageSize=LittleUtils.pageSize;
			}
			
			para.remove("pageNumber");
			para.remove("pageSize");
		}

		
		StringBuffer legalSb= new StringBuffer();
		
		if(fieldList!=null &&  fieldList.size() > 0){
			
			legalSb.append(" select ");
			
			int i=0; int len = fieldList.size();
			
			for(String s : fieldList){
				
				legalSb.append( s);
				
				if(i++ < len-1){
					legalSb.append(", ");
				}
			}
			
		}
		
		
		legalSb.append(" from ");
	
		//legalSb.append(orgClass ).append("  orgClass where   orgClass.flag!='0' and orgClass.id not in (select legalEntityId from  ").append(filterClass).append(" where flag!='0' )");
		
		if(AssertHelper.empty(filterClass)){
			
			legalSb.append(orgClass ).append("  orgClass where   orgClass.flag!='0' ");
			
		}else{
			
			legalSb.append(orgClass ).append("  orgClass where   orgClass.flag!='0' and orgClass.id not in (select legalEntityId from  ").append(filterClass).append(" where flag!='0' )");
			
			}
		
		
		if(AssertHelper.empty(para) || para.size()<1){
			
		}else{
			Set<String> keys = para.keySet();
			
			for(String key : keys){
				
				try{
				if(AssertHelper.empty( para.get(key)) ||  ((String)para.get(key)).trim()==""  ){
					continue;
				}
				}catch(Exception e){
					e.printStackTrace();
				}
					
				legalSb.append(" and ").append( key ).append(" like  :").append(key);
				//para.put(key, para.get(key)+"%");
				
				map.put(key, para.get(key)+"%");
			}
		}
		
		
		System.out.println("UsageLocalMgtController > listByFilter2DaoPage will run hql: "+legalSb.toString());
	   // List<TmsMdLegalEntity>	legalList = tmsMdUsageLocalLegalService.findBy(legalSb, new HashMap());
		
		//public List findBy(StringBuffer hql, Map params) {
		return this.pageBy(legalSb, map, pageNumber, pageSize);
		
		//return this.pageBy(legalSb, pageNumber, pageSize);
		
/*		List<Object[]>	legalList = this.findBy(legalSb);
		
		return legalList;*/
	}

	
	/**   
	 * @return  
	 * @see com.deloitte.tms.base.masterdata.dao.TmsMdUsageLocalLegalDao#findAllTmsMdUsageLocalLegal()  
	 */
	
	@Override
	public List<TmsMdUsageLocalLegal> findAllTmsMdUsageLocalLegal() {
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		query.append(" from TmsMdUsageLocalLegal where 1=1 ");
		return findBy(query, values);
	}
}

