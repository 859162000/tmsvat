package com.deloitte.tms.base.taxsetting.dao.impl;

// Generated by bo.wang with ling2.autoproject

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValueSets;
import com.deloitte.tms.base.taxsetting.dao.TmsMdFlexValueSetsDao;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValues;

/**
 * Home object for domain model class TmsMdFlexValueSets.
 * 
 * @see com.deloitte.tms.base.taxsetting.model
 * @author Hibernate Tools
 */
@Component(TmsMdFlexValueSetsDao.BEAN_ID)
public class TmsMdFlexValueSetsDaoImpl extends BaseDao<TmsMdFlexValueSets>
		implements TmsMdFlexValueSetsDao {
/**
 * 查询数据
 */
	public DaoPage findTmsMdFlexValueSetsByParams(Map params,
			Integer pageIndex, Integer pageSize) {
		StringBuffer query = new StringBuffer();
		Map values = new HashMap();
		buildTmsMdFlexValueSetsQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
   /**
    * 对查询参数进行拼接
    * @param query
    * @param values
    * @param params
    */
	private void buildTmsMdFlexValueSetsQuery(StringBuffer query, Map values,
			Map params) {
		query.append(" from TmsMdFlexValueSets where 1=1 ");
		
	    Object flexValueSets_id = params.get("flexValueSetId");//值集ID
		Object ivaluesetencoding_id = params.get("ivaluesetencoding_id");//值集编码
		Object valuesetthat_id = params.get("valuesetthat_id");//值集说明
		Object childcodestrat_id = params.get("childcodestrat_id");//子值编码范围
		Object childcodeend_id = params.get("childcodeend_id");//子值编码范围
		Object childcodthat_id = params.get("childcodthat_id");//子值说明
		
		
		if(flexValueSets_id != null && !"".equals(flexValueSets_id)){
			
			query.append(" and id=:flexValueSets_id");
			values.put("flexValueSets_id", flexValueSets_id);
		}
		
		
		if (ivaluesetencoding_id != null && !"".equals(ivaluesetencoding_id)) {
			
			query.append(" and flexValueSetCode=:ivaluesetencoding_id");
			values.put("ivaluesetencoding_id", ivaluesetencoding_id);
			
		}else if (valuesetthat_id != null && !"".equals(valuesetthat_id)) {
			
			query.append(" and description=:valuesetthat_id");
			values.put("valuesetthat_id", valuesetthat_id);
			
	}else if (childcodestrat_id != null && !"".equals(childcodestrat_id)) {
		
		query.append(" and status=:childcodestrat_id");
		values.put("childcodestrat_id", childcodestrat_id);
		
	}else if (childcodeend_id != null && !"".equals(childcodeend_id)) {
		
		query.append(" and status=:childcodeend_id");
		values.put("childcodeend_id", childcodeend_id);
		
	}else if (childcodthat_id != null && !"".equals(childcodthat_id)) {
		
		query.append(" and status=:childcodthat_id");
		values.put("childcodthat_id", childcodthat_id);
		
	}
		
		
		
	}
	
	
/**
 * 值数据查询
 */
	public DaoPage findTmsMdFlexValuesByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		StringBuffer query = new StringBuffer();
		Map values = new HashMap();
		buildTmsMdFlexValuesQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}

/**
 * 值查询hql拼接
 * @param query
 * @param values
 * @param params
 */
	private void buildTmsMdFlexValuesQuery(StringBuffer query, Map values,
			Map params) {
		query.append(" from TmsMdFlexValues where 1=1 ");
	
		
		Object searchvaluesthat_id = params.get("searchvaluesthat_id");//值集设置值id
		Object id  = params.get("id");//值集设置id
		if(id != null && !"".equals(id)){
			
			query.append(" and flexValueSetId =:flexValueSetId");
			values.put("flexValueSetId", id);
			
		}
		if (searchvaluesthat_id != null && !"".equals(searchvaluesthat_id)) {
			
			query.append(" and id=:id");
			values.put("id", searchvaluesthat_id);
			
			
		}
		
	}
	
	
	public List<TmsMdFlexValues> findTmsMdFlexValuesByParams(Map params) {
		StringBuffer query = new StringBuffer();
		Map values = new HashMap();
		buildTmsMdFlexValuesQuery(query, values, params);
		return findBy(query, values);
	}
/**
 * 值集设置删除
 */
	@Override
	public void removeTmsMdFlexValueSetss(String tmsMdFlexValueSetsId) {
	    this.removeById(TmsMdFlexValueSets.class, tmsMdFlexValueSetsId);
	}
/**
 * 值集设置编码查询
 */
@Override
public DaoPage searchivaluesetencoding(Map<String, Object> parameter,
		int parseInt, int parseInt2) {
	StringBuffer query = new StringBuffer();
	Map values = new HashMap();query.append(" from TmsMdFlexValueSets where 1=1 ");
	
	Object searchivaluesetencoding_id = parameter.get("searchivaluesetencoding_id");//值集编码
	
	if (searchivaluesetencoding_id != null && !"".equals(searchivaluesetencoding_id)) {
		
		query.append(" and flexValueSetCode=:flexValueSetCode");
		values.put("flexValueSetCode", searchivaluesetencoding_id);
		
	}
	return pageBy(query, values, parseInt, parseInt2);
}
/**
 * 值集说明数据查询
 */
@Override
public DaoPage setsearchvaluesetthat(Map<String, Object> parameter,
		int parseInt, int parseInt2) {
	StringBuffer query = new StringBuffer();
	Map values = new HashMap();query.append(" from TmsMdFlexValueSets where 1=1 ");
	
	Object searchivaluesetencoding_id = parameter.get("setsearchvaluesetthat_id");//值集编码
	
	if (searchivaluesetencoding_id != null && !"".equals(searchivaluesetencoding_id)) {
		
		query.append(" and flexValueSetCode=:flexValueSetCode");
		values.put("flexValueSetCode", searchivaluesetencoding_id);
		
	}
	return pageBy(query, values, parseInt, parseInt2);
}



}
