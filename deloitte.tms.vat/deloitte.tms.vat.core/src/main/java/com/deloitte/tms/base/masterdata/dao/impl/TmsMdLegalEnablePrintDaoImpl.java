package com.deloitte.tms.base.masterdata.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEnablePrint;
import com.deloitte.tms.base.masterdata.dao.TmsMdLegalEnablePrintDao;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntity;
/**
 * Home object for domain model class TmsMdLegalEnablePrint.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdLegalEnablePrintDao.BEAN_ID)
public class TmsMdLegalEnablePrintDaoImpl extends BaseDao<TmsMdLegalEnablePrint> implements TmsMdLegalEnablePrintDao{
	
	public static final String IDSPE=",";
	
	
	
	
	/**
	 * filterClass is like tms_md_usage_local_legal
	 * orgClass is tms_md_legal_entity
	 *〈一句话功能简述〉 
	 * 功能详细描述
	 * @param orgClass
	 * @param filterClass
	 * @return
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 * 
	 * for select x1, x2 from table use
	 */
	@Override
	public List<Object[]> listByFilter(String orgClass, String filterClass, ArrayList<String> fieldList){
		
		StringBuffer legalSb= new StringBuffer();
		
		if(fieldList!=null &&  fieldList.size() > 0){
			
			legalSb.append(" select ");
			
			int i=0; int len = fieldList.size();
			
			for(String s : fieldList){
				
				legalSb.append( s);
				
				if(i++ < len-1){
					legalSb.append(", ");
				}
			}
			
		}
		
		
		legalSb.append(" from ");
	
		legalSb.append(orgClass ).append("  orgClass where   orgClass.flag!='0' and orgClass.id not in (select legalEntityId from  ").append(filterClass).append(" where flag!='0' )");
		
		
		System.out.println("UsageLocalMgtController > listLegalFreeNew will run hql: "+legalSb.toString());
	   // List<TmsMdLegalEntity>	legalList = TmsMdLegalEnablePrintService.findBy(legalSb, new HashMap());
		
		//public List findBy(StringBuffer hql, Map params) {
		
		List<Object[]>	legalList = this.findBy(legalSb);
		
		return legalList;
	}
	
	/**
	 * @author tigchen
	 *〈一句话功能简述〉 
	 * 功能详细描述
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 */
	
	@Override
	public void removeByKeysUseFlag(HashMap keysMap, String targetClassName){

		String ids = (String)keysMap.get("id");
		
		String[] idArray = ids.split(IDSPE);
		
		StringBuffer sb = new StringBuffer();
	
		
		StringBuffer sb1 = new StringBuffer();
		//StringBuffer sb2 = new StringBuffer();
		
		int len = idArray.length;
		int index=0;
		for(String k : idArray){
			
			sb1.append(" '").append( k ).append("'");
			
		//	sb2.append(" '").append( map.get(k) ).append("'");
			
			if(++index < len){
				sb1.append(" , ");
				
				//sb2.append(", ");
			}
		}
		
		
		sb.append(" update   ").append(targetClassName);
		
		sb.append(" set flag='0' where legalEntityId in ( ");//legalEntityId is extrernal key, use this before use key 
		
		sb.append(sb1);
		
		sb.append("  )");
		
		
		System.out.println("execDelHqlDefault will run hql: "+ sb.toString());
		
		
		//BaseDaoSimple > public Integer executeHqlProduce(String sql, Map values)
		this.executeHqlProduce(sb.toString(), new HashMap());
	
	}
	
	/**
	 * @author tigchen
	 */
	@Override
	public List<Object[]> findModelInParaByDefault(String mainTable, String extrTable){
		
/*		String mainTable=TmsMdLegalEnablePrint.class.getName();
		String extrTable=TmsMdLegalEntity.class.getName();*/
		
		StringBuffer hpl=new StringBuffer();
		
		hpl.append( " select t1 , t2.legalEntityName from ").append( mainTable).append( "  t1 , ").append( extrTable).append(" t2").append( " where t1.flag!='0' "    );
		
		hpl.append("  and t2.flag!='0'  and t1.legalEntityId=t2.id");
		
	
		HashMap params=new HashMap();
		
			
		List<Object[]> modelInPara = this.findBy(hpl, params);
		
		return modelInPara;
	}
	
	
	
	
	
	
	
	
	
	
	
	/**
	 * @author tigchen
	 */
	public List<Object[]> findModelInParaByDefault(){
		
		String mainTable=TmsMdLegalEnablePrint.class.getName();
		String extrTable=TmsMdLegalEntity.class.getName();
		
		StringBuffer hpl=new StringBuffer();
		
		hpl.append( " select t1 , t2.legalEntityName from ").append( mainTable).append( "  t1 , ").append( extrTable).append(" t2").append( " where t1.flag!='0' "    );
		
		hpl.append("  and t2.flag!='0'  and t1.legalEntityId=t2.id");
		
	
		HashMap params=new HashMap();
		
			
		List<Object[]> modelInPara = this.findBy(hpl, params);
		
		return modelInPara;
	}
	
	/**
	 * @author tigchen
	 */
	public void delModelByDefaultUseRemove(TmsMdLegalEnablePrint target){
		
	
		if(AssertHelper.empty(target)){
			
			System.out.println("target null");
			return;
		}
		
		
		
		this.remove(target);
		
	}
	
	
	public void delModelByDefaultUseHql(TmsMdLegalEnablePrint target){
		
		
		if(AssertHelper.empty(target)){
			
			System.out.println("target null");
			return;
		}
		
		
		
		//this.remove(target);
		
	}
	
	
	public DaoPage findTmsMdLegalEnablePrintByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdLegalEnablePrintQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<TmsMdLegalEnablePrint> findTmsMdLegalEnablePrintByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdLegalEnablePrintQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildTmsMdLegalEnablePrintQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdLegalEnablePrint where 1=1 ");
		Object value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("legalEntityCode")))
		{
			query.append(" and legalEntityId like :legalEntityId");
			values.put("legalEntityId", "%"+params.get("legalEntityId")+"%");
		}
		if(AssertHelper.isOrNotEmpty_assert(params.get("parentId")))
		{
			query.append(" and parentId like :parentId");
			values.put("parentId", "%"+params.get("parentId")+"%");
		}
	}
	
	public TmsMdLegalEnablePrint findTmsMdLegalEnablePrint(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdLegalEnablePrintQuery(query, values, params);
		return (TmsMdLegalEnablePrint) getFirstRecord(findBy(query, values));
	}
	
	private void buildTmsMdLegalEnablePrintQueryWithId(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdLegalEnablePrint where 1=1 ");
		Object value=params.get("id");
		AssertHelper.notEmpty_assert("TmsMdLegalEnablePrint关联主键不能为空");
		if(value!=null&&!"".equals(value))
		{
			value=Long.parseLong(value.toString());
			query.append(" and id=:id");
			values.put("id", value);
		}
	}
	
	
	public TmsMdLegalEntity findTmsMdLegalEntity(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsMdLegalEntityQuery(query, values, params);
		return (TmsMdLegalEntity) getFirstRecord(findBy(query, values));
	}
	private void buildTmsMdLegalEntityQuery(StringBuffer query,Map values,Map params) {
		query.append(" from TmsMdLegalEntity where 1=1 ");
		Object value=params.get("tmsMdLegalEnablePrintId");
		AssertHelper.notEmpty_assert("TmsMdLegalEntity关联主键不能为空");
		if(value!=null&&!"".equals(value))
		{
			value=Long.parseLong(value.toString());
			query.append(" and tmsMdLegalEnablePrintId=:tmsMdLegalEnablePrintId");
			values.put("tmsMdLegalEnablePrintId", value);
		}
	}

	
	/**   
	 * @return  
	 * @see com.deloitte.tms.base.masterdata.dao.TmsMdLegalEnablePrintDao#findAllTmsMdLegalEnablePrint()  
	 */
	
	@Override
	public List<TmsMdLegalEnablePrint> findAllTmsMdLegalEnablePrint() {
		StringBuffer query=new StringBuffer();
		Map<String,String> values=new HashMap<String,String>();
		query.append(" from TmsMdLegalEnablePrint where 1=1 ");
		return findBy(query, values);
	}
}

