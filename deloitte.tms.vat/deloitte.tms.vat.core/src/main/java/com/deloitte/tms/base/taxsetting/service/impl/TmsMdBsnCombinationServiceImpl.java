package com.deloitte.tms.base.taxsetting.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.base.taxsetting.model.TmsMdBsnCombination;
import com.deloitte.tms.base.taxsetting.model.TmsMdBsnCombinationInParam;
import com.deloitte.tms.base.taxsetting.dao.TmsMdBsnCombinationDao;
import com.deloitte.tms.base.taxsetting.service.TmsMdBsnCombinationService;
/**
 * Home object for domain model class TmsMdBsnCombination.
 * @see com.deloitte.tms.base.taxsetting.model
 * @author Hibernate Tools
 */
@Component(TmsMdBsnCombinationService.BEAN_ID)
public class TmsMdBsnCombinationServiceImpl extends BaseService implements TmsMdBsnCombinationService{
	@Resource
	TmsMdBsnCombinationDao tmsMdBsnCombinationDao;

	@Override
	public IDao getDao() {
		return tmsMdBsnCombinationDao;
	}

	@Override
	public DaoPage findTmsMdBsnCombinationByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsMdBsnCombinationDao.findTmsMdBsnCombinationByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsMdBsnCombinationToInParam((List<TmsMdBsnCombination>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TmsMdBsnCombinationInParam> findTmsMdBsnCombinationByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsMdBsnCombination> temp= tmsMdBsnCombinationDao.findTmsMdBsnCombinationByParams(params);
		return convertTmsMdBsnCombinationToInParam(temp);
	}
	@Override
	public void saveTmsMdBsnCombinationDataListsMap(Map dataListsMap) {
		Collection<TmsMdBsnCombinationInParam> deleteList = BatchUtils.to(TmsMdBsnCombinationInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsMdBsnCombinationInParam> insertList =  BatchUtils.to(TmsMdBsnCombinationInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsMdBsnCombinationInParam> updateList =  BatchUtils.to(TmsMdBsnCombinationInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsMdBsnCombinationInParam inParam: updateList){
				TmsMdBsnCombination entity=convertTmsMdBsnCombinationInParamToEntity(inParam);
				tmsMdBsnCombinationDao.update(entity);
			}		
//			tmsMdBsnCombinationDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsMdBsnCombinationInParam inParam: insertList){
				TmsMdBsnCombination entity=convertTmsMdBsnCombinationInParamToEntity(inParam);
				tmsMdBsnCombinationDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsMdBsnCombinationDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsMdBsnCombinationInParam inParam:deleteList){
				TmsMdBsnCombination entity=new TmsMdBsnCombination();
				entity.setId(inParam.getId());
				tmsMdBsnCombinationDao.remove(entity);
			}
//			tmsMdBsnCombinationDao.removeAll(deleteList);
		}
		
	}
	private List<TmsMdBsnCombinationInParam> convertTmsMdBsnCombinationToInParam(List<TmsMdBsnCombination> models){
		List<TmsMdBsnCombinationInParam> result=new ArrayList<TmsMdBsnCombinationInParam>();
		for(TmsMdBsnCombination initiation:models){
			TmsMdBsnCombinationInParam inparam=convertTmsMdBsnCombinationToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TmsMdBsnCombinationInParam convertTmsMdBsnCombinationToInParam(TmsMdBsnCombination model){
		TmsMdBsnCombinationInParam inparam=new TmsMdBsnCombinationInParam();
		if(model.getBaseOrg()!=null && !"".equals(model.getBaseOrg())){
			inparam.setOrgName(model.getBaseOrg().getOrgName());
		}else{
			inparam.setOrgName("");
		}
		
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TmsMdBsnCombination convertTmsMdBsnCombinationInParamToEntity(TmsMdBsnCombinationInParam inParam){
		TmsMdBsnCombination entity=new TmsMdBsnCombination();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
}

