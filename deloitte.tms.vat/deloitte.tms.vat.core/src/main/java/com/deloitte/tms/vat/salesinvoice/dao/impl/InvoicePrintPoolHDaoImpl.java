package com.deloitte.tms.vat.salesinvoice.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.DateUtils;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.vat.base.enums.InvoicePrintStatusEnums;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolH;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxD;
import com.deloitte.tms.vat.salesinvoice.dao.InvoicePrintPoolHDao;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolL;
/**
 * Home object for domain model class InvoicePrintPoolH.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Component(InvoicePrintPoolHDao.BEAN_ID)
public class InvoicePrintPoolHDaoImpl extends BaseDao<InvoicePrintPoolH> implements InvoicePrintPoolHDao{
	
	public DaoPage findInvoicePrintPoolHByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoicePrintPoolHQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	
	public DaoPage findInvoicePrintedPoolHByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoicePrintedPoolHQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	
	private void buildInvoicePrintedPoolHQuery(StringBuffer query,Map<String,Object> values,Map<String,Object> params) {
		query.append(" from InvoicePrintPoolH t where 1=1 ");
		Object value=params.get("status");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		
		value=params.get("invoiceCode");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and invoiceCode=:invoiceCode");
			values.put("invoiceCode", value);
		}
		
		value=params.get("invoiceNumber");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and invoiceNumber=:invoiceNumber");
			values.put("invoiceNumber", value);
		}
		value=params.get("legalEntityName");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and legalEntityName=:legalEntityName");
			values.put("legalEntityName", value);
		}
		
		value=params.get("invoiceCategory");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and invoiceCategory=:invoiceCategory");
			values.put("invoiceCategory", value);
		}
		
		value=params.get("invoiceReqType");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and invoiceReqType=:invoiceReqType");
			values.put("invoiceReqType", value);
		}
		
		value=params.get("invoicePrintStatus");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and invoicePrintStatus=:invoicePrintStatus");
			values.put("invoicePrintStatus", value);
		}
		
		
		//长江证券项目   不需要查询准备单和申请单
		value=params.get("project");
		if(AssertHelper.empty(value)){
			Object invoiceReqNumber=params.get("invoiceReqNumber");
			Object sBeginDate=params.get("sBeginDate"); 
			Object sEndDate=params.get("sEndDate");
			Object appOrgCode=params.get("appOrgCode");
			if(AssertHelper.notEmpty(appOrgCode)||AssertHelper.notEmpty(invoiceReqNumber)||AssertHelper.notEmpty(sBeginDate)||AssertHelper.notEmpty(sEndDate))
			{//准备单
				query.append(" and exists (select 1 from TmsCrvatInvoicePreH ci,InvoiceReqH invoice where ci.id=t.crvatInvoicePreHId and ci.crvatInvoiceReqHId=invoice.id");
				if(AssertHelper.notEmpty(invoiceReqNumber)){
					query.append(" and invoice.crvatInvoiceReqNumber=:crvatInvoiceReqNumber");
					values.put("crvatInvoiceReqNumber", invoiceReqNumber);
				}
				if(AssertHelper.notEmpty(sBeginDate)){
					query.append(" and invoice.invoiceReqDate>=:sBeginDate");
					values.put("sBeginDate", DateUtils.parse(sBeginDate.toString(), "yyyy-MM-dd"));
				}
				if(AssertHelper.notEmpty(sEndDate)){
					query.append(" and invoice.invoiceReqDate<=:sEndDate");
					
					Date tempdDate=DateUtils.parse(sEndDate.toString(), "yyyy-MM-dd");
					tempdDate.setHours(23);
					tempdDate.setMinutes(59);
					tempdDate.setSeconds(59);
					
					values.put("sEndDate", tempdDate);
				}
				if(AssertHelper.notEmpty(appOrgCode)){
					query.append(" and invoice.orgId=:appOrgCode");
					values.put("appOrgCode", appOrgCode);
				}
				query.append(") ");
			}
		}
		query.append(" and flag=:deletedFlag");
		values.put("deletedFlag", "1");
		
		
	}
	
	public List<InvoicePrintPoolH> findInvoicePrintPoolHByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoicePrintPoolHQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildInvoicePrintPoolHQuery(StringBuffer query,Map values,Map params) {
		query.append(" from InvoicePrintPoolH t where 1=1 ");
		Object value=params.get("status");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		
		value=params.get("invoiceCode");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and invoiceCode=:invoiceCode");
			values.put("invoiceCode", value);
		}
		
		value=params.get("invoiceNumber");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and invoiceNumber=:invoiceNumber");
			values.put("invoiceNumber", value);
		}
		value=params.get("legalEntityName");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and legalEntityName=:legalEntityName");
			values.put("legalEntityName", value);
		}
		
		value=params.get("invoiceCategory");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and invoiceCategory=:invoiceCategory");
			values.put("invoiceCategory", value);
		}
		value=params.get("invoiceReqType");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and invoiceReqType=:invoiceReqType");
			values.put("invoiceReqType", value);
		}
		
		value=InvoicePrintStatusEnums.PRINTED.getValue();
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and invoicePrintStatus!=:invoicePrintStatus");
			values.put("invoicePrintStatus", value);
		}

		//长江证券项目   不需要查询准备单和申请单
		value=params.get("project");
		if(AssertHelper.empty(value)){
			Object invoiceReqNumber=params.get("invoiceReqNumber");
			Object sBeginDate=params.get("sBeginDate"); 
			Object sEndDate=params.get("sEndDate");
			Object appOrgCode=params.get("appOrgCode");
			if(AssertHelper.notEmpty(appOrgCode)||AssertHelper.notEmpty(invoiceReqNumber)||AssertHelper.notEmpty(sBeginDate)||AssertHelper.notEmpty(sEndDate))
			{//准备单
				query.append(" and exists (select 1 from TmsCrvatInvoicePreH ci,InvoiceReqH invoice where ci.id=t.crvatInvoicePreHId and ci.crvatInvoiceReqHId=invoice.id");
				if(AssertHelper.notEmpty(invoiceReqNumber)){
					query.append(" and invoice.crvatInvoiceReqNumber=:crvatInvoiceReqNumber");
					values.put("crvatInvoiceReqNumber", invoiceReqNumber);
				}
				if(AssertHelper.notEmpty(sBeginDate)){
					query.append(" and invoice.invoiceReqDate>=:sBeginDate");
					values.put("sBeginDate", DateUtils.parse(sBeginDate.toString(), "yyyy-MM-dd"));
				}
				if(AssertHelper.notEmpty(sEndDate)){
					query.append(" and invoice.invoiceReqDate<=:sEndDate");
					Date tempdDate=DateUtils.parse(sEndDate.toString(), "yyyy-MM-dd");
					tempdDate.setHours(23);
					tempdDate.setMinutes(59);
					tempdDate.setSeconds(59);
					values.put("sEndDate", tempdDate);
				}
				if(AssertHelper.notEmpty(appOrgCode)){
					query.append(" and invoice.orgId=:appOrgCode");
					values.put("appOrgCode", appOrgCode);
				}
				query.append(") ");
			}
		}
		
		query.append(" and flag=:deletedFlag");
		values.put("deletedFlag", "1");
	}
	public DaoPage findInvoicePrintPoolLByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoicePrintPoolLQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<InvoicePrintPoolL> findInvoicePrintPoolLByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoicePrintPoolLQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildInvoicePrintPoolLQuery(StringBuffer query,Map values,Map params) {
		query.append(" from InvoicePrintPoolL where 1=1 ");
		Object value=params.get("invoicePrtPoolHId");
		if(value!=null&&!"".equals(value))
		{
			value=value.toString();
			query.append(" and invoicePrtPoolHId=:invoicePrtPoolHId");
			values.put("invoicePrtPoolHId", value);
		}
		value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
	}

	@Override
	public InvoicePrintPoolH getInvoicePrintPool(String invoiceCode,String invoiceNumber) {
		AssertHelper.notEmpty_assert(invoiceNumber, "发票号码不能为空");
		AssertHelper.notEmpty_assert(invoiceCode, "发票编码不能为空");
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		query.append(" from InvoicePrintPoolH where 1=1 ");
		query.append(" and invoiceNumber=:invoiceNumber");
		values.put("invoiceNumber", invoiceNumber);
		query.append(" and invoiceCode=:invoiceCode");
		values.put("invoiceCode", invoiceCode);
		List<InvoicePrintPoolH> temps=findBy(query,values);
		if(temps.size()>0){
			return temps.get(0);
		}else {
			return null;
		}
	}

	@Override
	public DaoPage findSqlQueryInvoicePrintPoolHByParams(Map params,
			Integer pageIndex, Integer pageSize) {
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoicePrintPoolHSqlQuery(query, values, params);
		DaoPage daoPage= pageBySql(query, values, pageIndex, pageSize);
		return daoPage;
	}
	/**
	 * 通过SQL查询
	 * @param query
	 * @param values
	 * @param params
	 */
	private void buildInvoicePrintPoolHSqlQuery(StringBuffer query,Map values,Map params) {
		
		query.append("select temp.crvat_invoice_pre_number,prt.invoice_prt_pool_h_id,prt.invoice_category");
		query.append(",prt.invoice_code,prt.invoice_number,prt.invoice_req_type,prt.invoice_print_status");
		query.append(",prt.customer_number,temp.org_id,prt.equipment_id,prt.equipment_code,prt.equipment_name");
		query.append(",prt.cust_registration_Code,prt.cust_registration_number,prt.Legal_Entity_Name,prt.Invoice_Print_By,prt.Invoice_Print_Date");
		query.append(",temp.crvat_invoice_req_number,prtl.invoice_amount,prtl.vat_amount,prtl.acctd_amount_cr");
		
		query.append(" from tms_crvat_inv_prt_pool_h prt left join(");
				query.append(" select prt_temp.invoice_prt_pool_h_id,sum(prt_temp.invoice_amount) as invoice_amount,sum(prt_temp.vat_amount) as vat_amount,sum(prt_temp.acctd_amount_cr) as acctd_amount_cr  from tms_crvat_inv_prt_pool_l prt_temp");
				query.append(" where 1=1  group by prt_temp.invoice_prt_pool_h_id");
				query.append(" )  prtl");
		query.append("  on prt.invoice_prt_pool_h_id=prtl.invoice_prt_pool_h_id,(");
//		query.append(" from tms_crvat_inv_prt_pool_h prt  ,(");
		query.append(" select req.org_id,pre.crvat_invoice_pre_number,pre.crvat_invoice_req_h_id,pre.crvat_invoice_pre_h_id,req.crvat_invoice_req_number from  tms_crvat_invoice_pre_h pre left join tms_crvat_invoice_req_h req ")
			.append(" on pre.crvat_invoice_req_h_id=req.crvat_invoice_req_h_id ");
		
		Object invoiceReqNumber=params.get("invoiceReqNumber");
		Object sBeginDate=params.get("sBeginDate"); 
		Object sEndDate=params.get("sEndDate");
		Object appOrgCode=params.get("appOrgCode");
		if(AssertHelper.notEmpty(appOrgCode)||AssertHelper.notEmpty(invoiceReqNumber)||AssertHelper.notEmpty(sBeginDate)||AssertHelper.notEmpty(sEndDate)){
			if(AssertHelper.notEmpty(invoiceReqNumber)){
				query.append(" and req.crvat_invoice_req_number=:crvatInvoiceReqNumber");
				values.put("crvatInvoiceReqNumber", invoiceReqNumber);
			}
			
			if(AssertHelper.notEmpty(sBeginDate)){
				query.append(" and req.invoice_req_date>=:sBeginDate");
				values.put("sBeginDate", DateUtils.parse(sBeginDate.toString(), "yyyy-MM-dd"));
			}
			/*if(AssertHelper.notEmpty(sBeginDate)){
				query.append(" and to_char(req.invoice_req_date,'yyyy-mm-dd')>=:sBeginDate");
				//values.put("sBeginDate", DateUtils.parse(sBeginDate.toString(), "yyyy-MM-dd"));
				values.put("sBeginDate", sBeginDate);
			}*/
			if(AssertHelper.notEmpty(sEndDate)){
				query.append(" and req.invoice_req_date<=:sEndDate");
				Date tempdDate=DateUtils.parse(sEndDate.toString(), "yyyy-MM-dd");
				tempdDate.setHours(23);
				tempdDate.setMinutes(59);
				tempdDate.setSeconds(59);
				values.put("sEndDate", tempdDate);
			}
			
			/*if(AssertHelper.notEmpty(sEndDate)){
				query.append(" and to_char(req.invoice_req_date,'yyyy-mm-dd')<=:sEndDate");
				Date tempdDate=DateUtils.parse(sEndDate.toString(), "yyyy-MM-dd");
				tempdDate.setHours(23);
				tempdDate.setMinutes(59);
				tempdDate.setSeconds(59);
				values.put("sEndDate", sEndDate);
			}*/
			
			/*if(AssertHelper.notEmpty(appOrgCode)){
				query.append(" and req.org_id=:appOrgCode");
				values.put("appOrgCode", appOrgCode);
			}*/
		}
		query.append(") temp where prt.crvat_invoice_pre_h_id=temp.crvat_invoice_pre_h_id");
		
		Object value=params.get("status");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and prt.status=:status");
			values.put("status", value);
		}
		
		value=params.get("invoiceCode");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and prt.invoice_code=:invoiceCode");
			values.put("invoiceCode", value);
		}
		
		value=params.get("invoiceNumber");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and prt.invoice_Number=:invoiceNumber");
			values.put("invoiceNumber", value);
		}
		value=params.get("legalEntityName");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and prt.legal_Entity_Name=:legalEntityName");
			values.put("legalEntityName", value);
		}
		
		value=params.get("invoiceCategory");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and prt.invoice_Category=:invoiceCategory");
			values.put("invoiceCategory", value);
		}
		value=params.get("invoiceReqType");
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and prt.invoice_Req_Type=:invoiceReqType");
			values.put("invoiceReqType", value);
		}
		
		/*value=InvoicePrintStatusEnums.PRINTED.getValue();
		if(AssertHelper.notEmpty(value))
		{
			query.append(" and prt.invoice_Print_Status!=:invoicePrintStatus");
			values.put("invoicePrintStatus", value);
		}*/
		
	}
}

