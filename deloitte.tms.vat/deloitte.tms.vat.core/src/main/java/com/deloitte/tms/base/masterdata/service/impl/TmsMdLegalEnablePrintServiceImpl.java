package com.deloitte.tms.base.masterdata.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
//TmsMdUsageLocalLegal
import com.deloitte.tms.base.masterdata.dao.TmsMdLegalEnablePrintDao;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEnablePrint;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEnablePrintInParam;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntity;
import com.deloitte.tms.base.masterdata.service.TmsMdLegalEnablePrintService;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.vat.core.common.FunctionTreeNode;
/**
 * Home object for domain model class TmsMdLegalEnablePrint.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdLegalEnablePrintService.BEAN_ID)
public class TmsMdLegalEnablePrintServiceImpl extends BaseService implements TmsMdLegalEnablePrintService{
	
	public static final String IDSPE="#xfxDeloitte#";
	
	@Resource
	TmsMdLegalEnablePrintDao tmsMdLegalEnablePrintDao;

	
	
	
	
	@Override
	public List<Map<String, Object>> listByFilter2Map(String orgClass, String filterClass, ArrayList<String> fieldList){
		
		List<Object[]>	legalList  = this.listByFilter(orgClass, filterClass, fieldList);
		
		
		return convertList2ComboxMap(legalList, fieldList);
	}
	
	public List<Object[]> listByFilter(String orgClass, String filterClass, ArrayList<String> fieldList){
		
		List<Object[]>	legalList  = tmsMdLegalEnablePrintDao.listByFilter( orgClass,  filterClass,  fieldList);
		
		return legalList;
	}
	
public List<Map<String, Object>> convertList2ComboxMap(List<Object[]> partLegalList, ArrayList<String> fieldList){
		
	    
	    List<Map<String, Object>> results = new ArrayList<Map<String,Object>>();
	    
	    try{
	    
	    if(partLegalList==null){
	    	
	    	return results;
	    }
	    

	    
	    Iterator<Object[]> iter =  partLegalList.iterator();
	   
	    while(iter.hasNext()){
	    	
	    	Object[] values = iter.next();
	    	
	    	Map<String, Object> map = new HashMap<String, Object>();
	    	
	    	int k=0;
	    	for(String s : fieldList){
	    		
	    		map.put( s  , values[k++]);
	    	}
	    	
		     
		       
		       results.add(map);
	    }
	    
	    
		}catch(Exception x){
			x.printStackTrace();
		}
	    
	    return results;
	}


@Override
public void removeByKeys(HashMap keysMap, String targetClassName){
	
	tmsMdLegalEnablePrintDao.removeByKeysUseFlag(keysMap, targetClassName);
}


/**
 * 
 *〈一句话功能简述〉 
 * 功能详细描述
 * @param modelList
 * @return
 * @see [相关类/方法]（可选）
 * @since [产品/模块版本] （可选）
 * @author tigchen
 */
public static List<FunctionTreeNode> generalConvertTreeNodeList4InPara(
		List<TmsMdLegalEnablePrintInParam> modelList) {
	
	System.out.println("convertTreeNodeList starting: ");
	
	List<FunctionTreeNode> nodes = null;

	if (modelList != null) {
		nodes = new ArrayList<FunctionTreeNode>();
		for (TmsMdLegalEnablePrintInParam modelOne : modelList) {
			FunctionTreeNode node = generalConvertTreeNode4InPara(modelOne);
			if (node != null) {
				nodes.add(node);
			}
		}
	}

	return nodes;
}


/**
 * 
 *〈一句话功能简述〉 
 * 功能详细描述
 * @param cla
 * @return
 * @see [相关类/方法]（可选）
 * @since [产品/模块版本] （可选）
 * @author tigchen
 */
public static FunctionTreeNode generalConvertTreeNode4InPara(TmsMdLegalEnablePrintInParam cla) {
	
	FunctionTreeNode node = null;
	try{
	System.out.println("convertTreeNode starting: ");
	
	if (cla != null) {
		node = new FunctionTreeNode();
			
		TmsMdLegalEnablePrintInParam useLoalLegInPara=null;
		
		if(cla instanceof TmsMdLegalEnablePrintInParam){
			
			useLoalLegInPara = (TmsMdLegalEnablePrintInParam)cla;
			
		}else{
			System.out.println("TmsMdLegalEnablePrintServiceImpl > TreeNode > generalConvertTreeNode get wrong class type "+cla.getClass());
			//to-do for other class's instance will write a common convert methord
			return null;
		}
		
				
		node.setId(useLoalLegInPara.getTmsMdLegalEnablePrint().getId());
		node.setPid(useLoalLegInPara.getTmsMdLegalEnablePrint().getParentId());
				
		node.setText(useLoalLegInPara.getLegalEntityName());
		
		
		 Map<String, Object> map = new HashMap<String, Object>();
		 
		 	map.put("des", useLoalLegInPara.getTmsMdLegalEnablePrint().getDes());
			map.put("isEnablePrint", useLoalLegInPara.getTmsMdLegalEnablePrint().getIsEnablePrint());
			map.put("enabledFlag", useLoalLegInPara.getTmsMdLegalEnablePrint().getEnabledFlag());
			map.put("effectDate", useLoalLegInPara.getTmsMdLegalEnablePrint().getEffectDate());
			map.put("quitDate", useLoalLegInPara.getTmsMdLegalEnablePrint().getQuitDate());
			//map.put("status", useLoalLegInPara.getTmsMdLegalEnablePrint().getStatus());
			map.put("legalEntityName", useLoalLegInPara.getLegalEntityName());//可能node.setText显示不同的东西				
			map.put("legalEntityId", useLoalLegInPara.getTmsMdLegalEnablePrint().getLegalEntityId());
			
			
			
		
			map.put("effectDateShow",    getStrByDate(useLoalLegInPara.getTmsMdLegalEnablePrint().getEffectDate()));
			map.put("quitDateShow", getStrByDate(useLoalLegInPara.getTmsMdLegalEnablePrint().getQuitDate()  )   );
			
		
			node.setAttributes(map);
	    
	    System.out.println("convertTreeNode: "+node);			

	}else{
		
		System.out.println("--generalConvertTreeNode-------- get null");
	}
	
	
	
}catch(Exception e){
	
	e.printStackTrace();
	
	System.out.println("----generalConvertTreeNode-------------"+e.getMessage());
	
	
}
	
	return node;
	
	
	
}


public static String getStrByDate(Date orgDate){
	
	if(AssertHelper.empty(orgDate)){
		
		return "";
	}
	

	try{
		
	//from jquery class="easyui-datebox" will return as format MM/dd/yyyy  2016-03-18 20:16:58.0

	/**
	 * 2016-03-18 20:16:58.0
	 * dow mon dd hh:mm:ss zzz yyyy
	 * mon is the month (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec). 
	 * 
	 */
	String orgDateStr = orgDate.toString();
	
	if(orgDateStr.split(" ").length > 5){
		//dow mon dd hh:mm:ss zzz yyyy
		
		String[] use = orgDateStr.split(" ");
		
		String mon = use[1];
		String dd = use[2];
		String yyyy = use[5];
		StringBuffer sb = new StringBuffer();
		sb.append(mon).append("/").append(dd).append("/").append(yyyy);
		
		return sb.toString();
	}else if(orgDateStr.split("-").length>1 ){
		//2016-03-18 20:16:58.0
		
		String value = orgDateStr.split(" ")[0];
		
		if(AssertHelper.empty(value)){
			return "";
		}else{
			
			String[] ok = value.split("-");
			
			StringBuffer sb = new StringBuffer();
			sb.append(ok[1]).append("/").append(ok[2]).append("/").append(ok[0]);
			
			return sb.toString();
		}
	}
	
	
	

	
	
	}catch(Exception e){
		e.printStackTrace();
		
		return "";
	}
	return "";		
	
}



/**
 * @author tigchen
 */
@Override
public List<FunctionTreeNode>  findModelInParaByDefault2Nodes(String mainTable, String extrTable){

	List<TmsMdLegalEnablePrintInParam> listInPara = this.findModelInParaByDefault(mainTable, extrTable);
	
	return generalConvertTreeNodeList4InPara(listInPara);
}
/**
 * @author tigchen
 */
@Override
public List<TmsMdLegalEnablePrintInParam>   findModelInParaByDefault(String mainTable, String extrTable){
	
/*
 * 	hpl.append( " select t1 , t2.legalEntityName from ").append( mainTable).append( "  t1 , ").append( extrTable).append(" t2").append( " where t1.flag='0' "    );
	
	hpl.append("  and t2.flag='0'  and t1.legalEntityId=t2.id");	
 */
	
	ArrayList<TmsMdLegalEnablePrintInParam> tmsMdLegalEnablePrintInParam = new ArrayList<TmsMdLegalEnablePrintInParam>();
	
	try {

		List<Object[]> resultSet = tmsMdLegalEnablePrintDao.findModelInParaByDefault( mainTable,  extrTable);

		for (Object[] result : resultSet) {
			
			TmsMdLegalEnablePrint tmsMdLegalEnablePrint = (TmsMdLegalEnablePrint)result[0];
			
			String legalEntityName = (String)result[1];
		
			
			tmsMdLegalEnablePrintInParam.add(new TmsMdLegalEnablePrintInParam(tmsMdLegalEnablePrint, legalEntityName));
		}

	}catch(Exception e){
		e.printStackTrace();
	}
	
	return tmsMdLegalEnablePrintInParam;
 
}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/**
	 * @author tigchen
	 */
	@Override
	public void execDelHqlDefault(HashMap map){
		

		
		StringBuffer sb = new StringBuffer();
		
		Set<String> key = map.keySet();
		
		StringBuffer sb1 = new StringBuffer();
		StringBuffer sb2 = new StringBuffer();
		
		int len = key.size();
		int index=0;
		for(String k : key){
			
			sb1.append(" ").append( k ).append("=:").append(k);
			
		//	sb2.append(" '").append( map.get(k) ).append("'");
			
			if(++index < len){
				sb1.append(" or ");
				
				//sb2.append(", ");
			}
		}
		
		
		sb.append(" update  ").append(TmsMdLegalEnablePrint.class.getName()).append(" set flag='0' ");
		
		sb.append(" where ");
		
		sb.append(sb1);
		
		
		
		System.out.println("execDelHqlDefault will run hql: "+ sb.toString());
		
		
		this.tmsMdLegalEnablePrintDao.executeHqlProduce(sb.toString(), map);
		
	
	}
	
	
	/**
	 * @author tigchen
	 */
	@Override
	public void execDelHqlDefaultTrue(HashMap map){
		

		String ids = (String)map.get("id");
		
		String[] idArray = ids.split(IDSPE);
		
		StringBuffer sb = new StringBuffer();
	
		
		StringBuffer sb1 = new StringBuffer();
		//StringBuffer sb2 = new StringBuffer();
		
		int len = idArray.length;
		int index=0;
		for(String k : idArray){
			
			sb1.append(" '").append( k ).append("'");
			
		//	sb2.append(" '").append( map.get(k) ).append("'");
			
			if(++index < len){
				sb1.append(" , ");
				
				//sb2.append(", ");
			}
		}
		
		
		sb.append(" delete from   ").append(TmsMdLegalEnablePrint.class.getName());
		
		sb.append(" where id in ( ");
		
		sb.append(sb1);
		
		sb.append("  )");
		
		
		System.out.println("execDelHqlDefault will run hql: "+ sb.toString());
		
		
		this.tmsMdLegalEnablePrintDao.executeHqlProduce(sb.toString(), new HashMap());
		
	
	}
	
	
	/**
	 * @author tigchen
	 * @param map
	 * 
	 * 没有的, HQl 不支持 insert 
	 */
	@Override
	public void execInsertHqlDefault( HashMap map){
		
		StringBuffer sb = new StringBuffer();
		
		Set<String> key = map.keySet();
		
		StringBuffer sb1 = new StringBuffer();
		StringBuffer sb2 = new StringBuffer();
		
		int len = key.size();
		int index=0;
		for(String k : key){
			
			sb1.append(" ").append( k );
			
			sb2.append(" '").append( map.get(k) ).append("'");
			
			if(++index < len){
				sb1.append(", ");
				
				sb2.append(", ");
			}
		}
		
		
		sb.append(" insert into ").append(TmsMdLegalEnablePrint.class.getName()).append("  ( ").append(sb1.toString()).append(" ) values ( ").append(sb2.toString());
		sb.append(" )");
		
		System.out.println("execInsertHqlDefault will run hql: "+ sb.toString());
		
		
		this.tmsMdLegalEnablePrintDao.executeHqlProduce(sb.toString(), map);
		
	}
	
	/**
	 * @author tigchen
	 */
	@Override	
	public void delModelByDefault(String targetClassName, String[] ids){
		
		try {
			for (String id : ids) {

				TmsMdLegalEnablePrint target = new TmsMdLegalEnablePrint(id);

				this.tmsMdLegalEnablePrintDao.delModelByDefaultUseRemove(target);

				// to-do if basodao do wrong.....will update by sql
			}

		}catch(Exception e){
			
			e.printStackTrace();
		}
	}
	
	/**
	 * @author tigchen
	 */
	@Override
	public List<TmsMdLegalEnablePrintInParam>   findModelInParaByDefault(){
		
	/*
	 * 	hpl.append( " select t1 , t2.legalEntityName from ").append( mainTable).append( "  t1 , ").append( extrTable).append(" t2").append( " where t1.flag='0' "    );
		
		hpl.append("  and t2.flag='0'  and t1.legalEntityId=t2.id");	
	 */
		
		ArrayList<TmsMdLegalEnablePrintInParam> tmsMdLegalEnablePrintInParam = new ArrayList<TmsMdLegalEnablePrintInParam>();
		
		try {

			List<Object[]> resultSet = tmsMdLegalEnablePrintDao.findModelInParaByDefault();

			for (Object[] result : resultSet) {
				
				TmsMdLegalEnablePrint tmsMdLegalEnablePrint = (TmsMdLegalEnablePrint)result[0];
				
				String legalEntityName = (String)result[1];
				
				tmsMdLegalEnablePrintInParam.add(new TmsMdLegalEnablePrintInParam(tmsMdLegalEnablePrint, legalEntityName));
			}

		}catch(Exception e){
			e.printStackTrace();
		}
		
		return tmsMdLegalEnablePrintInParam;
	 
	}
	
	@Override
	public IDao getDao() {
		return tmsMdLegalEnablePrintDao;
	}

	@Override
	public DaoPage findTmsMdLegalEnablePrintByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsMdLegalEnablePrintDao.findTmsMdLegalEnablePrintByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsMdLegalEnablePrintToInParam((List<TmsMdLegalEnablePrint>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TmsMdLegalEnablePrintInParam> findTmsMdLegalEnablePrintByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsMdLegalEnablePrint> temp= tmsMdLegalEnablePrintDao.findTmsMdLegalEnablePrintByParams(params);
		return convertTmsMdLegalEnablePrintToInParam(temp);
	}
	@Override
	public void saveTmsMdLegalEnablePrintDataListsMap(Map dataListsMap) {
		Collection<TmsMdLegalEnablePrintInParam> deleteList = BatchUtils.to(TmsMdLegalEnablePrintInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsMdLegalEnablePrintInParam> insertList =  BatchUtils.to(TmsMdLegalEnablePrintInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsMdLegalEnablePrintInParam> updateList =  BatchUtils.to(TmsMdLegalEnablePrintInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsMdLegalEnablePrintInParam inParam: updateList){
				TmsMdLegalEnablePrint entity=convertTmsMdLegalEnablePrintInParamToEntity(inParam);
				tmsMdLegalEnablePrintDao.update(entity);
			}		
//			tmsMdLegalEnablePrintDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsMdLegalEnablePrintInParam inParam: insertList){
				TmsMdLegalEnablePrint entity=convertTmsMdLegalEnablePrintInParamToEntity(inParam);
				tmsMdLegalEnablePrintDao.save(entity);
				//inParam.setId(entity.getId());
			}
//			tmsMdLegalEnablePrintDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsMdLegalEnablePrintInParam inParam:deleteList){
				TmsMdLegalEnablePrint entity=new TmsMdLegalEnablePrint();
				//entity.setId(inParam.getId());
				tmsMdLegalEnablePrintDao.remove(entity);
			}
//			tmsMdLegalEnablePrintDao.removeAll(deleteList);
		}
		
	}
	private List<TmsMdLegalEnablePrintInParam> convertTmsMdLegalEnablePrintToInParam(List<TmsMdLegalEnablePrint> models){
		List<TmsMdLegalEnablePrintInParam> result=new ArrayList<TmsMdLegalEnablePrintInParam>();
		for(TmsMdLegalEnablePrint initiation:models){
			TmsMdLegalEnablePrintInParam inparam=convertTmsMdLegalEnablePrintToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TmsMdLegalEnablePrintInParam convertTmsMdLegalEnablePrintToInParam(TmsMdLegalEnablePrint model){
		TmsMdLegalEnablePrintInParam inparam=new TmsMdLegalEnablePrintInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TmsMdLegalEnablePrint convertTmsMdLegalEnablePrintInParamToEntity(TmsMdLegalEnablePrintInParam inParam){
		TmsMdLegalEnablePrint entity=new TmsMdLegalEnablePrint();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	public TmsMdLegalEnablePrint findTmsMdLegalEnablePrint(Map params)
	{
		Object value=params.get("tmsMdLegalEnablePrintId");
		AssertHelper.notEmpty_assert("TmsMdLegalEnablePrint关联主键不能为空");
		TmsMdLegalEnablePrint tmsMdLegalEnablePrint=(TmsMdLegalEnablePrint) tmsMdLegalEnablePrintDao.get(TmsMdLegalEnablePrint.class, Long.parseLong(value.toString()));
		//return tmsMdLegalEnablePrintDao.findTmsMdLegalEnablePrint(params);
		//??????????to inpara  TmsMdLegalEnablePrint result= tmsMdLegalEnablePrint.getTmsMdLegalEnablePrint();
		if(tmsMdLegalEnablePrint==null)
		{
			tmsMdLegalEnablePrint=new TmsMdLegalEnablePrint();
		}
		return tmsMdLegalEnablePrint;
	}
	public TmsMdLegalEntity findTmsMdLegalEntity(Map params)
	{
		Object value=params.get("tmsMdLegalEnablePrintId");
		AssertHelper.notEmpty_assert("TmsMdLegalEntity关联主键不能为空");
		//TmsMdLegalEnablePrint tmsMdLegalEnablePrint=(TmsMdLegalEnablePrint) tmsMdLegalEnablePrintDao.get(TmsMdLegalEnablePrint.class, Long.parseLong(value.toString()));
		return tmsMdLegalEnablePrintDao.findTmsMdLegalEntity(params);
	/*	TmsMdLegalEntity result= tmsMdLegalEnablePrint.getTmsMdLegalEntity();
		if(tmsMdLegalEnablePrint==null)
		{
			tmsMdLegalEnablePrint=tmsMdLegalEnablePrint
		}
		return tmsMdLegalEnablePrint;*/
	}
}

