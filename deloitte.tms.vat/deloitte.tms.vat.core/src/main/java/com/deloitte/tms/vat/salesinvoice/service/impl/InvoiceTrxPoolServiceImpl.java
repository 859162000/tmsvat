package com.deloitte.tms.vat.salesinvoice.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.base.cache.model.BizOrgNode;
import com.deloitte.tms.base.cache.model.LegalEntityNode;
import com.deloitte.tms.base.cache.utils.LegalEntityCacheUtils;
import com.deloitte.tms.base.cache.utils.OrgCacheUtils;
import com.deloitte.tms.base.masterdata.model.Client;
import com.deloitte.tms.base.masterdata.model.ClientInParam;
import com.deloitte.tms.base.masterdata.model.Customer;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntity;
import com.deloitte.tms.base.masterdata.model.TmsMdTaxTrxType;
import com.deloitte.tms.base.taxsetting.model.Items;
import com.deloitte.tms.base.taxsetting.model.TmsMdInventoryItems;
import com.deloitte.tms.pl.cache.utils.DictionaryCacheUtils;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.DateUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.vat.base.enums.CrvatTaxPoolStatuEnums;
import com.deloitte.tms.vat.core.common.IdGenerator;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceReqL;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxPool;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxPool;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxPoolInParam;
import com.deloitte.tms.vat.salesinvoice.model.TempTmsCrvatInvoiceReqL;
import com.deloitte.tms.vat.salesinvoice.dao.InvoiceTrxPoolDao;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceTrxPoolService;
/**
 * Home object for domain model class InvoiceTrxPool.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Component(InvoiceTrxPoolService.BEAN_ID)
public class InvoiceTrxPoolServiceImpl extends BaseService implements InvoiceTrxPoolService{
	@Resource
	InvoiceTrxPoolDao invoiceTrxPoolDao;

	@Override
	public IDao getDao() {
		return invoiceTrxPoolDao;
	}
	@Override
	public DaoPage findInvoiceTrxPoolByParams(Map<String,Object> params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap<String,Object>();
		}			
		DaoPage daoPage= invoiceTrxPoolDao.findInvoiceTrxPoolByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertInvoiceTrxPoolToInParam((List<InvoiceTrxPool>) daoPage.getResult()));
		return daoPage; 
	}
	
	public DaoPage findInvoiceTrxPoolByParams4Query(Map params, Integer pageIndex, Integer pageSize){
		DaoPage daoPage= invoiceTrxPoolDao.findInvoiceTrxPoolByParams4Query(params, pageIndex, pageSize);
		daoPage.setResult(convertInvoiceTrxPoolToInParam((List<InvoiceTrxPool>) daoPage.getResult()));
		return daoPage;
	}
	
	private List<InvoiceTrxPoolInParam> convertInvoiceTrxPoolToInParam(List<InvoiceTrxPool> models){
		List<InvoiceTrxPoolInParam> result=convertInvoiceTrxPoolToInParam2(models);
		return result;
	}
	private List<InvoiceTrxPoolInParam> convertInvoiceTrxPoolToInParam2(List<InvoiceTrxPool>models){
		List<InvoiceTrxPoolInParam> result=new ArrayList<InvoiceTrxPoolInParam>();
		for(InvoiceTrxPool initiation:models){
			InvoiceTrxPoolInParam inparam=convertInvoiceTrxPoolToInParam(initiation);
			//InvoiceTrxPoolInParam inparam=new InvoiceTrxPoolInParam();
			inparam.setTempId(initiation.getTempId());
			inparam.setTaxRate(null!=initiation.getTaxRate()?initiation.getTaxRate():0.00);
			inparam.setTrxAffirmId(initiation.getTrxAffirmId());
			inparam.setTrxBatchNum(initiation.getTrxBatchNum());
			inparam.setTrxNumber(initiation.getTrxNumber());
			inparam.setSourceCode(initiation.getSourceCode());
			inparam.setCustRegistrationCode(initiation.getCustRegistrationCode());
			inparam.setCustRegistrationNumber(initiation.getCustRegistrationNumber());
			inparam.setCustBankAccountNum(initiation.getCustBankAccountNum());
			inparam.setCustBankBranchName(initiation.getCustBankBranchName());
			inparam.setTaxRate(initiation.getTaxRate());
			inparam.setTaxBaseName(initiation.getTaxBaseName());
			inparam.setTaxSettingMethod(initiation.getTaxSettingMethod());
			inparam.setInvoiceCategoryName(DictionaryCacheUtils.getCodeName("VAT_INVOICE_RULE", initiation.getInvoiceCategory()));
			inparam.setLegalEntityName(initiation.getLegalEntityName());
			inparam.setRegistrationNumber(initiation.getRegistrationNumber());
			/*InvoiceReqLInParam amountInParam=getAmout(initiation.getId(),initiation);
			inparam.setUsedAmount(amountInParam.getUsedAmount());
			inparam.setUserfulAmount(amountInParam.getUserfulAmount());*/
			if(AssertHelper.isOrNotEmpty_assert(initiation.getCustomerId())){
				Customer customer = (Customer) get(Customer.class, initiation.getCustomerId());
				inparam.setCustomerNumber(customer.getCustomerNumber());
				inparam.setCustomerName(customer.getCustomerName());
			}
			inparam.setCrvatTrxPoolId(initiation.getId());
			inparam.setInvoiceAmount(initiation.getExchangeAmount());
			//inparam.setInvoiceAmount(null!=initiation.getCurrencyAmount()?initiation.getCurrencyAmount():BigDecimal.valueOf(0.00).multiply(null!=initiation.getExchangeRate()?initiation.getExchangeRate():BigDecimal.valueOf(0.00)));
			if(AssertHelper.isOrNotEmpty_assert(initiation.getOrgId())){
				BizOrgNode node=OrgCacheUtils.getNodeByOrgId(initiation.getOrgId());
				if(null!=node){
					inparam.setOrgName(node.getName());
					inparam.setOrgCode(node.getCode());	
				}
			}
			// TO DO
			String codeValue = initiation.getStatus();
			if(AssertHelper.isOrNotEmpty_assert(codeValue)){
				String valueName = DictionaryCacheUtils.getCodeName("VAT_CR_INVOICE_TRX_ITEM_STATUS", codeValue); 
				inparam.setStatus(valueName);
			}
			if(AssertHelper.isOrNotEmpty_assert(initiation.getTaxTrxTypeId())){
				TmsMdTaxTrxType trxType=(TmsMdTaxTrxType)get(TmsMdTaxTrxType.class, initiation.getTaxTrxTypeId());
				if(null!=trxType){
					inparam.setTaxTrxTypeCode(trxType.getTaxTrxTypeCode());
					inparam.setTaxTrxTypeName(trxType.getTaxTrxTypeName());
				}
			}
			if(AssertHelper.isOrNotEmpty_assert(initiation.getInventoryItemId())){
				TmsMdInventoryItems items = (TmsMdInventoryItems) this.get(TmsMdInventoryItems.class, initiation.getInventoryItemId());
				if(null!=items){
					inparam.setInventoryItemNumber(initiation.getInventoryItemNumber());
					inparam.setInventoryItemDescripton(items.getInventoryItemDescripton());
				}
			}
			if(AssertHelper.isOrNotEmpty_assert(initiation.getLegalEntityId())){
				TmsMdLegalEntity entity=(TmsMdLegalEntity) this.get(TmsMdLegalEntity.class, initiation.getLegalEntityId());
				if(null!=entity){
					inparam.setLegalEntityCode(entity.getLegalEntityCode());
					inparam.setLegalEntityName(entity.getLegalEntityName());
				}
			}
			result.add(inparam);
		}
		return result;
		
	}
	public InvoiceTrxPoolInParam convertInvoiceTrxPoolToInParam(InvoiceTrxPool model){
		InvoiceTrxPoolInParam inparam=new InvoiceTrxPoolInParam();
		ReflectUtils.copyProperties(model, inparam);
		
		inparam.setPeriodName(model.getPeriodName());
		inparam.setTrxEventId(model.getTrxEventId());
		inparam.setGlDate(model.getGlDate());
		//inparam.setHaveTotalAmount(model.???);    --已开票金额
		//inparam.setRemainAmount(model.???);   --未开票金额
		
		
		inparam.setProductName(model.getInventoryItemDescripton());
		inparam.setProductNum(model.getInventoryItemNumber());
		String value = model.getTaxBaseCode();
		String text = DictionaryCacheUtils.getCodeName("VAT_TAX_CAL_BASE", value);
		inparam.setTaxBaseName(text);
		
		value = model.getInvoiceCategory();
	    text = DictionaryCacheUtils.getCodeName("VAT_INVOICE_RULE", value);
		inparam.setInvoiceCategoryName(text);
		
		value = model.getInvoiceType();
	    text = DictionaryCacheUtils.getCodeName("VAT_BIZ_SCOPE_TYPE", value);
		inparam.setInvoiceTypeName(text);
		
		value = model.getTaxSettingMethod();
	    text = DictionaryCacheUtils.getCodeName("BASE_TAX_METHOD", value);
		inparam.setTaxSettingMethodName(text);
		
		value = model.getSourceCode();
	    //text = DictionaryCacheUtils.getCodeName("VAT_TRX_ITEM_DATA_SOURCE", value);
		//inparam.setSourceCodeName(text);
		inparam.setSourceCodeName(value);
		
		String status = model.getStatus();
		String statusStr = DictionaryCacheUtils.getCodeName("VAT_CR_INVOICE_TRX_ITEM_STATUS", status);
		inparam.setStrStatus(statusStr);
		//BizOrgNode bizOrgNode = OrgCacheUtils.getNodeByOrgId(model.getOrgId());
		/*LegalEntityNode legalEntityNode = LegalEntityCacheUtils.getLegalNodeByLegalId(model.getLegalEntityId());
		if(legalEntityNode!=null){
			inparam.setOrgName(legalEntityNode.getCode());
		}*/
		TmsMdLegalEntity tmsMdLegalEntity = model.getTmsMdLegalEntity();
		if(tmsMdLegalEntity!=null){
			inparam.setOrgName(tmsMdLegalEntity.getLegalEntityCode());
		}
		TmsMdTaxTrxType tmsMdTaxTrxType = model.getTmsMdTaxTrxType();
		if(tmsMdTaxTrxType!=null){
			inparam.setTaxTrxTypeName(tmsMdTaxTrxType.getTaxTrxTypeName());
			inparam.setTaxTrxTypeCode(tmsMdTaxTrxType.getTaxTrxTypeCode());
		}
		Customer customer = model.getCustomer();
		if(customer!=null){
			inparam.setCustomerName(customer.getCustomerName());
			inparam.setCustomerNumber(customer.getCustomerNumber());
			inparam.setCustomerRegisTrationNum(customer.getCustRegistrationNumber());
			String customerType = DictionaryCacheUtils.getCodeName("VAT_CUSTOMER_DISC_OPTION", customer.getCustomerType());
			inparam.setCustomerNumbType(customerType);;
		}
		Items taxItems = model.getTaxItems();
		if(taxItems!=null){
			inparam.setTaxItem(taxItems.getItemName());
		}
		BigDecimal origAmount = model.getOriginalCurrencyAmount();
		if(origAmount!=null){
			String origAmountStr = String.valueOf(origAmount);
			inparam.setOrigAmount(origAmountStr);
		}
		
		Date rateDate = model.getRateDate();
		if(rateDate!=null) {
			Date dateString = DateUtils.formatDate(rateDate, "yyyy-MM-dd");
			inparam.setRateDate(dateString);
		}
		
		String origCurrency = DictionaryCacheUtils.getCodeName("BASE_CURRENCY_TYPE", model.getOriginalCurrencyCode());
		inparam.setOrigCurrent(origCurrency);
		BigDecimal currentAmount = model.getCurrencyAmount();
		if(currentAmount!=null){
			String currentAmountString = String.valueOf(currentAmount);
			inparam.setCurrentAmount(currentAmountString);
		}
		String currency = DictionaryCacheUtils.getCodeName("BASE_CURRENCY_TYPE", model.getCurrencyCode());
		inparam.setCurrent(currency);
		
		BigDecimal exchangeRate = model.getExchangeRate();
		if(exchangeRate!=null) {
			inparam.setExchangeRate(exchangeRate);
		}
		
		BigDecimal exchangeAmount = model.getExchangeAmount();
		if(exchangeAmount!=null){
			String exchangeAmountString = String.valueOf(exchangeAmount);
			inparam.setTotalAmount(exchangeAmountString);
		} else {
			if(exchangeRate!=null) {
				exchangeAmount = exchangeRate.multiply(origAmount);
			}
		}
		inparam.setExchangeAmount(exchangeAmount);
		
		return inparam;
	}

	
	/**   
	 * @param map  
	 * @see com.deloitte.tms.vat.salesinvoice.service.InvoiceTrxPoolService#saveInvoiceTrxPoolList(java.util.Map)  
	 */
	
	@Override
	public void saveInvoiceTrxPoolList(Map<String, InvoiceTrxPool> map) {
		// TODO Auto-generated method stub
		Collection<InvoiceTrxPoolInParam> deleteList = BatchUtils.to(InvoiceTrxPoolInParam.class).getDeleteEntities(map);
		Collection<InvoiceTrxPoolInParam> insertList =  BatchUtils.to(InvoiceTrxPoolInParam.class).getInsertEntities(map);
		Collection<InvoiceTrxPoolInParam> updateList =  BatchUtils.to(InvoiceTrxPoolInParam.class).getModifiedEntities(map);
		if (updateList != null&&updateList.size() > 0) {
			for(InvoiceTrxPoolInParam inParam: updateList){
				InvoiceTrxPool entity=convertInvoiceTrxPoolInParamToEntity(inParam);
				invoiceTrxPoolDao.update(entity);
			}		
		}
		if (insertList != null&&updateList.size() > 0) {
			for(InvoiceTrxPoolInParam inParam: updateList){
				InvoiceTrxPool entity=convertInvoiceTrxPoolInParamToEntity(inParam);
				invoiceTrxPoolDao.save(entity);
				inParam.setId((String)entity.getId());
			}		
		}
		if (deleteList != null&&updateList.size() > 0) {
			for(InvoiceTrxPoolInParam inParam: updateList){
				InvoiceTrxPool entity=convertInvoiceTrxPoolInParamToEntity(inParam);
				entity.setId((String)inParam.getId());
				invoiceTrxPoolDao.remove(entity);
			}		
		}
	}
	
	public InvoiceTrxPool convertInvoiceTrxPoolInParamToEntity(InvoiceTrxPoolInParam inParam){
		InvoiceTrxPool entity=new InvoiceTrxPool();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}

	
	/**   
	 * @param map  
	 * @see com.deloitte.tms.vat.salesinvoice.service.InvoiceTrxPoolService#saveInvoiceTrxPool(java.util.Map)  
	 */
	
	@Override
	public void saveInvoiceTrxPool(Map<String, InvoiceTrxPool> map) {
		InvoiceTrxPool deleteEntity = map.get("DELETE");
		InvoiceTrxPool insertEntity = map.get("INSERT");
		InvoiceTrxPool updateEntity = map.get("MODIFIED");
		if(deleteEntity!=null) {
			invoiceTrxPoolDao.remove(deleteEntity);
		}
		if(insertEntity!=null) {
			invoiceTrxPoolDao.save(insertEntity);
		}
		if(updateEntity!=null) {
			invoiceTrxPoolDao.update(updateEntity);
		}
	}

	
	/**   
	 * @param map
	 * @return  
	 * @see com.deloitte.tms.vat.salesinvoice.service.InvoiceTrxPoolService#getAlltransaction(java.util.Map)  
	 */
	
	@Override
	public List<InvoiceTrxPoolInParam> getAlltransaction(Map<String, Object> map) {
		List<InvoiceTrxPool>list=invoiceTrxPoolDao.getAlltransaction(map);
		List<InvoiceTrxPoolInParam>rList=convertInvoiceTrxPoolToInParam(list);
		return rList;
	}

	@Override
	public void insertTempTmsCrvatReqL(List<InvoiceTrxPoolInParam> list) {
		// TODO Auto-generated method stub
		for(InvoiceTrxPoolInParam inParam:list){
			TempTmsCrvatInvoiceReqL temp = new TempTmsCrvatInvoiceReqL();
			temp.setId(IdGenerator.getUUID());		
			temp.setInvoiceTrxId(inParam.getId());		
			temp.setInventoryItemDescription(inParam.getInventoryItemDescripton());
			temp.setInventoryItemNumber(inParam.getInventoryItemNumber());
			if(inParam.getInvoiceAmount()!=null){
				temp.setInvoiceAmount(inParam.getInvoiceAmount().toString());
			}
			temp.setInvoiceReqhId(inParam.getInvoicereqhid());
			temp.setLegalEntityCode(inParam.getLegalEntityCode());
			temp.setLegalEntityName(inParam.getLegalEntityName());
			temp.setOperatorUser(inParam.getOperatorUser());
			if(AssertHelper.isOrNotEmpty_assert(inParam.getOrgId())){
				BizOrgNode node=OrgCacheUtils.getNodeByOrgId(inParam.getOrgId());
				if(null!=node){
					temp.setOrgName(node.getName());
					temp.setOrgCode(node.getCode());	
				}
			}
			if(inParam.getTaxRate()!=null){
			    temp.setTaxRate(inParam.getTaxRate().toString());	
			}
			temp.setTaxTrxtypeCode(inParam.getTaxTrxTypeCode());
			temp.setTaxTrxtypeName(inParam.getTaxTrxTypeName());
			if(inParam.getTrxDate()!=null){
				String dateString = DateUtils.format("yyyy-MM-dd", inParam.getTrxDate());
				temp.setTrxDate(dateString);
			}
			temp.setTrxNumber(inParam.getTrxNumber());
			temp.setUseredAmount(inParam.getUsedAmount());
			temp.setUserfulAmount(inParam.getUserfulAmount());
			temp.setIsExitsCustomer(inParam.getIsExitsCustomer());
			this.save(temp);
			InvoiceTrxPool entity=(InvoiceTrxPool) this.get(InvoiceTrxPool.class, inParam.getId());
			entity.setStatus(inParam.getOperatorUser());
			this.update(entity);
		}
	}

	@Override
	public DaoPage findInvoiceTempReqLByParams(Map<String, Object> params,
			Integer pageIndex, Integer pageSize) {
		if(params==null)
		{
			params=new HashMap<String,Object>();
		}			
		DaoPage daoPage= invoiceTrxPoolDao.findInvoiceTempReqLByParams(params, pageIndex, pageSize);
		List<TempTmsCrvatInvoiceReqL> list = (List<TempTmsCrvatInvoiceReqL>) daoPage.getResult();
		List<InvoiceTrxPool> pools = new ArrayList<InvoiceTrxPool>();
		for(TempTmsCrvatInvoiceReqL temp:list){
			InvoiceTrxPool invoiceTrxPool = (InvoiceTrxPool) get(InvoiceTrxPool.class,temp.getInvoiceTrxId());
			invoiceTrxPool.setTempId(temp.getId());
			pools.add(invoiceTrxPool);
		}
		List<InvoiceTrxPoolInParam> inParams = convertInvoiceTrxPoolToInParam(pools);
		daoPage.setResult(inParams);
		return daoPage;
	}
	

	@Override
	public void addTrxPoolToReqH(Map<String, Object> map) {
		// TODO Auto-generated method stub
		List<InvoiceTrxPool> pools= invoiceTrxPoolDao.getAlltransaction(map);
		String invoicereqhid = (String) map.get("crvatInvoiceReqHId");
		for(InvoiceTrxPool pool:pools){
			InvoiceReqL invoiceReqL = convertInvoiceTrxPoolToInvoiceReqL(pool);
			invoiceReqL.setId(IdGenerator.getUUID());
			invoiceReqL.setCrvatInvoiceReqHId(invoicereqhid);
			invoiceReqL.setCrvatTrxPoolId(pool.getId());
			BigDecimal exchangeAmount = pool.getExchangeAmount();
			if(exchangeAmount!=null){
				String exchangeAmountStr = exchangeAmount.toString();
				invoiceReqL.setAttribute1(exchangeAmountStr);
			}
			invoiceTrxPoolDao.save(invoiceReqL);
			pool.setStatus(CrvatTaxPoolStatuEnums.APPFORM_USED.getValue());
			invoiceTrxPoolDao.update(pool);
		}
	}
	
	private InvoiceReqL convertInvoiceTrxPoolToInvoiceReqL(InvoiceTrxPool pool){	
			InvoiceReqL invoiceReqL = new InvoiceReqL();
			//invoiceReqL.setCrvatInvoiceReqHId(entity.getId());
			invoiceReqL.setLegalEntityId(pool.getLegalEntityId());
			invoiceReqL.setLegalEntityCode(pool.getLegalEntityCode());
			invoiceReqL.setLegalEntityName(pool.getLegalEntityName());
			invoiceReqL.setCrvatTrxPoolId(pool.getId());
			invoiceReqL.setTaxTrxTypeId(pool.getTaxTrxTypeId());
			invoiceReqL.setInventoryItemId(pool.getInventoryItemId());
			invoiceReqL.setInventoryItemDescripton(pool.getInventoryItemDescripton());
			invoiceReqL.setInventoryItemModels(pool.getInventoryItmeModels());
			invoiceReqL.setInventoryItemNumber(pool.getInventoryItemNumber());
			invoiceReqL.setInventoryItemQty(pool.getInventoryItemQty());
			invoiceReqL.setOrgId(pool.getOrgId());
			//invoiceReqL.setVatAmount(pool.get);
			if(!AssertHelper.isOrNotEmpty_assert(pool.getExchangeRate())){
				pool.setExchangeRate(BigDecimal.ZERO);			
			}
			if(!AssertHelper.isOrNotEmpty_assert(pool.getCurrencyAmount())){
				invoiceReqL.setInvoiceAmount(BigDecimal.ZERO);
			}else{
				invoiceReqL.setInvoiceAmount(pool.getCurrencyAmount().setScale(2, RoundingMode.HALF_UP));
			}
			if(!AssertHelper.isOrNotEmpty_assert(pool.getCurrencyAmountCr())){
				invoiceReqL.setAcctdAmountCr(BigDecimal.ZERO);
			}else{
				invoiceReqL.setAcctdAmountCr(pool.getCurrencyAmountCr().setScale(2, RoundingMode.HALF_UP));
			}
			if(AssertHelper.isOrNotEmpty_assert(pool.getCurrencyAmount())&&AssertHelper.isOrNotEmpty_assert(pool.getTaxRate())){
				BigDecimal vatAmount = pool.getCurrencyAmount().multiply(BigDecimal.valueOf(pool.getTaxRate()));
				vatAmount = vatAmount.setScale(2, RoundingMode.HALF_UP);
				invoiceReqL.setVatAmount(vatAmount);
			}else{
				invoiceReqL.setVatAmount(BigDecimal.ZERO);
			}					
			invoiceReqL.setInvoiceCategory(pool.getInvoiceCategory());
			invoiceReqL.setInvoiceType(pool.getInvoiceType());
			BigDecimal realBigDecimal = pool.getExchangeAmount();
			if(realBigDecimal!=null){
				realBigDecimal = realBigDecimal.setScale(2, RoundingMode.HALF_UP);
				String exchangeAmountStr = realBigDecimal.toString();
				invoiceReqL.setAttribute1(exchangeAmountStr);
			}
			
			
			/*invoiceReqL.setInvoiceAmount(((BigDecimal) (null!=pool.getCurrencyAmount()?pool.getCurrencyAmount():BigDecimal.valueOf(0.00))));
			invoiceReqL.setAcctdAmountCr(null!=pool.getCurrencyAmountCr()?pool.getCurrencyAmountCr():BigDecimal.valueOf(0.00));
			invoiceReqL.setVatAmount(((BigDecimal) (null!=pool.getCurrencyAmount()?pool.getCurrencyAmount():BigDecimal.valueOf(0.00)).multiply(null!=pool.getTaxRate()?BigDecimal.valueOf(pool.getTaxRate()):BigDecimal.valueOf(0.00))));*/
			return invoiceReqL;
		//}
	}

	@Override
	public void addTrxPoolToTempTmsCrvatReqL(Map<String, Object> map) {
		// TODO Auto-generated method stub
		List<InvoiceTrxPoolInParam> list= getAlltransaction(map);
		String invoicereqhid = (String) map.get("crvatInvoiceReqHId");
		String operatorUser = (String) map.get("operatoruser");		
		for(InvoiceTrxPoolInParam inParam:list){
			inParam.setInvoicereqhid(invoicereqhid);
			inParam.setOperatorUser(operatorUser);
		}
		insertTempTmsCrvatReqL(list);
	}

	@Override
	public void deleteTempCrvatInvoiceRelById(String[] ids) {
		// TODO Auto-generated method stub
		for(String id:ids){
			TempTmsCrvatInvoiceReqL tempTmsCrvatInvoiceReqL = (TempTmsCrvatInvoiceReqL) get(TempTmsCrvatInvoiceReqL.class, id);
			InvoiceTrxPool invoiceTrxPool = (InvoiceTrxPool) get(InvoiceTrxPool.class, tempTmsCrvatInvoiceReqL.getInvoiceTrxId());
			invoiceTrxPool.setStatus(CrvatTaxPoolStatuEnums.APPFORM_FREE.getValue());
			invoiceTrxPoolDao.deleteTempCrvatInvoiceReqLById(id);
		}
	}

	@Override
	public void deleteTempCrvatInvoiceRelByUserName(String currentUseName) {
		// TODO Auto-generated method stub
		invoiceTrxPoolDao.deleteTempCrvatInvoiceReqLByUserName(currentUseName);
	}
	
	
}

