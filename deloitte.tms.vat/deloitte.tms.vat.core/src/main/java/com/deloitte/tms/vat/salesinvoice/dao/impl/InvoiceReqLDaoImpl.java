package com.deloitte.tms.vat.salesinvoice.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceReqL;
import com.deloitte.tms.vat.salesinvoice.dao.InvoiceReqLDao;
/**
 * Home object for domain model class InvoiceReqL.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Component(InvoiceReqLDao.BEAN_ID)
public class InvoiceReqLDaoImpl extends BaseDao<InvoiceReqL> implements InvoiceReqLDao{
	public DaoPage findInvoiceReqLByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoiceReqLQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	public List<InvoiceReqL> findInvoiceReqLByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoiceReqLQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildInvoiceReqLQuery(StringBuffer query,Map values,Map params) {
		query.append(" from InvoiceReqL where 1=1 ");
		Object value=params.get("status");
		Object poolId= params.get("crvatTrxPoolId");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}if(poolId!=null){
			query.append(" and crvatTrxPoolId=:crvatTrxPoolId");
			values.put("crvatTrxPoolId", poolId);
		}if(AssertHelper.isOrNotEmpty_assert(params.get("crvatInvoiceReqHId"))){
			query.append(" and crvatInvoiceReqHId=:crvatInvoiceReqHId");
			values.put("crvatInvoiceReqHId", params.get("crvatInvoiceReqHId"));
		}
	}
	
	/**   
	 * @param poolId
	 * @return  
	 * @see com.deloitte.tms.vat.salesinvoice.dao.InvoiceReqLDao#findInvoiceReqLByPoolId(java.lang.String)  
	 */
	
	@Override
	public InvoiceReqL findInvoiceReqLByPoolId(String poolId) {
		Map params = new HashMap();
		params.put("crvatTrxPoolId", poolId);
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildInvoiceReqLQuery(query, values, params);
		return (InvoiceReqL) findBy(query, values).get(0);
	}
}

