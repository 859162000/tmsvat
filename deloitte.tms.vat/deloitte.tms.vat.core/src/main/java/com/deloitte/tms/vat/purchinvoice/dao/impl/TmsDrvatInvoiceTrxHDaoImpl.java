package com.deloitte.tms.vat.purchinvoice.dao.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.dao.impl.BaseDao;
import com.deloitte.tms.pl.security.utils.LittleUtils;
import com.deloitte.tms.vat.purchinvoice.dao.TmsDrvatInvoiceTrxHDao;
import com.deloitte.tms.vat.purchinvoice.model.TmsDrvatInvoiceTrxH;
import com.deloitte.tms.vat.purchinvoice.model.TmsDrvatInvoiceTrxL;
import com.deloitte.tms.vat.purchinvoice.model.TmsDrvatInvoiceTrxLInParam;
/**
 * Home object for domain model class TmsDrvatInvoiceTrxH.
 * @see com.deloitte.tms.vat.purchinvoice.model
 * @author Hibernate Tools
 */
@Component(TmsDrvatInvoiceTrxHDao.BEAN_ID)
public class TmsDrvatInvoiceTrxHDaoImpl extends BaseDao<TmsDrvatInvoiceTrxH> implements TmsDrvatInvoiceTrxHDao{
	public DaoPage findTmsDrvatInvoiceTrxHByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsDrvatInvoiceTrxHQuery(query, values, params);
		DaoPage daoPage = pageBy(query, values, pageIndex, pageSize);
		return daoPage;
	}
	public List<TmsDrvatInvoiceTrxH> findTmsDrvatInvoiceTrxHByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsDrvatInvoiceTrxHQuery(query, values, params);
		return findBy(query, values);
	}
	private void buildTmsDrvatInvoiceTrxHQuery(StringBuffer query,Map values,Map params) {
		//query.append(" from TmsDrvatInvoiceTrxH where  flag!=1 ");
		
		query.append(" from ").append(TmsDrvatInvoiceTrxH.class.getName()).append(" where  flag!='0' ");
		
		Object value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		
		Logger.getInstance(this.getClass()).debug("buildTmsDrvatInvoiceTrxHQuery query: "+query);
	}
	public DaoPage findTmsDrvatInvoiceTrxLByParams(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsDrvatInvoiceTrxLQuery(query, values, params);
		return pageBy(query, values, pageIndex, pageSize);
	}
	
	@Override
	public List<TmsDrvatInvoiceTrxL> findTmsDrvatInvoiceTrxLByParams(Map params)
	{
		StringBuffer query=new StringBuffer();
		Map values=new HashMap();
		buildTmsDrvatInvoiceTrxLQuery(query, values, params);
		return findBy(query, values);
	}
	
	private void buildTmsDrvatInvoiceTrxLQuery(StringBuffer query,Map values,Map params) {
		//query.append(" from TmsDrvatInvoiceTrxL where 1=1 and flag!=1 ");
		query.append(" from ").append( TmsDrvatInvoiceTrxL.class.getName() ).append( " where  flag!='0' ");
		
		Object value=params.get("tmsDrvatInvoiceTrxHId");  //should be invoiceTrxHId
		if(value!=null&&!"".equals(value))
		{
			value=Long.parseLong(value.toString());  // no need to long
			//query.append(" and tmsDrvatInvoiceTrxHId=:tmsDrvatInvoiceTrxHId");       should be invoiceTrxHId
			
			query.append(" and invoiceTrxHId=:invoiceTrxHId");
			values.put("invoiceTrxHId", value);
		}
		value=params.get("status");
		if(value!=null)
		{
			query.append(" and status=:status");
			values.put("status", value);
		}
		
		Logger.getInstance(this.getClass()).debug("buildTmsDrvatInvoiceTrxLQuery query: "+query);
	}
	
	
	/**
	 * @author tigchen
	 * this function using params directly, but before buildTmsDrvatInvoiceTrxLQuery
	 * just use part of params and missed other filter, no godd.
	 * so write buildTmsDrvatInvoiceTrxLQuery2.
	 * 功能详细描述
	 * @param query
	 * @param values
	 * @param params
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 */
	public void buildTmsDrvatInvoiceTrxLQuery2(StringBuffer query, Map params) {
		
		//todo: from query for exist must have 2 fields exist
		//query.append(" from TmsDrvatInvoiceTrxL where 1=1 and flag!=1 ");
		query.append(" from ").append( TmsDrvatInvoiceTrxL.class.getName() ).append( " where  flag=").append(LittleUtils.one);
		
		params.remove("pageIndex");
		params.remove("pageSize");
		params.remove("pageNumber");
	
		HashMap newMap = new HashMap();
		
		ArrayList<String> emptyValue= new ArrayList<String>();
		
		Set<String> keySet = params.keySet();
		for(String k : keySet){
			
			//value is empty but has key??
			
			if( AssertHelper.empty(params.get(k))  ){
				
				emptyValue.add(k);
				
			}else{
				newMap.put(k, params.get(k));
			}
			
			//query.append(" and ").append( k).append("=:").append(k);
		}
		
		Set<String> keySet2 = newMap.keySet();
		
		
		for(String k2 : keySet2){
			
			//value is empty but has key??

			//params.put(k2, newMap.get(k2));
			
		
			
			query.append(" and ").append( k2).append("=:").append(k2);
		}
		
		
		for(String s : emptyValue){
			params.remove(s);
		}
		
		System.out.println("buildTmsDrvatInvoiceTrxLQuery2 query: "+query);
		//Logger.getInstance(this.getClass()).debug("buildTmsDrvatInvoiceTrxLQuery2 query: "+query);
	}
	
	@Override
	public DaoPage findTmsDrvatInvoiceTrxLByParams2(Map params, Integer pageIndex,Integer pageSize)
	{
		StringBuffer query=new StringBuffer();
		//Map values=new HashMap();
		buildTmsDrvatInvoiceTrxLQuery2(query,  params);
		return pageBy(query, params, pageIndex, pageSize);
	}
	
	public void buildTmsDrvatInvoiceTrxLQuery4Date(StringBuffer query, Map params){
		

		//query.append(" from TmsDrvatInvoiceTrxL where 1=1 and flag!=1 ");
		query.append(" from ").append( TmsDrvatInvoiceTrxL.class.getName() ).append( " where  flag!='0' ");
		
		params.remove("pageIndex");
		params.remove("pageSize");
		params.remove("pageNumber");
		
		Set<String> keySet = params.keySet();
		for(String k : keySet){
			
			query.append(" and ").append( k).append(">:").append(k);
		}
		
		System.out.println("buildTmsDrvatInvoiceTrxLQuery2 query: "+query);
		//Logger.getInstance(this.getClass()).debug("buildTmsDrvatInvoiceTrxLQuery2 query: "+query);
	
	}
	
	@Override
	public List<TmsDrvatInvoiceTrxL> findTmsDrvatInvoiceTrxLByParams2(Map params)
	{
		StringBuffer query=new StringBuffer();
		//Map values=new HashMap();
		buildTmsDrvatInvoiceTrxLQuery2(query,  params);
		return findBy(query, params);
	}
	
	@Override
	public void writeBackAuthen(TmsDrvatInvoiceTrxLInParam record){
		
		/**
		 * 		record.setInvoiceAuthenticationStatus(this.fpztY);
		record.setAttribute2(this.fpxt1);
		record.setAttribute5("");
		 */
		StringBuffer sql=new StringBuffer();
		
		HashMap values = new HashMap();
		
		values.put("invoiceAuthenticationStatus", record.getInvoiceAuthenticationStatus());
		values.put("attribute2", record.getAttribute2());
		values.put("attribute5", record.getAttribute5());
		values.put("invoiceCode", record.getInvoiceCode());
		values.put("invoiceNumber", record.getInvoiceNumber());
		
		sql.append(" update ").append(TmsDrvatInvoiceTrxL.class.getName()).append(" set ");
		
		sql.append(" invoiceAuthenticationStatus=:").append("invoiceAuthenticationStatus").append(" ,");
		
		sql.append(" attribute2=:").append("attribute2").append(" ,");
		sql.append(" attribute5=:").append("attribute5").append(" ");
		
		sql.append(" where invoiceCode=:").append("invoiceCode");
		sql.append(" and ");
		sql.append("invoiceNumber=:").append("invoiceNumber");
		
		/**
		 * sb.append(one.getInvoiceCode()).append(sep);
					sb.append(one.getInvoiceNumber()).append(sep);
		 */
		
		System.out.println("writeBackAuthen > sql: "+ sql);
		this.executeHqlProduce(sql.toString(), values);
	}
	@Override
	public List<TmsDrvatInvoiceTrxL> findTmsDrvatInvoiceTrxLByDate(Map params) {
		StringBuffer query=new StringBuffer();
		//Map values=new HashMap();
		buildTmsDrvatInvoiceTrxLQuery4Date(query,  params);
		return findBy(query, params);
		
	}
	@Override
	public void removeTrxL(String ids) {
		// TODO Auto-generated method stub

		
		try{
			
		if(LittleUtils.strEmpty(ids)){
			return;
		}else{
			StringBuffer sb = new StringBuffer();
			
			sb.append(" update ").append(TmsDrvatInvoiceTrxL.class.getName());
			sb.append( "  set flag = ").append(LittleUtils.zero);
			sb.append("  where id in ( ");
			sb.append( ":ids" );
			sb.append(" ) "); 
			
			HashMap<String, String> m = new HashMap<String, String>();
			
			m.put("ids", ids);
			
			this.executeHqlProduce(sb.toString(), m);
			
		}
	}catch(Exception e){
		e.printStackTrace();
	}
		
	
	}
	
	
	@Override
	public List findExistsRecords (Map<String, String> params){
		
		if(params==null || params.size()<2){
			return null;
		}
		
		StringBuffer sb = new StringBuffer();
		sb.append(" select id from ").append( TmsDrvatInvoiceTrxL.class.getName()).append(" where ");
		
		sb.append(" flag=").append(LittleUtils.one);
		
		sb.append(" and invoiceCode=:invoiceCode and invoiceNumber=:invoiceNumber ");
		
		return findBy(sb, params);		
	}
	
}

