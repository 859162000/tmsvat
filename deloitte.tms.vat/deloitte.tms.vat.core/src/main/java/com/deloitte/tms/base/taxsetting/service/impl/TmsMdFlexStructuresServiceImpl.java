package com.deloitte.tms.base.taxsetting.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.base.taxsetting.dao.TmsMdFlexStructuresDao;
import com.deloitte.tms.base.taxsetting.dao.impl.TmsMdFlexValueSetsDaoImpl;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexSegments;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexSegmentsInParam;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexStructures;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexStructuresInParam;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValueSets;
import com.deloitte.tms.base.taxsetting.service.TmsMdFlexStructuresService;
/**
 * Home object for domain model class TmsMdFlexStructures.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdFlexStructuresService.BEAN_ID)
public class TmsMdFlexStructuresServiceImpl extends BaseService implements TmsMdFlexStructuresService{
	@Resource
	TmsMdFlexStructuresDao tmsMdFlexStructuresDao;

	@Override
	public IDao getDao() {
		return tmsMdFlexStructuresDao;
	}

	@Override
	public DaoPage findTmsMdFlexStructuresByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsMdFlexStructuresDao.findTmsMdFlexStructuresByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsMdFlexStructuresToInParam((List<TmsMdFlexStructures>) daoPage.getResult()));
		return daoPage;  
	}
	@Override
	public List<TmsMdFlexStructuresInParam> findTmsMdFlexStructuresByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsMdFlexStructures> temp= tmsMdFlexStructuresDao.findTmsMdFlexStructuresByParams(params);
		return convertTmsMdFlexStructuresToInParam(temp);
	}
	@Override
	public void saveTmsMdFlexStructuresDataListsMap(Map dataListsMap) {
		Collection<TmsMdFlexStructuresInParam> deleteList = BatchUtils.to(TmsMdFlexStructuresInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsMdFlexStructuresInParam> insertList =  BatchUtils.to(TmsMdFlexStructuresInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsMdFlexStructuresInParam> updateList =  BatchUtils.to(TmsMdFlexStructuresInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsMdFlexStructuresInParam inParam: updateList){
				TmsMdFlexStructures entity=convertTmsMdFlexStructuresInParamToEntity(inParam);
				tmsMdFlexStructuresDao.update(entity);
			}		
//			tmsMdFlexStructuresDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsMdFlexStructuresInParam inParam: insertList){
				TmsMdFlexStructures entity=convertTmsMdFlexStructuresInParamToEntity(inParam);
				tmsMdFlexStructuresDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsMdFlexStructuresDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsMdFlexStructuresInParam inParam:deleteList){
				TmsMdFlexStructures entity=new TmsMdFlexStructures();
				entity.setId(inParam.getId());
				tmsMdFlexStructuresDao.remove(entity);
			}
//			tmsMdFlexStructuresDao.removeAll(deleteList);
		}
		
	}
	private List<TmsMdFlexStructuresInParam> convertTmsMdFlexStructuresToInParam(List<TmsMdFlexStructures> models){
		List<TmsMdFlexStructuresInParam> result=new ArrayList<TmsMdFlexStructuresInParam>();
		for(TmsMdFlexStructures initiation:models){
		
			TmsMdFlexStructuresInParam inparam=convertTmsMdFlexStructuresToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TmsMdFlexStructuresInParam convertTmsMdFlexStructuresToInParam(TmsMdFlexStructures model){
		TmsMdFlexStructuresInParam inparam=new TmsMdFlexStructuresInParam();
		
	
		
		
		if(model.getTmsMdFlexSegments() != null && !"".equals(model.getTmsMdFlexSegments())){
			Collection<TmsMdFlexSegments> tmsMdFlexSegments = model.getTmsMdFlexSegments();
			for (TmsMdFlexSegments tmsMdFlexSegments2 : tmsMdFlexSegments) {
	
			}
			
		}
		
		
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TmsMdFlexStructures convertTmsMdFlexStructuresInParamToEntity(TmsMdFlexStructuresInParam inParam){
		TmsMdFlexStructures entity=new TmsMdFlexStructures();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
	
	
	
	
	
	@Override
	public DaoPage findTmsMdFlexSegmentsByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsMdFlexStructuresDao.findTmsMdFlexSegmentsByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsMdFlexSegmentsToInParam((List<TmsMdFlexSegments>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TmsMdFlexSegmentsInParam> findTmsMdFlexSegmentsByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsMdFlexSegments> temp= tmsMdFlexStructuresDao.findTmsMdFlexSegmentsByParams(params);
		return convertTmsMdFlexSegmentsToInParam(temp);
	}
	@Override
	public void saveTmsMdFlexSegmentsDataListsMap(Map dataListsMap) {
		Collection<TmsMdFlexSegmentsInParam> deleteList = BatchUtils.to(TmsMdFlexSegmentsInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsMdFlexSegmentsInParam> insertList =  BatchUtils.to(TmsMdFlexSegmentsInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsMdFlexSegmentsInParam> updateList =  BatchUtils.to(TmsMdFlexSegmentsInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsMdFlexSegmentsInParam inParam: updateList){
				TmsMdFlexSegments entity=convertTmsMdFlexSegmentsInParamToEntity(inParam);
				tmsMdFlexStructuresDao.update(entity);
			}		
//			tmsMdFlexStructuresDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsMdFlexSegmentsInParam inParam: insertList){
				TmsMdFlexSegments entity=convertTmsMdFlexSegmentsInParamToEntity(inParam);
				tmsMdFlexStructuresDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsMdFlexStructuresDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsMdFlexSegmentsInParam inParam:deleteList){
				TmsMdFlexSegments entity=new TmsMdFlexSegments();
				entity.setId(inParam.getId());
				tmsMdFlexStructuresDao.remove(entity);
			}
//			tmsMdFlexStructuresDao.removeAll(deleteList);
		}
	}
	private List<TmsMdFlexSegmentsInParam> convertTmsMdFlexSegmentsToInParam(List<TmsMdFlexSegments> models){
		List<TmsMdFlexSegmentsInParam> result=new ArrayList<TmsMdFlexSegmentsInParam>();
		for(TmsMdFlexSegments initiation:models){
			TmsMdFlexSegmentsInParam inparam=convertTmsMdFlexSegmentsToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TmsMdFlexSegmentsInParam convertTmsMdFlexSegmentsToInParam(TmsMdFlexSegments model){
		TmsMdFlexSegmentsInParam inparam=new TmsMdFlexSegmentsInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TmsMdFlexSegments convertTmsMdFlexSegmentsInParamToEntity(TmsMdFlexSegmentsInParam inParam){
		TmsMdFlexSegments entity=new TmsMdFlexSegments();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}
}

