package com.deloitte.tms.base.masterdata.service.impl;
// Generated by bo.wang with ling2.autoproject

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.BatchUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.service.impl.BaseService;
import com.deloitte.tms.base.masterdata.model.TmsMdTaxTrxType;
import com.deloitte.tms.base.masterdata.model.TmsMdTaxTrxTypeInParam;
import com.deloitte.tms.base.masterdata.dao.TmsMdTaxTrxTypeDao;
import com.deloitte.tms.base.masterdata.service.TmsMdTaxTrxTypeService;
/**
 * Home object for domain model class TmsMdTaxTrxType.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Component(TmsMdTaxTrxTypeService.BEAN_ID)
public class TmsMdTaxTrxTypeServiceImpl extends BaseService implements TmsMdTaxTrxTypeService{
	@Resource
	TmsMdTaxTrxTypeDao tmsMdTaxTrxTypeDao;

	@Override
	public IDao getDao() {
		return tmsMdTaxTrxTypeDao;
	}

	@Override
	public DaoPage findTmsMdTaxTrxTypeByParams(Map params, Integer pageIndex,
			Integer pageSize) {
		if(params==null)
		{
			params=new HashMap();
		}			
		DaoPage daoPage= tmsMdTaxTrxTypeDao.findTmsMdTaxTrxTypeByParams(params, pageIndex, pageSize);
		daoPage.setResult(convertTmsMdTaxTrxTypeToInParam((List<TmsMdTaxTrxType>) daoPage.getResult()));
		return daoPage;
	}
	@Override
	public List<TmsMdTaxTrxTypeInParam> findTmsMdTaxTrxTypeByParams(Map params) {
		if(params==null)
		{
			params=new HashMap();
		}
		List<TmsMdTaxTrxType> temp= tmsMdTaxTrxTypeDao.findTmsMdTaxTrxTypeByParams(params);
		return convertTmsMdTaxTrxTypeToInParam(temp);
	}
	@Override
	public void saveTmsMdTaxTrxTypeDataListsMap(Map dataListsMap) {
		Collection<TmsMdTaxTrxTypeInParam> deleteList = BatchUtils.to(TmsMdTaxTrxTypeInParam.class).getDeleteEntities(dataListsMap);
		Collection<TmsMdTaxTrxTypeInParam> insertList =  BatchUtils.to(TmsMdTaxTrxTypeInParam.class).getInsertEntities(dataListsMap);
		Collection<TmsMdTaxTrxTypeInParam> updateList =  BatchUtils.to(TmsMdTaxTrxTypeInParam.class).getModifiedEntities(dataListsMap);
		if (updateList != null&&updateList.size() > 0) {
			for(TmsMdTaxTrxTypeInParam inParam: updateList){
				TmsMdTaxTrxType entity=convertTmsMdTaxTrxTypeInParamToEntity(inParam);
				tmsMdTaxTrxTypeDao.update(entity);
			}		
//			tmsMdTaxTrxTypeDao.updateAll(updateList);
		}
		if (insertList != null&&insertList.size() > 0) {
			for(TmsMdTaxTrxTypeInParam inParam: insertList){
				TmsMdTaxTrxType entity=convertTmsMdTaxTrxTypeInParamToEntity(inParam);
				tmsMdTaxTrxTypeDao.save(entity);
				inParam.setId(entity.getId());
			}
//			tmsMdTaxTrxTypeDao.saveAll(insertList);
		}
		if (deleteList != null&&deleteList.size() > 0) {
			for(TmsMdTaxTrxTypeInParam inParam:deleteList){
				TmsMdTaxTrxType entity=new TmsMdTaxTrxType();
				entity.setId(inParam.getId());
				tmsMdTaxTrxTypeDao.remove(entity);
			}
//			tmsMdTaxTrxTypeDao.removeAll(deleteList);
		}
		
	}
	private List<TmsMdTaxTrxTypeInParam> convertTmsMdTaxTrxTypeToInParam(List<TmsMdTaxTrxType> models){
		List<TmsMdTaxTrxTypeInParam> result=new ArrayList<TmsMdTaxTrxTypeInParam>();
		for(TmsMdTaxTrxType initiation:models){
			TmsMdTaxTrxTypeInParam inparam=convertTmsMdTaxTrxTypeToInParam(initiation);
			result.add(inparam);
		}
		return result;
	}
	public TmsMdTaxTrxTypeInParam convertTmsMdTaxTrxTypeToInParam(TmsMdTaxTrxType model){
		TmsMdTaxTrxTypeInParam inparam=new TmsMdTaxTrxTypeInParam();
		ReflectUtils.copyProperties(model, inparam);
		return inparam;
	}
	public TmsMdTaxTrxType convertTmsMdTaxTrxTypeInParamToEntity(TmsMdTaxTrxTypeInParam inParam){
		TmsMdTaxTrxType entity=new TmsMdTaxTrxType();
		ReflectUtils.copyProperties(inParam, entity);
		return entity;
	}

	@Override
	public void  removeTmsMdTaxTrxTypes(String tmsMdTaxTrxTypeId) {
		TmsMdTaxTrxType entity = (TmsMdTaxTrxType) tmsMdTaxTrxTypeDao.load(TmsMdTaxTrxType.class, tmsMdTaxTrxTypeId);
		entity.setFlag("0");
		tmsMdTaxTrxTypeDao.update(entity);
		
	}
/**
 * 根据条件查询
 */
	@Override
	public DaoPage retrievalTmsMdTaxTrxType(Map<String, Object> parameter,
			Integer pageIndex, Integer pageSize) {
		DaoPage daoPage = tmsMdTaxTrxTypeDao.retrievalTmsMdTaxTrxType(parameter,pageIndex,pageSize);
		return daoPage;
	}
}

