package com.deloitte.tms.base.masterdata.controller;
// Generated by bo.wang with ling2.autoproject

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.base.enums.BaseCustomerCategoryEnums;
import com.deloitte.tms.base.masterdata.dao.impl.CustomerDaoImpl;
import com.deloitte.tms.base.masterdata.model.CustBankAccountInParam;
import com.deloitte.tms.base.masterdata.model.Customer;
import com.deloitte.tms.base.masterdata.model.CustomerInParam;
import com.deloitte.tms.base.masterdata.model.CustomerSiteInParam;
import com.deloitte.tms.base.masterdata.service.CustBankAccountService;
import com.deloitte.tms.base.masterdata.service.CustomerService;
import com.deloitte.tms.base.masterdata.service.CustomerSiteService;
import com.deloitte.tms.pl.core.commons.constant.EnableFlagEnums;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.utils.SpringUtil;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.dictionary.model.DictionaryEntity;
import com.deloitte.tms.pl.dictionary.service.DictionaryService;
import com.deloitte.tms.vat.base.enums.BaseLegalEntityTypeEnums;
import com.deloitte.tms.vat.base.enums.VatIsAppointIssuInvoiceEnums;
import com.deloitte.tms.vat.base.enums.VatIsIssueInvoiceEnums;
import com.deloitte.tms.vat.controller.BaseController;
/**
 * Home object for domain model class Customer.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("customer")
public class CustomerController extends BaseController{
	private static final Logger logger = LoggerFactory
			.getLogger(CustomerController.class);
	@Resource
	CustomerService customerService;
	
	@Resource
	CustBankAccountService custBankAccountService;
	
	@Resource
	CustomerSiteService customerSiteService;
	
	@Resource
	DictionaryService dictionaryService;
	
	/*@ResponseBody
	@RequestMapping(value = "/loadCustomerPage", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadCustomerPage(@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=customerService.findCustomerByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		return daoPage;
	}*/
	
	@ResponseBody
	@RequestMapping(value = "/loadCustomerPageList", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadCustomerPageList(@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=null;
		try {
			 daoPage=customerService.findCustomerByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
			
			Collection<CustomerInParam> return_list=(Collection<CustomerInParam>)daoPage.getResult();
			for(CustomerInParam temParam:return_list){
				temParam=convertDictionaryData(temParam);
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		
		return daoPage;
	}
	
	/**
	 * 
	 * @param model
	 * @return
	 * @throws Exception
	 */
	protected CustomerInParam convertDictionaryData(CustomerInParam model)throws Exception{
		CustomerInParam return_param=model;
		/**
		 * 是否开票
		 */
		for(VatIsAppointIssuInvoiceEnums statusEnums:VatIsAppointIssuInvoiceEnums.values()){
			if(AssertHelper.notEmpty(return_param.getIsInvoiceProviding())&&return_param.getIsInvoiceProviding().equals(statusEnums.getValue())){
				return_param.setIsInvoiceProvidingName(statusEnums.getText());
				break;
			}
		}
		/**
		 * 是否预约开票
		 */
		for(VatIsIssueInvoiceEnums statusEnums:VatIsIssueInvoiceEnums.values()){
			if(AssertHelper.notEmpty(return_param.getIsAppointInvoice())&&return_param.getIsAppointInvoice().equals(statusEnums.getValue())){
				return_param.setIsAppointInvoice(statusEnums.getText());
				break;
			}
		}
		/**
		 * 纳税主体类型
		 */
		for(BaseLegalEntityTypeEnums statusEnums:BaseLegalEntityTypeEnums.values()){
			if(AssertHelper.notEmpty(return_param.getCustLegalEntityType())&&return_param.getCustLegalEntityType().equals(statusEnums.getValue())){
				return_param.setCustLegalEntityTypeName(statusEnums.getText());
				break;
			}
		}
		/**
		 * 客户类型
		 */
		for(BaseCustomerCategoryEnums statusEnums:BaseCustomerCategoryEnums.values()){
			if(AssertHelper.notEmpty(return_param.getCustomerType())&&return_param.getCustomerType().equals(statusEnums.getValue())){
				return_param.setCustomerTypeName(statusEnums.getText());
				break;
			}
		}
		
		
		return return_param;
	}
	
	@RequestMapping(value = "/customerManageInit", method = RequestMethod.GET)
	public String clientManageInit()throws Exception{
		return "vat/customer/customerManageInit";
	}
	
	@ResponseBody
	@RequestMapping(value = "/saveCustomer", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public CustomerInParam saveCustomer( CustomerInParam inParam,HttpServletRequest request ) throws Exception {
		String accoutlist_string=request.getParameter("accoutlist_temp");
		String addressList_string=request.getParameter("addressList_temp");
		accoutlist_string=accoutlist_string.replace("“", "\"");
		addressList_string=addressList_string.replace("“", "\"");
		List<CustBankAccountInParam> bank_list=JSONArray.toList(JSONArray.fromObject(accoutlist_string), CustBankAccountInParam.class);
		List<CustomerSiteInParam> customerSiteList =JSONArray.toList(JSONArray.fromObject(addressList_string), CustomerSiteInParam.class);
		
		inParam.setAccoutlist(bank_list);
		inParam.setSiteList(customerSiteList);
		customerService.exeSaveCustomerInParamBatch(inParam);
		
		return inParam;
	}	
	@ResponseBody
	@RequestMapping(value = "/removeCustomers", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeCustomers(@RequestParam(value="id") String customerKeys) {
		AssertHelper.notEmpty_assert(customerKeys,"需要删除的用户不能为空");
		String[] customerIds=customerKeys.split(",");
		for(String customerId:customerIds){
			Customer entity=(Customer)customerService.get(Customer.class,customerId.toString());
			CustomerDaoImpl  customerDao = (CustomerDaoImpl)SpringUtil.getBean("customerDao");
			customerDao.removeById(Customer.class, customerId);
		}
	}
	
	@ResponseBody
	@RequestMapping(value = "/loadCustomer", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<CustomerInParam> loadCustomer(Map<String, Object> map) throws Exception {
		List result=customerService.findCustomerByParams(map);
		return result;
	}
	
	public CustomerInParam loadAddCustomer(Map<String, Object> map) throws Exception {
		CustomerInParam inParam=new CustomerInParam();
		return inParam;
	}
	/**
	 * 
	 *〈一句话功能简述〉 
	 * 功能详细描述
	 * @param map
	 * @return
	 * @throws Exception
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 */
	@ResponseBody
	@RequestMapping(value="/loadModifyCustomer",method = RequestMethod.POST)
	public CustomerInParam loadModifyCustomer(@RequestParam Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		Customer entity=(Customer)customerService.get(Customer.class,id.toString());
		CustomerInParam inParam=customerService.convertCustomerToInParam(entity);
		Map<String, String> params=new HashMap<String, String>();
		params.put("customerId", entity.getId());
		inParam.setAccoutlist(custBankAccountService.findCustBankAccountByParams(params));
		inParam.setSiteList(customerSiteService.findCustomerSiteByParams(params));
		return inParam;
	}
	
	
	
	public void updateModifyCustomer(CustomerInParam inParam) throws Exception {
		Customer entity=(Customer)customerService.get(Customer.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		customerService.update(entity);
	}
	/**
	 * 获取是否失效按钮
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/getEnabledStatus", method = RequestMethod.POST)
	public void getEnabledStatus(HttpServletResponse response)throws Exception{
		List<Map<String, Object>> results = new ArrayList<Map<String,Object>>();		 
		for(EnableFlagEnums eunm:EnableFlagEnums.values()){
		       String value = eunm.getValue();
		       String text =eunm.getText();
		       String retextString  = getMessage(text);
		       Map<String, Object> map = new HashMap<String, Object>();
		       map.put("value", value);
		       map.put("text",retextString);
		       results.add(map);
		 }
        JSONArray jsonArray = JSONArray.fromObject(results);
        retJsonArray(response, jsonArray);

	}
	
	/**
	 * 获取数据字典
	 * @param response
	 * @param parentCode
	 * @throws IOException
	 */
	@RequestMapping(value = "/getDicEntityByParentCode", method = RequestMethod.GET)    
    public void getDictionaryEntitiesByParentCode(HttpServletResponse response,@RequestParam("parentCode") String parentCode) throws IOException{
                  Collection<DictionaryEntity> results = dictionaryService.loadDictionaryEntities(parentCode);
                  List<Map<String, String>> reList = new ArrayList<Map<String,String>>();
                  for(DictionaryEntity dictionaryEntity:results){
                               Map<String,String> map = new HashMap<String,String>();                             
                               map.put("code", dictionaryEntity.getCode());
                               map.put("name", dictionaryEntity.getName());
                               reList.add(map);
                  }            
                  JSONArray jsonArray = JSONArray.fromObject(reList);
                  retJsonArray(response, jsonArray);
    }
	
	/**
	 * 获取购方下拉列表
	 * @param response
	 * @param parentCode
	 * @throws IOException
	 */
	@RequestMapping(value = "/getcustomergrid", method = RequestMethod.POST)
	public void getCustomerComoboxGrid(@RequestParam Map<String,Object> parameter,HttpServletResponse response)throws Exception{				
		DaoPage daoPage=customerService.findCustomerByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult());
		JSONObject result = new JSONObject();
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray.toString());
		retJson(response, result);	
	}
}

