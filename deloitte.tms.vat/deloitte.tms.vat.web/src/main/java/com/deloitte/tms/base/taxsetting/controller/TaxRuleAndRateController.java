package com.deloitte.tms.base.taxsetting.controller;
// Generated by bo.wang with ling2.autoproject

import java.io.Serializable;
import java.util.Collection;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;

import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.springmvc.controller.BaseController;
import com.deloitte.tms.base.taxsetting.model.TaxRuleAndRate;
import com.deloitte.tms.base.taxsetting.model.TaxRuleAndRateInParam;
import com.deloitte.tms.base.taxsetting.service.TaxRuleAndRateService;
/**
 * Home object for domain model class TaxRuleAndRate.
 * @see com.deloitte.tms.base.taxsetting.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("taxRuleAndRate")
public class TaxRuleAndRateController extends BaseController{
	@Resource
	TaxRuleAndRateService taxRuleAndRateService;
	
	@ResponseBody
	@RequestMapping(value = "/loadTaxRuleAndRatePage", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadTaxRuleAndRatePage(@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=taxRuleAndRateService.findTaxRuleAndRateByParams(parameter,PageUtils.getPageIndex(parameter),PageUtils.getPageSize(parameter));
		return daoPage;
	}
	@ResponseBody
	@RequestMapping(value = "/saveTaxRuleAndRate", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTaxRuleAndRate(TaxRuleAndRateInParam inParam) throws Exception {
		TaxRuleAndRate entity=taxRuleAndRateService.convertTaxRuleAndRateInParamToEntity(inParam);
		if(entity.getId()==null){
			taxRuleAndRateService.save(entity);
		}
		else{
			taxRuleAndRateService.update(entity);
		}
		inParam.setId(entity.getId());
	}	
	@ResponseBody
	@RequestMapping(value = "/removeTaxRuleAndRates", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeTaxRuleAndRates(@RequestParam String taxRuleAndRateKeys) {
		AssertHelper.notEmpty_assert(taxRuleAndRateKeys,"需要删除的用户不能为空");
		String[] taxRuleAndRateIds=taxRuleAndRateKeys.split(",");
		//for(String taxRuleAndRateId:taxRuleAndRateIds){
			
		//}
	}
	@ResponseBody
	@RequestMapping(value = "/loadTaxRuleAndRate", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<TaxRuleAndRateInParam> loadTaxRuleAndRate(Map<String, Object> map) throws Exception {
		List result=taxRuleAndRateService.findTaxRuleAndRateByParams(map);
		return result;
	}
	
	public TaxRuleAndRateInParam loadAddTaxRuleAndRate(Map<String, Object> map) throws Exception {
		TaxRuleAndRateInParam inParam=new TaxRuleAndRateInParam();
		return inParam;
	}
	
	public TaxRuleAndRateInParam loadModifyTaxRuleAndRate(Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		TaxRuleAndRate entity=(TaxRuleAndRate)taxRuleAndRateService.get(TaxRuleAndRate.class,Long.parseLong(id.toString()));
		TaxRuleAndRateInParam inParam=taxRuleAndRateService.convertTaxRuleAndRateToInParam(entity);
		return inParam;
	}
	
	
	
	public void updateModifyTaxRuleAndRate(TaxRuleAndRateInParam inParam) throws Exception {
		TaxRuleAndRate entity=(TaxRuleAndRate)taxRuleAndRateService.get(TaxRuleAndRate.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		taxRuleAndRateService.update(entity);
	}
}

