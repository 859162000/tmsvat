package com.deloitte.tms.vat.salesinvoice.view;
// Generated by bo.wang with ling2.autoproject

import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.jfree.date.DateUtilities;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.base.masterdata.model.Customer;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.DateUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.context.utils.ContextUtils;
import com.deloitte.tms.pl.dictionary.model.DictionaryEntity;
import com.deloitte.tms.pl.dictionary.service.DictionaryService;
import com.deloitte.tms.vat.base.enums.AppFormStatuEnums;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceReqH;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceReqHInParam;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceReqL;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxPool;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceReqHService;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceReqLService;
/**
 * Home object for domain model class InvoiceReqH.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Controller
//@RequestMapping("invoiceReqH")
public class InvoiceReqHController extends BaseController{
	@Autowired
	DictionaryService dictionaryService;
	@Resource
	InvoiceReqHService invoiceReqHService;
	@Autowired
	InvoiceReqLService invoiceReqLService;
	@RequestMapping(value = "/getInvoicePrintManageIndex")
	public String getIndex() throws Exception{
		return "invoiceprint/invoicecounterprint";
	}
	@RequestMapping(value = "/getInvoiceSpecialPrintIndex")
	public String getSpecialIndex() throws Exception{
		return "invoiceprint/invoicespecialprint";
	}
	/*@RequestMapping(value = "/getBusinessIndex")
	public String getBusinessParameterIndex() throws Exception{
		return "vat/businessparameter/setup";
	}*/
	@ResponseBody
	@RequestMapping(value = "/loadInvoiceReqHPage", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadInvoiceReqHPage(@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=invoiceReqHService.findInvoiceReqHByParams(parameter,PageUtils.getPageIndex(parameter),PageUtils.getPageSize(parameter));
		return daoPage;
	}
	@ResponseBody
	@RequestMapping(value = "/saveInvoiceReqH", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveInvoiceReqH(InvoiceReqHInParam inParam) throws Exception {
		InvoiceReqH entity=invoiceReqHService.convertInvoiceReqHInParamToEntity(inParam);
		if(entity.getId()==null){
			invoiceReqHService.save(entity);
		}
		else{
			invoiceReqHService.update(entity);
		}
		inParam.setId(entity.getId());
	}	
	@ResponseBody
	@RequestMapping(value = "invoiceReqH/removeInvoiceReqHs", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeInvoiceReqHs(@RequestParam String ids,HttpServletResponse response) throws IOException {
		AssertHelper.notEmpty_assert(ids,"需要删除的用户不能为空");
		String[] invoiceReqHIds=ids.split(",");
		JSONObject object=new JSONObject();
		try {
			invoiceReqHService.deleteFromReqAll(invoiceReqHIds);
			object.put("msg", "删除成功");
			object.put("success", "true");
		} catch (Exception e) {
			object.put("msg", "删除失败");
			object.put("success", "false");
		}
		retJson(response, object);
	}
	@ResponseBody
	@RequestMapping(value = "/loadInvoiceReqH", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<InvoiceReqHInParam> loadInvoiceReqH(Map<String, Object> map) throws Exception {
		List result=invoiceReqHService.findInvoiceReqHByParams(map);
		return result;
	}
	@ResponseBody
	@RequestMapping(value = "invoiceReqH/getNewReadyParam", method = RequestMethod.GET)
	public void getReadyParam(Map<String, Object> map,HttpServletResponse response) throws Exception {
		InvoiceReqHInParam inParam = new InvoiceReqHInParam();
		JsonConfig jsonConfig = new JsonConfig();  
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor("yyyy-MM-dd")); 
		Date d=new Date();
		String date=DateFormat(d);
		inParam.setCrvatInvoiceReqNumber(/*Long.toString(d.getTime())*/" ");
		inParam.setInvoiceReqDate(d);
		inParam.setApplicant(ContextUtils.getCurrentUserName());
		inParam.setStatus(getMessage(AppFormStatuEnums.DRAFT.getValue()));
		//inParam.setStatus(AppFormStatuEnums.DRAFT.getValue());
		inParam.setCreatedBy(ContextUtils.getCurrentUserName());
		//inParam.setOperationOrgCode("0001");
		JSONObject object=new JSONObject();
		JSONObject object1=JSONObject.fromObject(inParam, jsonConfig);
		object.put("invoiceReadyData", object1);
		retJson(response, object);
	}
	@RequestMapping(value = "invoiceReqH/getCustomerParam")
	public void getCustomerParam(@RequestParam Map<String, Object> map,HttpServletResponse response) throws IOException{
		Customer customer=invoiceReqHService.getCustomerParam(map);
		JSONObject object=new JSONObject();
		object.put("customer", customer);
		retJson(response, object);
	}
	//@ResponseBody
	@RequestMapping(value = "invoiceReqH/transactionlist")
	public void getTransactionlist(@RequestParam Map<String, Object> map,HttpServletResponse response) throws Exception {
		DaoPage page=invoiceReqHService.findInvoiceTrxPoolByParams(map, PageUtils.getPageNumber(map),PageUtils.getPageSize(map));
		JsonConfig jsonConfig = new JsonConfig();  
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor("yyyy-MM-dd")); 
		JSONArray jsonArray1 = JSONArray.fromObject(page.getResult(),jsonConfig);
		JSONObject result=new JSONObject();
		result.put("total", page.getRecordCount());
		result.put("rows", jsonArray1.toString());
		List<InvoiceTrxPool>list=(List<InvoiceTrxPool>) page.getResult();
		if(list.size()>0){
			result.put("customerId",list.get(0).getCustomerId());
		}
		result.put("pages", page.getPageCount());
		retJson(response,result);
	}
	@RequestMapping(value = "invoiceReqAll/saveInvoiceReqAll", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveInvoiceReqAll(InvoiceReqHInParam inParam,HttpServletResponse response) throws Exception {
		JSONObject object = new JSONObject();
		try {
			inParam.setOrgId(ContextUtils.getCurrentOrgId());
			invoiceReqHService.saveInvoiceReqAll(inParam,new HashMap());
			object.put("msg", "保存成功");
			object.put("success", "true");
		} catch (Exception e) {
			object.put("msg", "保存失败");
			object.put("success", "false");
			e.printStackTrace();
		}
		retJson(response, object);
	}
	//申请单查询页面
	@RequestMapping(value = "invoiceReqAll/getInvoiceReqAll", method = RequestMethod.POST)
	public void getInvoiceReqAll(@RequestParam Map<String, Object>map,HttpServletResponse response) throws Exception{
		DaoPage page=invoiceReqHService.findInvoiceReqAll(map, PageUtils.getPageNumber(map),PageUtils.getPageSize(map));
		JSONObject result=new JSONObject();
		JsonConfig jsonConfig = new JsonConfig();  
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor("yyyy-MM-dd")); 
		JSONArray jsonArray1 = JSONArray.fromObject(page.getResult(),jsonConfig);
		result.put("total", page.getRecordCount());
		result.put("rows", jsonArray1.toString());
		retJson(response,result);
	}
	//编辑申请单
	@RequestMapping(value = "invoiceReqH/getEditInfo", method = RequestMethod.POST)
	public void getEditInfo(@RequestParam Map<String, Object>map,HttpServletResponse response) throws IOException{
		JSONObject result=new JSONObject();
		DaoPage page=invoiceReqLService.findInvoiceReqLByParams(map, PageUtils.getPageNumber(map),PageUtils.getPageSize(map));
		InvoiceReqH invoiceReqH= (InvoiceReqH) invoiceReqHService.findById(InvoiceReqH.class, map.get("crvatInvoiceReqHId").toString());
		JsonConfig jsonConfig = new JsonConfig();  
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor("yyyy-MM-dd")); 
		JSONArray jsonArray1 = JSONArray.fromObject(page.getResult(),jsonConfig);
		result.put("total", page.getRecordCount());
		result.put("rows", jsonArray1.toString());
		InvoiceReqHInParam inParam=invoiceReqHService.getEditInfo(invoiceReqH.getId());
		JSONObject object1= JSONObject.fromObject(inParam,jsonConfig);
		result.put("reqH", object1.toString());
		retJson(response,result);
	}
	@RequestMapping(value = "invoiceReqAll/updateCommitStatus", method = RequestMethod.POST)
	public void updateCommitStatus(InvoiceReqHInParam inParam,HttpServletResponse response) throws IOException{
		JSONObject object = new JSONObject();
		String id = inParam.getId();
		String ids=inParam.getIds();
		try {
			Map<String, Object>map=new HashMap<String, Object>();
			map.put("id", id);
			map.put("rowsids",ids);
			map.put("customerId", inParam.getCustomerId());
			map.put("custRegistrationCode", inParam.getCustRegistrationCode());
			Date date = inParam.getInvoiceReqDate();
			String dateString = DateUtils.format("yyyy-MM-dd", date);
			map.put("invoiceReqDate", dateString);
			map.put("reqInvoiceRange", inParam.getReqInvoiceRange());
			map.put("custRegistrationNumber", inParam.getCustRegistrationNumber());
			map.put("status",AppFormStatuEnums.SUBMITTED.getValue());
			map.put("orgId", ContextUtils.getCurrentOrgId());
			map.put("name", ContextUtils.getCurrentUserName());
			String hid=invoiceReqHService.setUpHead(map);
			//invoiceReqHService.updateCommit(hid,new HashMap());
			object.put("msg", "提交成功");
			object.put("success", "true");
		} catch (Exception e) {
			object.put("msg", "提交失败");
			object.put("success", "false");
			e.printStackTrace();
		}
		retJson(response, object);
	}
	@RequestMapping(value="invoiceReqAll/submitFromPage",method=RequestMethod.POST)
	public void submitFromPage(@RequestParam Map<String,Object>map,HttpServletResponse response) throws IOException{
		String allId=map.get("ids").toString();
		String[]ids=allId.split(",");
		JSONObject object = new JSONObject();
		Map<String, Object>pMap=new HashMap<String, Object>();
		List<InvoiceReqL>list=new ArrayList<InvoiceReqL>();
		try {
			for (int i = 0; i < ids.length; i++) {
				InvoiceReqH entity=(InvoiceReqH) invoiceReqHService.get(InvoiceReqH.class, ids[i]);
				/*pMap.put("id", ids[i]);
				String rowsids=invoiceReqHService.getRowsids(ids[i]);
				pMap.put("rowsids", rowsids);
				this.setUpHead(pMap);*/
				invoiceReqHService.updateCommit(ids[i],new HashMap());
			}
			object.put("msg", "提交成功");
			object.put("success", "true");
		} catch (Exception e) {
			object.put("msg", "提交失败");
			object.put("success", "false");
			e.printStackTrace();
		}
		retJson(response, object);
	}
	@RequestMapping(value="invoiceReqHead/saveInvoiceReqHead",method=RequestMethod.POST)
	public void saveInvoiceReqHead(@RequestParam Map<String, Object>map,HttpServletResponse response) throws IOException{
		
		JSONObject result=new JSONObject();
		try {
			map.put("status",AppFormStatuEnums.DRAFT.getValue());
			map.put("orgId", ContextUtils.getCurrentOrgId());
			map.put("name", ContextUtils.getCurrentUserName());
			invoiceReqHService.setUpHead(map);
			result.put("msg", "保存成功");
			result.put("success", "true");
		} catch (Exception e) {
			result.put("msg", "保存失败");
			result.put("success", "false");
			e.printStackTrace();
		}
		retJson(response,result);
	}
	
	@RequestMapping(value = "invoiceReqH/getdictionary", method = RequestMethod.GET)    
    public void getDictionaryEntitiesByParentCode(HttpServletResponse response) throws IOException{
          Collection<DictionaryEntity> results = dictionaryService.loadDictionaryEntities("VAT_CR_INVOICE_APPFORM_STATUS");
          List<Map<String, String>> reList = new ArrayList<Map<String,String>>();
          for(DictionaryEntity dictionaryEntity:results){
               Map<String,String> map = new HashMap<String,String>();                             
               map.put("value", dictionaryEntity.getCode());
               map.put("text", dictionaryEntity.getName());
               reList.add(map);
          }            
          JSONArray jsonArray = JSONArray.fromObject(reList);
          retJsonArray(response, jsonArray);
   
    }
	@RequestMapping(value = "invoiceReqH/getTypedictionary", method = RequestMethod.GET)    
    public void getTypedictionary(HttpServletResponse response) throws IOException{
          Collection<DictionaryEntity> results = dictionaryService.loadDictionaryEntities("VAT_CUSTOMER_DISC_OPTION");
          List<Map<String, String>> reList = new ArrayList<Map<String,String>>();
          for(DictionaryEntity dictionaryEntity:results){
                       Map<String,String> map = new HashMap<String,String>();                             
                       map.put("value", dictionaryEntity.getCode());
                       map.put("text", dictionaryEntity.getName());
                       reList.add(map);
          }            
          JSONArray jsonArray = JSONArray.fromObject(reList);
          retJsonArray(response, jsonArray);
           
    }
	@RequestMapping(value = "invoiceReqH/getLeveldictionary", method = RequestMethod.GET)    
    public void getLeveldictionary(HttpServletResponse response) throws IOException{
          Collection<DictionaryEntity> results = dictionaryService.loadDictionaryEntities("VAT_CR_INVOICE_PRINT_SCOPE");
          List<Map<String, String>> reList = new ArrayList<Map<String,String>>();
          for(DictionaryEntity dictionaryEntity:results){
                       Map<String,String> map = new HashMap<String,String>();                             
                       map.put("value", dictionaryEntity.getCode());
                       map.put("text", dictionaryEntity.getName());
                       reList.add(map);
          }            
          JSONArray jsonArray = JSONArray.fromObject(reList);
          retJsonArray(response, jsonArray);
    }
	public InvoiceReqHInParam loadAddInvoiceReqH(Map<String, Object> map) throws Exception {
		InvoiceReqHInParam inParam=new InvoiceReqHInParam();
		return inParam;
	}
	
	public InvoiceReqHInParam loadModifyInvoiceReqH(Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		InvoiceReqH entity=(InvoiceReqH)invoiceReqHService.get(InvoiceReqH.class,Long.parseLong(id.toString()));
		InvoiceReqHInParam inParam=invoiceReqHService.convertInvoiceReqHToInParam(entity);
		return inParam;
	}
	
	
	
	public void updateModifyInvoiceReqH(InvoiceReqHInParam inParam) throws Exception {
		InvoiceReqH entity=(InvoiceReqH)invoiceReqHService.get(InvoiceReqH.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		invoiceReqHService.update(entity);
	}
	private String DateFormat(Date d){
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");  
		String str=sdf.format(d);  
		return str;
	}
	/*private String setUpHead(Map<String, Object>map) throws ParseException{
		String trxIds = (String) map.get("rowsids");
		String trxs[] = trxIds.split(";");
		List<InvoiceTrxPool> list = new ArrayList<InvoiceTrxPool>();
		String hid="";
		String name=ContextUtils.getCurrentUserName();
		for(int i=0;i<trxs.length;i++){
			InvoiceTrxPool invoiceTrxPool = (InvoiceTrxPool) invoiceReqHService.get(InvoiceTrxPool.class, trxs[i]);
			if(null!=invoiceTrxPool){
				list.add(invoiceTrxPool);
			}
		}
		if(!AssertHelper.empty(map.get("id"))){
			String id = map.get("id").toString();
			InvoiceReqH invoiceReqH = invoiceReqHService.getInvoiceReqH(id);
			List<InvoiceReqL> invoiceReqLs = new ArrayList<InvoiceReqL>();					
			for(InvoiceTrxPool invoiceTrxPool:list){
				InvoiceReqL entity=new InvoiceReqL();
				entity=invoiceReqHService.convertInvoiceTrxPoolToInvoiceReqL(invoiceTrxPool,entity);
				entity.setId(IdGenerator.getUUID());
				entity.setCrvatInvoiceReqHId(invoiceReqH.getId());
				entity.setStatus(map.get("status").toString());
				entity.setOrgId(ContextUtils.getCurrentOrgId());
				invoiceReqLs.add(entity);							
			}
			invoiceReqH.setInvoiceReqLs(invoiceReqLs);
			invoiceReqHService.updateInvoiceReq(invoiceReqH);
			hid=invoiceReqH.getId();
		}else{
			InvoiceReqH invoiceReqH = new InvoiceReqH();
			invoiceReqH.setId(IdGenerator.getUUID());
			invoiceReqH.setCustomerId(map.get("customerId").toString());
			invoiceReqH.setCustRegistrationNumber(map.get("custRegistrationNumber").toString());
			String sequece = FlowHelper.getNextFlowNo("INVOICEREQ");
			invoiceReqH.setCrvatInvoiceReqNumber(sequece);
			invoiceReqH.setStatus(map.get("status").toString());
			invoiceReqH.setIsAllMapping("0");
			invoiceReqH.setMappingStatus("0");
			invoiceReqH.setOrgId(ContextUtils.getCurrentOrgId());
			invoiceReqH.setCustRegistrationCode(map.get("custRegistrationCode").toString());
			String dateString = map.get("invoiceReqDate").toString();
			Date date = DateUtils.parse(dateString);
			invoiceReqH.setInvoiceReqDate(date);
			invoiceReqH.setReqInvoiceRange(map.get("reqInvoiceRange").toString());
			invoiceReqH.setInvoiceReqType(InvoiceReqTypeEnums.COUNTER.getValue());
			List<InvoiceReqL> invoiceReqLs = new ArrayList<InvoiceReqL>();
			for(InvoiceTrxPool invoiceTrxPool:list){
				InvoiceReqL entity=new InvoiceReqL();
				entity=invoiceReqHService.convertInvoiceTrxPoolToInvoiceReqL(invoiceTrxPool,entity);
				entity.setId(IdGenerator.getUUID());
				entity.setCrvatInvoiceReqHId(invoiceReqH.getId());
				entity.setStatus(map.get("status").toString());
				entity.setOrgId(ContextUtils.getCurrentOrgId());
				invoiceReqLs.add(entity);
			}
			invoiceReqH.setInvoiceReqLs(invoiceReqLs);
			invoiceReqHService.saveInvoiceReqHeadAndRel(invoiceReqH);
			hid=invoiceReqH.getId();
		}
		invoiceReqHService.updateAdminStatus(name);
		return hid;
	}*/
}

