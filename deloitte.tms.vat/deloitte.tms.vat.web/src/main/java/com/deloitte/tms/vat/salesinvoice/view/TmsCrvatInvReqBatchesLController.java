package com.deloitte.tms.vat.salesinvoice.view;
// Generated by bo.wang with ling2.autoproject

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.springmvc.controller.BaseController;
import com.deloitte.tms.pl.core.context.utils.ContextUtils;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolH;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolHInParam;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolL;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvReqBatchesL;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvReqBatchesLInParam;
import com.deloitte.tms.vat.salesinvoice.service.TmsCrvatInvReqBatchesLService;
/**
 * Home object for domain model class TmsCrvatInvReqBatchesL.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("tmsCrvatInvReqBatchesL")
public class TmsCrvatInvReqBatchesLController extends BaseController{
	@Resource
	TmsCrvatInvReqBatchesLService tmsCrvatInvReqBatchesLService;
	
	@RequestMapping(value = "/initTmsCrvatInvReqBatchesL", method = RequestMethod.GET)
	public String initTmsCrvatInvReqBatchesL()throws Exception{
		return "vat/tmscrvatinvreqbatchesl/tmsCrvatInvReqBatchesL";
	}
	
	@ResponseBody
	@RequestMapping(value = "/loadTmsCrvatInvReqBatchesLPage", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadTmsCrvatInvReqBatchesLPage(@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=tmsCrvatInvReqBatchesLService.findTmsCrvatInvReqBatchesLByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		return daoPage;
	}
	@ResponseBody
	@RequestMapping(value = "/saveTmsCrvatInvReqBatchesL", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTmsCrvatInvReqBatchesL(TmsCrvatInvReqBatchesLInParam inParam) throws Exception {
		TmsCrvatInvReqBatchesL entity=tmsCrvatInvReqBatchesLService.convertTmsCrvatInvReqBatchesLInParamToEntity(inParam);
		if(entity.getId()==null){
			tmsCrvatInvReqBatchesLService.save(entity);
		}
		else{
			tmsCrvatInvReqBatchesLService.update(entity);
		}
		inParam.setId(entity.getId());
	}	
	
	@ResponseBody
	@RequestMapping(value = "/batchSaveTmsCrvatInvReqBatchesLToPrintPool", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void batchSaveTmsCrvatInvReqBatchesLToPrintPool(TmsCrvatInvReqBatchesLInParam inParam) throws Exception {
		StringBuffer stringBuffer = new StringBuffer();
		Map<String, Object> params = new HashMap<String, Object>();
		//DaoPage daoPage=
		List<TmsCrvatInvReqBatchesLInParam> tmsCrvatInvReqBatchesL = new ArrayList<TmsCrvatInvReqBatchesLInParam>();
		tmsCrvatInvReqBatchesL = tmsCrvatInvReqBatchesLService.findBy(stringBuffer, params);
		List<InvoicePrintPoolH> invoicePrintPoolHlist = new ArrayList<InvoicePrintPoolH>();
		List<InvoicePrintPoolL> invoicePrintPoolLs =new ArrayList<InvoicePrintPoolL>();
		Iterator iterator =tmsCrvatInvReqBatchesL.listIterator();
		InvoicePrintPoolH tnvoicePrintPoolHTemp = new InvoicePrintPoolH();
		InvoicePrintPoolL invoicePrintPoolLTemp =new InvoicePrintPoolL();
		while (iterator.hasNext())
		{
			TmsCrvatInvReqBatchesLInParam temps=(TmsCrvatInvReqBatchesLInParam) iterator.next();
			BigDecimal totalAmount= ((TmsCrvatInvReqBatchesLInParam)iterator.next()).getInvoiceAmount();//金额 
			int loopTimes = function(totalAmount);
			if(loopTimes==0)
			{
				String invoiceReqNumber= ((TmsCrvatInvReqBatchesLInParam)temps).getCrvatInvoiceReqNumber();//申请单编号
				String orgId= ((TmsCrvatInvReqBatchesLInParam)temps).getOrgId();//组织编号
				String equipmentId= ((TmsCrvatInvReqBatchesLInParam)temps).getEquipmentId();//打印终端编号
				tnvoicePrintPoolHTemp.setEquipmentId(equipmentId);//
			//	BigDecimal invoiceAmount= ((TmsCrvatInvReqBatchesLInParam)temps).getInvoiceAmount();//金额
				//int invoiceArray = invoiceAmount.intValue()/10000000;
				String customerName= ((TmsCrvatInvReqBatchesLInParam)temps).getCustomerName();//客户名称
				tnvoicePrintPoolHTemp.setCustomerName(customerName);//
				tnvoicePrintPoolHTemp.setCustomerId(((TmsCrvatInvReqBatchesLInParam)temps).getCustomerId());
				String customerNumber= ((TmsCrvatInvReqBatchesLInParam)temps).getCustomerNumber();//客户编号
				tnvoicePrintPoolHTemp.setCustomerNumber(customerNumber);
				String uuId = ContextUtils.getCurrentOrgId();
				tnvoicePrintPoolHTemp.setId(uuId);//ID uuid
			
				
				
				tnvoicePrintPoolHTemp.setTotalAmount(totalAmount);
				tnvoicePrintPoolHTemp.setArchiveBaseDate(new Date());
				tnvoicePrintPoolHTemp.setBizOrgCode("");
				tnvoicePrintPoolHTemp.setCreatedBy(ContextUtils.getCurrentUserName());
				tnvoicePrintPoolHTemp.setCreateDate(new Date());
				tnvoicePrintPoolHTemp.setModifiedBy(ContextUtils.getCurrentUserName());
				tnvoicePrintPoolHTemp.setModifiedDate(new Date());
				tnvoicePrintPoolHTemp.setVersionId(0);
				invoicePrintPoolHlist.add(tnvoicePrintPoolHTemp);
				invoicePrintPoolLTemp.setId(ContextUtils.getCurrentOrgId());
				//{
					//10000000 发票限额
				//}
				
				
				invoicePrintPoolLTemp.setInvoicePrtPoolHId(uuId);//H ID
				invoicePrintPoolLTemp.setInvoiceAmount(totalAmount);//发票打印池行数据和头数据一对一
				BigDecimal taxRate = new BigDecimal(((TmsCrvatInvReqBatchesLInParam)temps).getTaxRate());//税率
				invoicePrintPoolLTemp.setTaxRate(taxRate);
				
				String bizOrgCode = ((TmsCrvatInvReqBatchesLInParam)temps).getBizOrgCode();//
				invoicePrintPoolLTemp.setBizOrgCode(bizOrgCode);
				
				String inventoryNumber = ((TmsCrvatInvReqBatchesLInParam)temps).getInventoryItemNumber();
				invoicePrintPoolLTemp.setInventoryItemNumber(inventoryNumber);//商品及服务编码
			//	ContextUtils.getCurrentUserName();
				invoicePrintPoolLTemp.setArchiveBaseDate(new Date());
				invoicePrintPoolLTemp.setBizOrgCode("");
				invoicePrintPoolLTemp.setCreatedBy(ContextUtils.getCurrentUserName());
				invoicePrintPoolLTemp.setCreateDate(new Date());
				invoicePrintPoolLTemp.setModifiedBy(ContextUtils.getCurrentUserName());
				invoicePrintPoolLTemp.setModifiedDate(new Date());
				invoicePrintPoolLTemp.setVersionId(0);//crvatInvReqBatchesLId
				//BigDecimal taxRate 
				invoicePrintPoolLTemp.setCrvatInvReqBatchesLId(((TmsCrvatInvReqBatchesLInParam)temps).getId());
				invoicePrintPoolLs.add(invoicePrintPoolLTemp);
			}
			else 
			{
			for(int i=0;i<loopTimes;i++)
			{
				
				//int
				BigDecimal tempBigDecimal = new BigDecimal(9999999);
				String invoiceReqNumber= ((TmsCrvatInvReqBatchesLInParam)temps).getCrvatInvoiceReqNumber();//申请单编号
				String orgId= ((TmsCrvatInvReqBatchesLInParam)temps).getOrgId();//组织编号
				String equipmentId= ((TmsCrvatInvReqBatchesLInParam)temps).getEquipmentId();//打印终端编号
				tnvoicePrintPoolHTemp.setEquipmentId(equipmentId);//
			//	BigDecimal invoiceAmount= ((TmsCrvatInvReqBatchesLInParam)temps).getInvoiceAmount();//金额
				//int invoiceArray = invoiceAmount.intValue()/10000000;
				String customerName= ((TmsCrvatInvReqBatchesLInParam)temps).getCustomerName();//客户名称
				tnvoicePrintPoolHTemp.setCustomerName(customerName);//
				tnvoicePrintPoolHTemp.setCustomerId(((TmsCrvatInvReqBatchesLInParam)temps).getCustomerId());
				String customerNumber= ((TmsCrvatInvReqBatchesLInParam)temps).getCustomerNumber();//客户编号
				tnvoicePrintPoolHTemp.setCustomerNumber(customerNumber);
				String uuId = ContextUtils.getCurrentOrgId();
				tnvoicePrintPoolHTemp.setId(uuId);//ID uuid
			
				
				
				tnvoicePrintPoolHTemp.setTotalAmount(tempBigDecimal);
				tnvoicePrintPoolHTemp.setArchiveBaseDate(new Date());
				tnvoicePrintPoolHTemp.setBizOrgCode("");
				tnvoicePrintPoolHTemp.setCreatedBy(ContextUtils.getCurrentUserName());
				tnvoicePrintPoolHTemp.setCreateDate(new Date());
				tnvoicePrintPoolHTemp.setModifiedBy(ContextUtils.getCurrentUserName());
				tnvoicePrintPoolHTemp.setModifiedDate(new Date());
				tnvoicePrintPoolHTemp.setVersionId(0);
				invoicePrintPoolHlist.add(tnvoicePrintPoolHTemp);
				invoicePrintPoolLTemp.setId(ContextUtils.getCurrentOrgId());
				//{
					//10000000 发票限额
				//}
				
				
				invoicePrintPoolLTemp.setInvoicePrtPoolHId(uuId);//H ID
				invoicePrintPoolLTemp.setInvoiceAmount(tempBigDecimal);//发票打印池行数据和头数据一对一
				BigDecimal taxRate = new BigDecimal(((TmsCrvatInvReqBatchesLInParam)temps).getTaxRate());//税率
				invoicePrintPoolLTemp.setTaxRate(taxRate);
				
				String bizOrgCode = ((TmsCrvatInvReqBatchesLInParam)temps).getBizOrgCode();//
				invoicePrintPoolLTemp.setBizOrgCode(bizOrgCode);
				
				String inventoryNumber = ((TmsCrvatInvReqBatchesLInParam)temps).getInventoryItemNumber();
				invoicePrintPoolLTemp.setInventoryItemNumber(inventoryNumber);//商品及服务编码
			//	ContextUtils.getCurrentUserName();
				invoicePrintPoolLTemp.setArchiveBaseDate(new Date());
				invoicePrintPoolLTemp.setBizOrgCode("");
				invoicePrintPoolLTemp.setCreatedBy(ContextUtils.getCurrentUserName());
				invoicePrintPoolLTemp.setCreateDate(new Date());
				invoicePrintPoolLTemp.setModifiedBy(ContextUtils.getCurrentUserName());
				invoicePrintPoolLTemp.setModifiedDate(new Date());
				invoicePrintPoolLTemp.setVersionId(0);//crvatInvReqBatchesLId
				//BigDecimal taxRate 
				invoicePrintPoolLTemp.setCrvatInvReqBatchesLId(((TmsCrvatInvReqBatchesLInParam)temps).getId());
				invoicePrintPoolLs.add(invoicePrintPoolLTemp);
			}
			if((totalAmount.doubleValue()-9999999*loopTimes)>0)
			{
				
				//int
				BigDecimal tempBigDecimal = new BigDecimal(totalAmount.doubleValue()-9999999*loopTimes);
				String invoiceReqNumber= ((TmsCrvatInvReqBatchesLInParam)temps).getCrvatInvoiceReqNumber();//申请单编号
				String orgId= ((TmsCrvatInvReqBatchesLInParam)temps).getOrgId();//组织编号
				String equipmentId= ((TmsCrvatInvReqBatchesLInParam)temps).getEquipmentId();//打印终端编号
				tnvoicePrintPoolHTemp.setEquipmentId(equipmentId);//
			//	BigDecimal invoiceAmount= ((TmsCrvatInvReqBatchesLInParam)temps).getInvoiceAmount();//金额
				//int invoiceArray = invoiceAmount.intValue()/10000000;
				String customerName= ((TmsCrvatInvReqBatchesLInParam)temps).getCustomerName();//客户名称
				tnvoicePrintPoolHTemp.setCustomerName(customerName);//
				tnvoicePrintPoolHTemp.setCustomerId(((TmsCrvatInvReqBatchesLInParam)temps).getCustomerId());
				String customerNumber= ((TmsCrvatInvReqBatchesLInParam)temps).getCustomerNumber();//客户编号
				tnvoicePrintPoolHTemp.setCustomerNumber(customerNumber);
				String uuId = ContextUtils.getCurrentOrgId();
				tnvoicePrintPoolHTemp.setId(uuId);//ID uuid
			
				
				
				tnvoicePrintPoolHTemp.setTotalAmount(tempBigDecimal);
				tnvoicePrintPoolHTemp.setArchiveBaseDate(new Date());
				tnvoicePrintPoolHTemp.setBizOrgCode("");
				tnvoicePrintPoolHTemp.setCreatedBy(ContextUtils.getCurrentUserName());
				tnvoicePrintPoolHTemp.setCreateDate(new Date());
				tnvoicePrintPoolHTemp.setModifiedBy(ContextUtils.getCurrentUserName());
				tnvoicePrintPoolHTemp.setModifiedDate(new Date());
				tnvoicePrintPoolHTemp.setVersionId(0);
				invoicePrintPoolHlist.add(tnvoicePrintPoolHTemp);
				invoicePrintPoolLTemp.setId(ContextUtils.getCurrentOrgId());
				//{
					//10000000 发票限额
				//}
				
				
				invoicePrintPoolLTemp.setInvoicePrtPoolHId(uuId);//H ID
				invoicePrintPoolLTemp.setInvoiceAmount(tempBigDecimal);//发票打印池行数据和头数据一对一
				BigDecimal taxRate = new BigDecimal(((TmsCrvatInvReqBatchesLInParam)temps).getTaxRate());//税率
				invoicePrintPoolLTemp.setTaxRate(taxRate);
				
				String bizOrgCode = ((TmsCrvatInvReqBatchesLInParam)temps).getBizOrgCode();//
				invoicePrintPoolLTemp.setBizOrgCode(bizOrgCode);
				
				String inventoryNumber = ((TmsCrvatInvReqBatchesLInParam)temps).getInventoryItemNumber();
				invoicePrintPoolLTemp.setInventoryItemNumber(inventoryNumber);//商品及服务编码
			//	ContextUtils.getCurrentUserName();
				invoicePrintPoolLTemp.setArchiveBaseDate(new Date());
				invoicePrintPoolLTemp.setBizOrgCode("");
				invoicePrintPoolLTemp.setCreatedBy(ContextUtils.getCurrentUserName());
				invoicePrintPoolLTemp.setCreateDate(new Date());
				invoicePrintPoolLTemp.setModifiedBy(ContextUtils.getCurrentUserName());
				invoicePrintPoolLTemp.setModifiedDate(new Date());
				invoicePrintPoolLTemp.setVersionId(0);//crvatInvReqBatchesLId
				//BigDecimal taxRate 
				invoicePrintPoolLTemp.setCrvatInvReqBatchesLId(((TmsCrvatInvReqBatchesLInParam)temps).getId());
				invoicePrintPoolLs.add(invoicePrintPoolLTemp);
			}
			}
			
			
		}
		tmsCrvatInvReqBatchesLService.saveAll(invoicePrintPoolHlist);
		tmsCrvatInvReqBatchesLService.saveAll(invoicePrintPoolLs);
	}	
	public  int function(BigDecimal bigDecimal)
	{
		
		BigDecimal comBigDecimal = new BigDecimal(9999999);
		//List<Integer> bigDecimalList =new Arrayist<Integer>();
		int bigDecimalIntValue=0;
		if(bigDecimal.compareTo(comBigDecimal)==-1)
		{
		//	bigDecimalList.add(bigDecimal);
			return 0;
		}
		else {
			bigDecimalIntValue = bigDecimal.intValue();
			return bigDecimalIntValue/9999999;
		}
	}
	@ResponseBody
	@RequestMapping(value = "/removeTmsCrvatInvReqBatchesLs", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeTmsCrvatInvReqBatchesLs(@RequestParam String ids) {
		AssertHelper.notEmpty_assert(ids,"需要删除的用户不能为空");
		String[] tmsCrvatInvReqBatchesLIds=ids.split(",");
		//for(String tmsCrvatInvReqBatchesLId:tmsCrvatInvReqBatchesLIds){
			
		//}
	}
	@ResponseBody
	@RequestMapping(value = "/loadTmsCrvatInvReqBatchesL", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<TmsCrvatInvReqBatchesLInParam> loadTmsCrvatInvReqBatchesL(@RequestParam Map<String, Object> map) throws Exception {
		List result=tmsCrvatInvReqBatchesLService.findTmsCrvatInvReqBatchesLByParams(map);
		return result;
	}
	@ResponseBody
	@RequestMapping(value = "/loadAddTmsCrvatInvReqBatchesL", method = RequestMethod.POST)
	public TmsCrvatInvReqBatchesLInParam loadAddTmsCrvatInvReqBatchesL(@RequestParam Map<String, Object> map) throws Exception {
		TmsCrvatInvReqBatchesLInParam inParam=new TmsCrvatInvReqBatchesLInParam();
		return inParam;
	}
	@ResponseBody
	@RequestMapping(value = "/loadModifyTmsCrvatInvReqBatchesL", method = RequestMethod.POST)
	public TmsCrvatInvReqBatchesLInParam loadModifyTmsCrvatInvReqBatchesL(@RequestParam Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		TmsCrvatInvReqBatchesL entity=(TmsCrvatInvReqBatchesL)tmsCrvatInvReqBatchesLService.get(TmsCrvatInvReqBatchesL.class,id.toString());
		TmsCrvatInvReqBatchesLInParam inParam=tmsCrvatInvReqBatchesLService.convertTmsCrvatInvReqBatchesLToInParam(entity);
		return inParam;
	}
	
	@ResponseBody
	@RequestMapping(value = "/updateModifyTmsCrvatInvReqBatchesL", method = RequestMethod.POST)
	public void updateModifyTmsCrvatInvReqBatchesL(TmsCrvatInvReqBatchesLInParam inParam) throws Exception {
		TmsCrvatInvReqBatchesL entity=(TmsCrvatInvReqBatchesL)tmsCrvatInvReqBatchesLService.get(TmsCrvatInvReqBatchesL.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		tmsCrvatInvReqBatchesLService.update(entity);
	}
}

