package com.deloitte.tms.vat.salesinvoice.view;

// Generated by bo.wang with ling2.autoproject

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.base.cache.model.PrinterTerminalNode;
import com.deloitte.tms.base.cache.utils.PrintOrgCacheUtils;
import com.deloitte.tms.base.masterdata.model.TmsMdEquipment;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntity;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.context.utils.ContextUtils;
import com.deloitte.tms.pl.job.model.JobDefinition;
import com.deloitte.tms.pl.workflow.utils.IDGenerator;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.IdGenerator;
import com.deloitte.tms.vat.salesinvoice.dao.InvoiceSpecialContractBathDao;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolH;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolHInParam;
import com.deloitte.tms.vat.salesinvoice.model.InvoicePrintPoolL;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvReqBatchesH;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvReqBatchesL;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvReqBatchesLInParam;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceSpecialContractBathService;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceSpecialContractService;
import com.deloitte.tms.vat.salesinvoice.service.TmsCrvatInvReqBatchesLService;

/**
 * Home object for domain model class TmsCrvatInvReqBatchesL.
 * 
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("tmsCrvatInvReqBatchesL")
public class TmsCrvatInvReqBatchesLController extends BaseController {
	@Resource
	TmsCrvatInvReqBatchesLService tmsCrvatInvReqBatchesLService;

	@Resource
	InvoiceSpecialContractBathService invoiceSpecialContractServiceImpli;

	@Resource
	InvoiceSpecialContractBathDao invoiceSpecialContractBathDaoImpl;

	@RequestMapping(value = "/initTmsCrvatInvReqBatchesL", method = RequestMethod.GET)
	public String initTmsCrvatInvReqBatchesL() throws Exception {
		return "vat/tmscrvatinvreqbatchesl/tmsCrvatInvReqBatchesL";
	}

	@ResponseBody
	@RequestMapping(value = "/loadTmsCrvatInvReqBatchesLPage", method = RequestMethod.POST)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadTmsCrvatInvReqBatchesLPage(
			@RequestParam Map<String, Object> parameter) throws Exception {
		DaoPage daoPage = tmsCrvatInvReqBatchesLService
				.findTmsCrvatInvReqBatchesLByParams(parameter,
						PageUtils.getPageNumber(parameter),
						PageUtils.getPageSize(parameter));
		return daoPage;
	}

	@ResponseBody
	@RequestMapping(value = "/saveTmsCrvatInvReqBatchesL", method = RequestMethod.POST)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTmsCrvatInvReqBatchesL(TmsCrvatInvReqBatchesLInParam inParam)
			throws Exception {
		TmsCrvatInvReqBatchesL entity = tmsCrvatInvReqBatchesLService
				.convertTmsCrvatInvReqBatchesLInParamToEntity(inParam);
		if (entity.getId() == null) {
			tmsCrvatInvReqBatchesLService.save(entity);
		} else {
			tmsCrvatInvReqBatchesLService.update(entity);
		}
		inParam.setId(entity.getId());
	}

	@ResponseBody
	@RequestMapping(value = "/batchSaveTmsCrvatInvReqBatchesLToPrintPool", method = RequestMethod.POST)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void batchSaveTmsCrvatInvReqBatchesLToPrintPool(@RequestParam("id") String clientKeys,HttpServletResponse response) throws Exception {
		for(String clientId:clientKeys.split(",")){//根据ID拆分批量审批
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("crvatInvReqBatchesHId", clientId);//根据特殊批量开票申请ID 查询 行数据
		//	params.put("status", "30");//30 代表已经提交 50 代表已经审批
			List<TmsCrvatInvReqBatchesLInParam> tmsCrvatInvReqBatchesL = new ArrayList<TmsCrvatInvReqBatchesLInParam>();
		
			tmsCrvatInvReqBatchesL = tmsCrvatInvReqBatchesLService
					.findTmsCrvatInvReqBatchesLByParams(params);
//			List<InvoicePrintPoolH> invoicePrintPoolHlist = new ArrayList<InvoicePrintPoolH>();
//			List<InvoicePrintPoolL> invoicePrintPoolLs = new ArrayList<InvoicePrintPoolL>();
			Iterator iterator = tmsCrvatInvReqBatchesL.listIterator();
			InvoicePrintPoolH tnvoicePrintPoolHTemp = new InvoicePrintPoolH();
			InvoicePrintPoolL invoicePrintPoolLTemp = new InvoicePrintPoolL();
			TmsCrvatInvReqBatchesH tmsCrvatInvReqBatchesHNeedToUpdate = new TmsCrvatInvReqBatchesH();
			while (iterator.hasNext()) {
				TmsCrvatInvReqBatchesLInParam temps = (TmsCrvatInvReqBatchesLInParam) iterator
						.next();
				BigDecimal totalAmount =temps.getInvoiceAmount();// 金额
				long loopTimes = function(totalAmount);
				if (loopTimes == 0) {
					String invoiceReqNumber = temps.getCrvatInvoiceReqNumber();// 申请单编号
					String orgId = temps.getOrgId();// 组织编号
					TmsMdEquipment tmsMdEquipment = invoiceSpecialContractServiceImpli
							.getTmsMdEquipment(temps.getLegalEntityId());// 查询终端信息
					//销售方信息
					TmsMdLegalEntity tmsMdLegalEntity = (TmsMdLegalEntity) invoiceSpecialContractServiceImpli.findById(TmsMdLegalEntity.class, temps.getLegalEntityId());
					tnvoicePrintPoolHTemp.setLegalEntityCode(tmsMdLegalEntity.getLegalEntityCode());//销方纳税人编码
					tnvoicePrintPoolHTemp.setLegalEntityName(tmsMdLegalEntity.getLegalEntityName());//销方纳税名称
					tnvoicePrintPoolHTemp.setLegalEntityId(tmsMdLegalEntity.getId());//销方纳税人ID
					tnvoicePrintPoolHTemp.setBankAccountNum(tmsMdLegalEntity.getBankAccountNum());//销方开户银行账号
					tnvoicePrintPoolHTemp.setBankBranchName(tmsMdLegalEntity.getBankBranchName());//销方开户银行
					tnvoicePrintPoolHTemp.setRegistrationContactPhone(tmsMdLegalEntity.getRegistrationContactPhone());//销方地址联系电话
					tnvoicePrintPoolHTemp.setRegistrationContactAddress(tmsMdLegalEntity.getRegistrationContactAddress());//销方地址
					// 终端名称
					tnvoicePrintPoolHTemp.setEquipmentName(tmsMdEquipment
							.getEquipmentName());
					// 终端ID
					tnvoicePrintPoolHTemp.setEquipmentId(tmsMdEquipment.getId());
					tnvoicePrintPoolHTemp.setEquipmentCode(tmsMdEquipment
							.getEquipmentCode());
					String customerName = temps.getCustomerName();// 客户信息
					tnvoicePrintPoolHTemp.setCustomerName(customerName);//
					tnvoicePrintPoolHTemp.setCustomerId(temps.getCustomerId());
					tnvoicePrintPoolHTemp.setCustRegistrationAddress(temps.getCustRegistrationAddress());//地址
					String customerNumber = temps.getCustomerNumber();// 客户编号
					tnvoicePrintPoolHTemp.setCustomerNumber(customerNumber);
					tnvoicePrintPoolHTemp.setCustContactPhone(temps.getContactPhone());//购方电话
					tnvoicePrintPoolHTemp.setCustDepositBankName(temps.getCustDepositBankName());//开户行
					tnvoicePrintPoolHTemp.setCustDepositBankNumber(temps.getCustDepositBankNumber());//开户行编号
					//6222208111014503024
					if(temps.getCustDepositBankAccountNum()!=null)
					{
					tnvoicePrintPoolHTemp.setCustDepositBankAccountNum(temps.getCustDepositBankAccountNum());//银行账号
					}
					else {
						tnvoicePrintPoolHTemp.setCustDepositBankAccountNum("6222208111014503024");
					}
					tnvoicePrintPoolHTemp.setCustRegistrationNumber(temps.getCustRegistrationNumber());//证件编号
					tnvoicePrintPoolHTemp.setCustContactName(temps.getContactName());//购方联系人
					String uuId = IdGenerator.getUUID();
					tnvoicePrintPoolHTemp.setInvoicePrintStatus("10");// 待打印
					tnvoicePrintPoolHTemp.setId(uuId);// ID uuid
					tnvoicePrintPoolHTemp.setCrvatInvoicePreHId(ContextUtils
							.getCurrentOrgId());// 发票打印需要ID不可以为空
					tnvoicePrintPoolHTemp.setTotalAmount(totalAmount);
					tnvoicePrintPoolHTemp.setArchiveBaseDate(new Date());
					tnvoicePrintPoolHTemp.setBizOrgCode(tmsMdLegalEntity.getBizOrgCode());
					tnvoicePrintPoolHTemp.setInvoicePrintBy(ContextUtils
							.getCurrentUserName());// 发票开具人
					tnvoicePrintPoolHTemp.setCreatedBy(ContextUtils
							.getCurrentUserName());
					tnvoicePrintPoolHTemp.setCreateDate(new Date());
					tnvoicePrintPoolHTemp.setModifiedBy(ContextUtils
							.getCurrentUserName());
					tnvoicePrintPoolHTemp.setModifiedDate(new Date());
					tnvoicePrintPoolHTemp.setVersionId(0);//
					tnvoicePrintPoolHTemp.setInvoicePrintDate(new Date());
					if ("2".equals(temps.getCustomerType())) {
						tnvoicePrintPoolHTemp.setInvoiceCategory("2");// 一般纳税人
					} else {
						tnvoicePrintPoolHTemp.setInvoiceCategory("1");// 小规模纳税人
					}
					// ((TmsCrvatInvReqBatchesLInParam)temps).getCustomerType()="";
					tnvoicePrintPoolHTemp.setInvoiceCategory("1");
				//	invoicePrintPoolHlist.add(tnvoicePrintPoolHTemp);
					tmsCrvatInvReqBatchesLService.save(tnvoicePrintPoolHTemp);
					invoicePrintPoolLTemp.setId(IdGenerator.getUUID());

					invoicePrintPoolLTemp.setInvoicePrtPoolHId(uuId);// H ID
					invoicePrintPoolLTemp.setInvoiceAmount(totalAmount);// 发票打印池行数据和头数据一对一
					BigDecimal taxRate = new BigDecimal(temps.getTaxRate());// 税率
					invoicePrintPoolLTemp.setTaxRate(taxRate);// 税额
					Double vatAmountDouble  =taxRate.doubleValue()*totalAmount.doubleValue();
					BigDecimal vatAmount = new BigDecimal(vatAmountDouble);
					invoicePrintPoolLTemp.setVatAmount(vatAmount);//税额
					String bizOrgCode = temps.getBizOrgCode();//
					//invoicePrintPoolLTemp.setBizOrgCode(bizOrgCode);
					String inventoryNumber = temps.getInventoryItemNumber();
					invoicePrintPoolLTemp.setInventoryItemNumber(inventoryNumber);// 商品及服务编码
					invoicePrintPoolLTemp.setInventoryItemDescripton(temps
							.getInventoryItemDescripton());//商品及服务名称
					invoicePrintPoolLTemp.setInventoryItemId(temps.getInventoryItemId());//商品及服务ID
					invoicePrintPoolLTemp.setArchiveBaseDate(new Date());
					invoicePrintPoolLTemp.setPriceOfUnit(totalAmount);// 单价
					invoicePrintPoolLTemp.setBizOrgCode(tmsMdLegalEntity.getBizOrgCode());
					invoicePrintPoolLTemp.setInventoryItemQty(1);// 商品数量默认是1
					invoicePrintPoolLTemp.setCreatedBy(ContextUtils
							.getCurrentUserName());
					invoicePrintPoolLTemp.setCreateDate(new Date());
					invoicePrintPoolLTemp.setModifiedBy(ContextUtils
							.getCurrentUserName());
					invoicePrintPoolLTemp.setModifiedDate(new Date());
					invoicePrintPoolLTemp.setVersionId(0);// crvatInvReqBatchesLId
					invoicePrintPoolLTemp.setCrvatInvReqBatchesLId(temps.getId());
					//invoicePrintPoolLs.add(invoicePrintPoolLTemp);
					tmsCrvatInvReqBatchesLService.save(invoicePrintPoolLTemp);
				} else {
					for (int i = 0; i < loopTimes; i++) {

						// int
						BigDecimal tempBigDecimal = new BigDecimal(9999999);
						String invoiceReqNumber = temps.getCrvatInvoiceReqNumber();// 申请单编号
						String orgId = temps.getOrgId();// 组织编号
						//销售方信息
						TmsMdLegalEntity tmsMdLegalEntity = (TmsMdLegalEntity) invoiceSpecialContractServiceImpli.findById(TmsMdLegalEntity.class, temps.getLegalEntityId());
						tnvoicePrintPoolHTemp.setLegalEntityCode(tmsMdLegalEntity.getLegalEntityCode());//销方纳税人编码
						tnvoicePrintPoolHTemp.setLegalEntityName(tmsMdLegalEntity.getLegalEntityName());//销方纳税名称
						tnvoicePrintPoolHTemp.setLegalEntityId(tmsMdLegalEntity.getId());//销方纳税人ID
						tnvoicePrintPoolHTemp.setBankAccountNum(tmsMdLegalEntity.getBankAccountNum());//销方开户银行账号
						tnvoicePrintPoolHTemp.setBankBranchName(tmsMdLegalEntity.getBankBranchName());//销方开户银行
						tnvoicePrintPoolHTemp.setRegistrationContactPhone(tmsMdLegalEntity.getRegistrationContactPhone());//销方地址联系电话
						tnvoicePrintPoolHTemp.setRegistrationContactAddress(tmsMdLegalEntity.getRegistrationContactAddress());//销方地址
						TmsMdEquipment tmsMdEquipment = invoiceSpecialContractServiceImpli
								.getTmsMdEquipment(((TmsCrvatInvReqBatchesLInParam) temps)
										.getLegalEntityId());// 查询终端信息
						// 终端名称
						tnvoicePrintPoolHTemp.setEquipmentName(tmsMdEquipment
								.getEquipmentName());
						// 终端ID
						tnvoicePrintPoolHTemp
								.setEquipmentId(tmsMdEquipment.getId());
						tnvoicePrintPoolHTemp.setEquipmentCode(tmsMdEquipment
								.getEquipmentCode());
						String customerName = temps.getCustomerName();// 客户名称
						tnvoicePrintPoolHTemp.setCustomerName(customerName);//
						tnvoicePrintPoolHTemp.setCustomerId(temps.getCustomerId());
						String customerNumber = temps.getCustomerNumber();// 客户编号
						tnvoicePrintPoolHTemp.setCustRegistrationAddress(temps.getCustRegistrationAddress());//地址
						tnvoicePrintPoolHTemp.setCustContactPhone(temps.getContactPhone());//电话
						tnvoicePrintPoolHTemp.setCustomerNumber(customerNumber);
						tnvoicePrintPoolHTemp.setCustDepositBankName(temps.getCustDepositBankName());//开户行
						tnvoicePrintPoolHTemp.setCustDepositBankNumber(temps.getCustDepositBankNumber());//开户行编号
						//6222208111014503024
						if(temps.getCustDepositBankAccountNum()!=null)
						{
						tnvoicePrintPoolHTemp.setCustDepositBankAccountNum(temps.getCustDepositBankAccountNum());//银行账号
						}
						else {
							tnvoicePrintPoolHTemp.setCustDepositBankAccountNum("6222208111014503024");
						}
						tnvoicePrintPoolHTemp.setCustRegistrationNumber(temps.getCustRegistrationNumber());//证件编号
						tnvoicePrintPoolHTemp.setCustContactName(temps.getContactName());//联系人
						String uuId = IdGenerator.getUUID();
						tnvoicePrintPoolHTemp.setInvoicePrintStatus("10");// 待打印
						tnvoicePrintPoolHTemp.setId(uuId);// ID uuid
						tnvoicePrintPoolHTemp.setInvoicePrintDate(new Date());// 发票打印日期
						if ("1".equals(temps.getCustomerType())) {
							tnvoicePrintPoolHTemp.setInvoiceCategory("1");// 一般纳税人
						} else {
							tnvoicePrintPoolHTemp.setInvoiceCategory("2");// 小规模纳税人
						}
						tnvoicePrintPoolHTemp.setCrvatInvoicePreHId(ContextUtils
								.getCurrentOrgId());// 发票打印需要参数
						tnvoicePrintPoolHTemp.setTotalAmount(tempBigDecimal);
						tnvoicePrintPoolHTemp.setArchiveBaseDate(new Date());
						tnvoicePrintPoolHTemp.setBizOrgCode(tmsMdLegalEntity.getBizOrgCode());
						tnvoicePrintPoolHTemp.setCreatedBy(ContextUtils
								.getCurrentUserName());
						tnvoicePrintPoolHTemp.setCreateDate(new Date());
						tnvoicePrintPoolHTemp.setModifiedBy(ContextUtils
								.getCurrentUserName());
						tnvoicePrintPoolHTemp.setModifiedDate(new Date());
						tnvoicePrintPoolHTemp.setVersionId(0);
						tmsCrvatInvReqBatchesLService.save(tnvoicePrintPoolHTemp);
						//invoicePrintPoolHlist.add(tnvoicePrintPoolHTemp);
						invoicePrintPoolLTemp.setId(IdGenerator.getUUID());
						invoicePrintPoolLTemp.setInvoicePrtPoolHId(uuId);// H ID
						invoicePrintPoolLTemp.setInvoiceAmount(tempBigDecimal);// 发票打印池行数据和头数据一对一
						BigDecimal taxRate = new BigDecimal(temps.getTaxRate());// 税率
						invoicePrintPoolLTemp.setTaxRate(taxRate);// 税额
						Double vatAmountDouble  =taxRate.doubleValue()*tempBigDecimal.doubleValue();
						BigDecimal vatAmount = new BigDecimal(vatAmountDouble);
						invoicePrintPoolLTemp.setVatAmount(vatAmount);//税额
						//invoicePrintPoolLTemp.setVatAmount(tempBigDecimal);
						String bizOrgCode = temps.getBizOrgCode();//
						//invoicePrintPoolLTemp.setBizOrgCode(bizOrgCode);

						String inventoryNumber = temps.getInventoryItemNumber();
						invoicePrintPoolLTemp
								.setInventoryItemNumber(inventoryNumber);// 商品及服务编码
						invoicePrintPoolLTemp.setInventoryItemQty(1);// 商品数量默认是1
						invoicePrintPoolLTemp.setInventoryItemDescripton(temps
								.getInventoryItemDescripton());
						invoicePrintPoolLTemp.setInventoryItemId(temps.getInventoryItemId());//商品及服务ID
						invoicePrintPoolLTemp.setArchiveBaseDate(new Date());
						invoicePrintPoolLTemp.setBizOrgCode(tmsMdLegalEntity.getBizOrgCode());
						invoicePrintPoolLTemp.setPriceOfUnit(tempBigDecimal);// 单价
						invoicePrintPoolLTemp.setCreatedBy(ContextUtils
								.getCurrentUserName());
						invoicePrintPoolLTemp.setCreateDate(new Date());
						tnvoicePrintPoolHTemp.setInvoicePrintBy(ContextUtils
								.getCurrentUserName());// 发票开具人
						invoicePrintPoolLTemp.setModifiedBy(ContextUtils
								.getCurrentUserName());
						invoicePrintPoolLTemp.setModifiedDate(new Date());
						invoicePrintPoolLTemp.setVersionId(0);// crvatInvReqBatchesLId
						// BigDecimal taxRate
						invoicePrintPoolLTemp.setCrvatInvReqBatchesLId(temps
								.getId());
						tmsCrvatInvReqBatchesLService.save(invoicePrintPoolLTemp);
					//	invoicePrintPoolLs.add(invoicePrintPoolLTemp);
					}
					if ((totalAmount.doubleValue() - 9999999 * loopTimes) > 0) {
						BigDecimal tempBigDecimal = new BigDecimal(
								totalAmount.doubleValue() - 9999999 * loopTimes);
						String invoiceReqNumber = temps.getCrvatInvoiceReqNumber();// 申请单编号
						String orgId = temps.getOrgId();// 组织编号
						//销售方信息
						TmsMdLegalEntity tmsMdLegalEntity = (TmsMdLegalEntity) invoiceSpecialContractServiceImpli.findById(TmsMdLegalEntity.class, temps.getLegalEntityId());
						tnvoicePrintPoolHTemp.setLegalEntityCode(tmsMdLegalEntity.getLegalEntityCode());//销方纳税人编码
						tnvoicePrintPoolHTemp.setLegalEntityName(tmsMdLegalEntity.getLegalEntityName());//销方纳税名称
						tnvoicePrintPoolHTemp.setLegalEntityId(tmsMdLegalEntity.getId());//销方纳税人ID
						tnvoicePrintPoolHTemp.setBankAccountNum(tmsMdLegalEntity.getBankAccountNum());//销方开户银行账号
						tnvoicePrintPoolHTemp.setBankBranchName(tmsMdLegalEntity.getBankBranchName());//销方开户银行
						tnvoicePrintPoolHTemp.setRegistrationContactPhone(tmsMdLegalEntity.getRegistrationContactPhone());//销方地址联系电话
						tnvoicePrintPoolHTemp.setRegistrationContactAddress(tmsMdLegalEntity.getRegistrationContactAddress());//销方地址
						TmsMdEquipment tmsMdEquipment = invoiceSpecialContractServiceImpli
								.getTmsMdEquipment(((TmsCrvatInvReqBatchesLInParam) temps)
										.getLegalEntityId());// 查询终端信息
						// 终端名称
						tnvoicePrintPoolHTemp.setEquipmentName(tmsMdEquipment
								.getEquipmentName());
						// 终端ID
						tnvoicePrintPoolHTemp
								.setEquipmentId(tmsMdEquipment.getId());
						tnvoicePrintPoolHTemp.setEquipmentCode(tmsMdEquipment
								.getEquipmentCode());
						String customerName = temps.getCustomerName();// 客户名称
						tnvoicePrintPoolHTemp.setCustomerName(customerName);//
						tnvoicePrintPoolHTemp.setCustomerId(temps.getCustomerId());
						String customerNumber = temps.getCustomerNumber();// 客户编号
						tnvoicePrintPoolHTemp.setCustomerNumber(customerNumber);
						tnvoicePrintPoolHTemp.setCustRegistrationAddress(temps.getCustRegistrationAddress());//地址
						tnvoicePrintPoolHTemp.setCustContactPhone(temps.getContactPhone());//电话
						tnvoicePrintPoolHTemp.setCustDepositBankName(temps.getCustDepositBankName());//开户行
						tnvoicePrintPoolHTemp.setCustDepositBankNumber(temps.getCustDepositBankNumber());//开户行编号
						//6222208111014503024
						if(temps.getCustDepositBankAccountNum()!=null)
						{
						tnvoicePrintPoolHTemp.setCustDepositBankAccountNum(temps.getCustDepositBankAccountNum());//银行账号
						}
						else {
							tnvoicePrintPoolHTemp.setCustDepositBankAccountNum("6222208111014503024");
						}
						tnvoicePrintPoolHTemp.setCustRegistrationNumber(temps.getCustRegistrationNumber());//证件编号
						tnvoicePrintPoolHTemp.setCustContactName(temps.getContactName());//联系人
						String uuId = IdGenerator.getUUID();
						tnvoicePrintPoolHTemp.setInvoicePrintStatus("10");// 待打印
						tnvoicePrintPoolHTemp.setInvoicePrintDate(new Date());// 发票打印日期
						tnvoicePrintPoolHTemp.setId(uuId);// ID uuid
						tnvoicePrintPoolHTemp.setCrvatInvoicePreHId(ContextUtils
								.getCurrentOrgId());// 发票打印需要参数
						if ("1".equals(temps.getCustomerType())) {
							tnvoicePrintPoolHTemp.setInvoiceCategory("1");// 一般纳税人
						} else {
							tnvoicePrintPoolHTemp.setInvoiceCategory("2");// 小规模纳税人
						}
						tnvoicePrintPoolHTemp.setTotalAmount(tempBigDecimal);
						tnvoicePrintPoolHTemp.setArchiveBaseDate(new Date());
						tnvoicePrintPoolHTemp.setBizOrgCode(tmsMdLegalEntity.getBizOrgCode());
						tnvoicePrintPoolHTemp.setInvoicePrintBy(ContextUtils
								.getCurrentUserName());// 发票开具人
						tnvoicePrintPoolHTemp.setCreatedBy(ContextUtils
								.getCurrentUserName());
						tnvoicePrintPoolHTemp.setCreateDate(new Date());
						tnvoicePrintPoolHTemp.setModifiedBy(ContextUtils
								.getCurrentUserName());
						tnvoicePrintPoolHTemp.setModifiedDate(new Date());
						tnvoicePrintPoolHTemp.setVersionId(0);
						tmsCrvatInvReqBatchesLService.save(tnvoicePrintPoolHTemp);
					//	invoicePrintPoolHlist.add(tnvoicePrintPoolHTemp);
						invoicePrintPoolLTemp.setId(IdGenerator.getUUID());
						invoicePrintPoolLTemp.setPriceOfUnit(tempBigDecimal);// 单价
						invoicePrintPoolLTemp.setInvoicePrtPoolHId(uuId);// H ID
						invoicePrintPoolLTemp.setInvoiceAmount(tempBigDecimal);// 发票打印池行数据和头数据一对一
						BigDecimal taxRate = new BigDecimal(temps.getTaxRate());// 税率
						invoicePrintPoolLTemp.setTaxRate(taxRate);// 税额
						Double vatAmountDouble  =taxRate.doubleValue()*tempBigDecimal.doubleValue();
						BigDecimal vatAmount = new BigDecimal(vatAmountDouble);
						invoicePrintPoolLTemp.setVatAmount(vatAmount);//税额
						//invoicePrintPoolLTemp.setVatAmount(totalAmount);
						String bizOrgCode = temps.getBizOrgCode();//
					//	invoicePrintPoolLTemp.setBizOrgCode(bizOrgCode);
						String inventoryNumber = temps.getInventoryItemNumber();
						invoicePrintPoolLTemp
								.setInventoryItemNumber(inventoryNumber);// 商品及服务编码
						invoicePrintPoolLTemp.setInventoryItemQty(1);// 商品数量默认是1
						invoicePrintPoolLTemp.setInventoryItemDescripton(temps
								.getInventoryItemDescripton());
						invoicePrintPoolLTemp.setInventoryItemId(temps.getInventoryItemId());//商品及服务ID
						invoicePrintPoolLTemp.setArchiveBaseDate(new Date());
						invoicePrintPoolLTemp.setBizOrgCode(tmsMdLegalEntity.getBizOrgCode());
						invoicePrintPoolLTemp.setCreatedBy(ContextUtils
								.getCurrentUserName());
						invoicePrintPoolLTemp.setCreateDate(new Date());
						invoicePrintPoolLTemp.setModifiedBy(ContextUtils
								.getCurrentUserName());
						invoicePrintPoolLTemp.setModifiedDate(new Date());
						invoicePrintPoolLTemp.setVersionId(0);// crvatInvReqBatchesLId
						invoicePrintPoolLTemp.setCrvatInvReqBatchesLId(temps
								.getId());
						tmsCrvatInvReqBatchesLService.save(invoicePrintPoolLTemp);
					//	invoicePrintPoolLs.add(invoicePrintPoolLTemp);
					}
				}
			
			}
			if(tmsCrvatInvReqBatchesL.size()>0)
			{
				tmsCrvatInvReqBatchesHNeedToUpdate=(TmsCrvatInvReqBatchesH) tmsCrvatInvReqBatchesLService.findById(TmsCrvatInvReqBatchesH.class, tmsCrvatInvReqBatchesL.get(0).getCrvatInvReqBatchesHId());
				tmsCrvatInvReqBatchesHNeedToUpdate.setStatus("50");//已经拆分完成的数据更新
				tmsCrvatInvReqBatchesLService.update(tmsCrvatInvReqBatchesHNeedToUpdate);
			}
		}
		
	
		JSONObject object = new JSONObject();
		object.put("result", "true");
		object.put("success", "true");
		retJson(response, object);
		
//		tmsCrvatInvReqBatchesLService.saveAll(invoicePrintPoolHlist);
//		tmsCrvatInvReqBatchesLService.saveAll(invoicePrintPoolLs);
	}

	public long function(BigDecimal bigDecimal) {

		BigDecimal comBigDecimal = new BigDecimal(9999999);
		// List<Integer> bigDecimalList =new Arrayist<Integer>();
		long bigDecimalIntValue = 0;
		if (bigDecimal.compareTo(comBigDecimal) == -1) {
			// bigDecimalList.add(bigDecimal);
			return 0;
		} else {
			bigDecimalIntValue = bigDecimal.longValue();
			return bigDecimalIntValue / 9999999;
		}
	}

	@ResponseBody
	@RequestMapping(value = "/removeTmsCrvatInvReqBatchesLs", method = RequestMethod.POST)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeTmsCrvatInvReqBatchesLs(@RequestParam String ids) {
		AssertHelper.notEmpty_assert(ids, "需要删除的用户不能为空");
		String[] tmsCrvatInvReqBatchesLIds = ids.split(",");
		// for(String tmsCrvatInvReqBatchesLId:tmsCrvatInvReqBatchesLIds){

		// }
	}

	@ResponseBody
	@RequestMapping(value = "/loadTmsCrvatInvReqBatchesL", method = RequestMethod.POST)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<TmsCrvatInvReqBatchesLInParam> loadTmsCrvatInvReqBatchesL(
			@RequestParam Map<String, Object> map) throws Exception {
		List result = tmsCrvatInvReqBatchesLService
				.findTmsCrvatInvReqBatchesLByParams(map);
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "/loadAddTmsCrvatInvReqBatchesL", method = RequestMethod.POST)
	public TmsCrvatInvReqBatchesLInParam loadAddTmsCrvatInvReqBatchesL(
			@RequestParam Map<String, Object> map) throws Exception {
		TmsCrvatInvReqBatchesLInParam inParam = new TmsCrvatInvReqBatchesLInParam();
		return inParam;
	}

	@ResponseBody
	@RequestMapping(value = "/loadModifyTmsCrvatInvReqBatchesL", method = RequestMethod.POST)
	public TmsCrvatInvReqBatchesLInParam loadModifyTmsCrvatInvReqBatchesL(
			@RequestParam Map<String, Object> map) throws Exception {
		Object id = map.get("id");
		AssertHelper.notEmpty_assert(id, "编辑的主键不能为空");
		TmsCrvatInvReqBatchesL entity = (TmsCrvatInvReqBatchesL) tmsCrvatInvReqBatchesLService
				.get(TmsCrvatInvReqBatchesL.class, id.toString());
		TmsCrvatInvReqBatchesLInParam inParam = tmsCrvatInvReqBatchesLService
				.convertTmsCrvatInvReqBatchesLToInParam(entity);
		return inParam;
	}

	@ResponseBody
	@RequestMapping(value = "/updateModifyTmsCrvatInvReqBatchesL", method = RequestMethod.POST)
	public void updateModifyTmsCrvatInvReqBatchesL(
			TmsCrvatInvReqBatchesLInParam inParam) throws Exception {
		TmsCrvatInvReqBatchesL entity = (TmsCrvatInvReqBatchesL) tmsCrvatInvReqBatchesLService
				.get(TmsCrvatInvReqBatchesL.class, inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		tmsCrvatInvReqBatchesLService.update(entity);
	}
}
