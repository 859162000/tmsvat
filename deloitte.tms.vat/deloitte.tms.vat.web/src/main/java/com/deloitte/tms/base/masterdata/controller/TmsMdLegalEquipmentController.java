package com.deloitte.tms.base.masterdata.controller;

// Generated by bo.wang with ling2.autoproject

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.xmlbeans.impl.xb.xsdschema.Public;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.base.masterdata.model.TmsMdEquipment;
import com.deloitte.tms.base.masterdata.model.TmsMdEquipmentInParam;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntity;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntityInParam;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEquipment;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEquipmentInParam;
import com.deloitte.tms.base.masterdata.service.TmsMdLegalEntityService;
import com.deloitte.tms.base.masterdata.service.TmsMdLegalEquipmentService;
import com.deloitte.tms.pl.core.commons.enums.DataStatus;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.dao.IDao;
import com.deloitte.tms.pl.core.dao.impl.BaseDaoSimple;
import com.deloitte.tms.pl.job.model.JobDefinition;
import com.deloitte.tms.pl.security.model.impl.DefaultUrl;
import com.deloitte.tms.pl.security.service.IDeptService;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.FunctionTreeNode;
import com.deloitte.tms.vat.core.common.IdGenerator;
import com.deloitte.tms.vat.core.common.TreeGenerator;

/**
 * Home object for domain model class TmsMdLegalEquipment.
 * 
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Controller
public class TmsMdLegalEquipmentController extends BaseController {

	public static final String SPE = "#xDeloitte#x";
	public static final String IDSPE = "#xfxDeloitte#";

	@Resource
	TmsMdLegalEquipmentService tmsMdLegalEquipmentService;
	@Resource(name = BaseDaoSimple.BEAN_ID)
	IDao dao;
	
	 @Resource TmsMdLegalEntityService tmsMdLegalEntityService;
	 

	/**
	 * inin tree of legal equipment on page left 〈一句话功能简述〉 功能详细描述
	 * 
	 * @param response
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 */

	@RequestMapping("legalEquipment/treeLegaEquipmentNew.do")
	public void treeLegaEquipment(HttpServletResponse response) {

		try {

			List<TmsMdLegalEquipmentInParam> legEqusInPara = tmsMdLegalEquipmentService
					.findTmsMdLegalEquipmentByParams1(null);

			List<FunctionTreeNode> treeNodes = FunctionTreeNode
					.generalConvertTreeNodeList(legEqusInPara);

			List<FunctionTreeNode> results = TreeGenerator.buildTree(treeNodes);

			JSONArray jsonArray = JSONArray.fromObject(results);

			System.out.println("------treeLegaEquipment return: " + jsonArray);
			retJsonArray(response, jsonArray);

		} catch (Exception e) {
			System.out
					.println("treeLegaEquipment------------------exception as below:");
			System.out.println("treeLegaEquipment------------------exception:"
					+ e.getMessage());
		}
	}

	/**
	 * 
	 * list no used legal and equipment divided 功能详细描述
	 * 
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 */
	@RequestMapping("legalEquipment/listLegalFreeNew.do")
	public void listLegalFree(HttpServletResponse response) {

		try {
			// select LEGAL_ENTITY_ID from tms_md_legal_entity x where
			// x.LEGAL_ENTITY_ID not in (select legal_Entity_Id from
			// tms_md_legal_equipment)

			String t1 = TmsMdLegalEntity.class.getName();
			String checkT = TmsMdLegalEquipment.class.getName();

			StringBuffer legalSb = new StringBuffer(" from ");

			legalSb.append(t1)
					.append("  target where   1=1 and target.id not in (select legalEntityId from  ")
					.append(checkT).append(" )");

			System.out.println("listLegalFreeNew will run hql: "
					+ legalSb.toString());
			List<TmsMdLegalEntity> legalList = tmsMdLegalEquipmentService
					.findBy(legalSb, new HashMap());

			List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();

			Iterator<TmsMdLegalEntity> iter = legalList.iterator();

			while (iter.hasNext()) {

				TmsMdLegalEntity e = iter.next();

				Map<String, Object> map = new HashMap<String, Object>();

				map.put("id", e.getId());
				map.put("legalEntityName", e.getLegalEntityName());

				results.add(map);
			}

			JSONArray jsonArray = JSONArray.fromObject(results);

			System.out
					.println("LegalEquipmentController > listLegalFree return: "
							+ jsonArray);

			this.retJsonArray(response, jsonArray);

			System.out.println("---------------");

		} catch (Exception e) {

			System.out.println(e.getMessage());
			this.returnFail(response);
		}
	}

	/**
	 * 
	 * list no used legal and equipment divided 功能详细描述
	 * 
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 */
	@RequestMapping("legalEquipment/listEquipmentFreeNew.do")
	public void listEquipmentFree(HttpServletResponse response) {

		try {

			String t1 = TmsMdEquipment.class.getName();
			String checkT = TmsMdLegalEquipment.class.getName();

			StringBuffer eqSb = new StringBuffer(" from ");

			eqSb.append(t1)
					.append("  target where   1=1 and target.id not in (select equipmentId from  ")
					.append(checkT).append(" )");

			System.out.println("listEquipmentFreeNew will run hql: "
					+ eqSb.toString());

			List<TmsMdEquipment> equList = this.tmsMdLegalEquipmentService
					.findBy(eqSb, new HashMap());

			Iterator<TmsMdEquipment> iter = equList.iterator();

			List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();

			while (iter.hasNext()) {

				TmsMdEquipment e = iter.next();

				Map<String, Object> map = new HashMap<String, Object>();

				map.put("id", e.getId());
				map.put("equipmentName", e.getEquipmentName());

				results.add(map);
			}

			JSONArray jsonArray = JSONArray.fromObject(results);

			System.out
					.println("LegalEquipmentController > listEquipmentFree return: "
							+ jsonArray);

			this.retJsonArray(response, jsonArray);

			System.out.println("---------------");

		} catch (Exception e) {

			this.returnFail(response);
		}
	}

	/**
	 * 
	 * 把纳税主体 加入树， 作为当前选择 纳税主体的 下级 功能详细描述
	 * 
	 * @param response
	 * @param tmsMdLegalEquipment
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 */
	@RequestMapping("legalEquipment/addLegalIntoTreeNew.do")
	public void addLegalIntoTree(String nowLegalEquId, String willNewLegalid,
			String willNewLegalName, HttpServletResponse response) {
		// public void addLegalIntoTree(@ModelAttribute("tmsMdLegalEquipment")
		// TmsMdLegalEquipment tmsMdLegalEquipment, HttpServletResponse
		// response){

		System.out.println("addLegalIntoTree---------");

		try {

			// AssertHelper.empty(nowLegalEquId) ||
			if (AssertHelper.empty(willNewLegalid)) {
				// to-do
				return;
			} else {

				TmsMdLegalEquipmentInParam newEnitty = new TmsMdLegalEquipmentInParam();

				if (nowLegalEquId == null || "".equals(nowLegalEquId.trim())) {
					nowLegalEquId = null;
				}

				newEnitty.setParentId(nowLegalEquId);

				newEnitty.setLegalEntityId(willNewLegalid);

				newEnitty.setLegalEntityName(willNewLegalName);

				/*
				 * StringBuffer sb = new StringBuffer();
				 * sb.append(arrayAttr[3]).
				 * append(SPE).append(SPE).append(SPE).append(SPE).append(SPE);
				 */

				// newEnitty.setAttribute1(sb.toString());
				// TmsMdLegalEquipmentInParam inParam = new
				// TmsMdLegalEquipmentInParam();

				// to-do................

				HashMap<Enum, ArrayList<TmsMdLegalEquipmentInParam>> dataListsMap = new HashMap<Enum, ArrayList<TmsMdLegalEquipmentInParam>>();

				ArrayList<TmsMdLegalEquipmentInParam> addList = new ArrayList<TmsMdLegalEquipmentInParam>();

				addList.add(newEnitty);

				dataListsMap.put(DataStatus.INSERT, addList);
				// Collection<TmsMdLegalEquipmentInParam>

				this.tmsMdLegalEquipmentService
						.saveTmsMdLegalEquipmentDataListsMap(dataListsMap);

				this.returnOk(response);
			}

		} catch (Exception e) {

			this.returnFail(response);
		}
	}

	/**
	 * 删除 legal 部门 和 对应的 打印机 关联关系, 把 当前节点的子节点一起删除, 用个check box判断 要不要删除当前节点子节点 以及
	 * 删除后怎么处理 〈一句话功能简述〉 功能详细描述
	 * 
	 * @param response
	 * @param legalEquIds
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 */
	@RequestMapping("legalEquipment/delLegalEquipmentNew.do")
	public void delLegalEquipment(HttpServletResponse response,
			String legalEquIds) {

		try {

			if (AssertHelper.empty(legalEquIds)) {
				// to-do
				this.returnOk(response);
			} else {

				String[] ids = legalEquIds.split(this.IDSPE);

				if (ids == null || ids.length < 1) {
					this.returnOk(response);
				}

				/*
				 * ArrayList<TmsMdLegalEquipment> legEquList= new
				 * ArrayList<TmsMdLegalEquipment>(); for(int i=0; i<ids.length;
				 * i++){
				 * 
				 * legEquList.add( new TmsMdLegalEquipment(ids[i]) );
				 * 
				 * }
				 */

				// ----

				String t1 = TmsMdLegalEquipment.class.getName();
				// String checkT=TmsMdLegalEquipment.class.getName();

				StringBuffer eqSb = new StringBuffer(" delete from ");

				eqSb.append(t1).append("    where  id in (:ids)");

				System.out.println("delEquipmentFromLegal will run hql: "
						+ eqSb.toString());

				// -----

				HashMap para = new HashMap();
				para.put("ids", ids);

				this.tmsMdLegalEquipmentService.runHqlOrSql(eqSb.toString(),
						para);
				// this.tmsMdLegalEquipmentService.removeAll(legEquList);

				returnOk(response);
			}

		} catch (Exception e) {

			this.returnFail(response);
		}
	}

	/**
	 * 
	 * 关联选中的设备给 当前 纳税主体 功能详细描述
	 * 
	 * @param response
	 * @param tmsMdLegalEquipment
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 * @author tigchen
	 */
	@RequestMapping("legalEquipment/linkEquToLegalTreeNew.do")
	public void linkEquToLegalTree(HttpServletResponse response,
			String nowLegEquId, String willEquId) {

		try {

			if (AssertHelper.empty(nowLegEquId)
					|| AssertHelper.empty(willEquId)) {
				// to-do
				return;
			} else {

				// public static final String attributes1Logic="legalName" + SPE
				// + "equName" + SPE + "newLegalId" + SPE + "newLegalName" + SPE
				// + "newEquId" + SPE + "newEquName";

				// String oldAttribute1 = tmsMdLegalEquipment.getAttribute1();

				/*
				 * StringBuffer newAttribute1Sb = new StringBuffer();
				 * newAttribute1Sb
				 * .append(oldArrayAttr[0]).append(SPE).append(oldArrayAttr
				 * [5]).append(SPE).append(SPE).append(SPE).append(SPE);
				 */
				// ////////

				// TmsMdLegalEquipment tmsMdLegalEquipment = new
				// TmsMdLegalEquipment(nowLegEquId);

				// tmsMdLegalEquipment.setAttribute1(newAttribute1Sb.toString());

				/*
				 * tmsMdLegalEquipment.setEquipmentId(willEquId);
				 * 
				 * this.tmsMdLegalEquipmentService.update(tmsMdLegalEquipment,
				 * false);
				 */

				this.returnOk(response);
			}

		} catch (Exception e) {

			this.returnFail(response);
		}
	}

	/**
	 * 移除设备与纳税主体的绑定关系 〈一句话功能简述〉 功能详细描述
	 * 
	 * @param response
	 * @param tmsMdLegalEquipment
	 * @see [相关类/方法]（可选）
	 * @since [产品/模块版本] （可选）
	 */
	@RequestMapping("legalEquipment/delEquipmentFromLegalNew.do")
	public void delEquipmentFromLegal(HttpServletResponse response,
			String nowLegEquId) {

		System.out
				.println("delEquipmentFromLegalNew ..............nowLegEquId:"
						+ nowLegEquId);
		try {

			if (AssertHelper.empty(nowLegEquId)) {
				// to-do
				return;
			} else {

				// to-do need udpate attribute1's status? seems no need as this
				// just setEquipmentId ...

				String t1 = TmsMdLegalEquipment.class.getName();
				// String checkT=TmsMdLegalEquipment.class.getName();

				StringBuffer eqSb = new StringBuffer(" update ");

				eqSb.append(t1)
						.append("   set  EQUIPMENT_ID =''   where  id='")
						.append(nowLegEquId).append("'");

				System.out.println("delEquipmentFromLegal will run hql: "
						+ eqSb.toString());

				this.tmsMdLegalEquipmentService.runHqlOrSql(eqSb.toString(),
						new HashMap());

				this.returnOk(response);
			}

		} catch (Exception e) {

			this.returnFail(response);
		}
	}

	@ResponseBody
	@RequestMapping(value = "legalEquipment/loadTmsMdLegalEquipmentPage.do", method = RequestMethod.GET)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadTmsMdLegalEquipmentPage(
			@RequestParam Map<String, Object> parameter) throws Exception {
		DaoPage daoPage = tmsMdLegalEquipmentService
				.findTmsMdLegalEquipmentByParams(parameter,
						PageUtils.getPageIndex(parameter),
						PageUtils.getPageSize(parameter));
		// 拿到节点下所有的关系数据
		// 根据
		// daoPage.getRows().get//TmsMdLegalEquipment
		return daoPage;
	}

	// public void getTaxEntityByEquipment(TmsMdLegalEquipmentInParam
	// inParam,HttpServletResponse response)
	// {
	// //for(String clientId:clientKeys.split(",")){
	// // Map searchCriMap = new HashMap<>();
	// // searchCriMap.put("", clientKeys);
	// DaoPage
	// entity=tmsMdLegalEquipmentService.findTmsMdLegalEquipmentByParams(inParam,
	// inParam.getPageNumber(), inParam.getPageSize());
	// //jobDefinitionService.remove(entity);
	// //}
	// JSONObject object = new JSONObject();
	// object.put("result", "true");
	// object.put("success", "true");
	// object.put("msg", "删除成功");
	// retJson(response, object);
	// }

	@RequestMapping("legalEquMgt.do")
	public String goIndexPage() {

		return "base/masterdata/legalEquipmentMgtNew";
	}

	@ResponseBody
	@RequestMapping(value = "/saveTmsMdLegalEquipment", method = RequestMethod.POST)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTmsMdLegalEquipment(TmsMdLegalEquipmentInParam inParam)
			throws Exception {
		TmsMdLegalEquipment entity = tmsMdLegalEquipmentService
				.convertTmsMdLegalEquipmentInParamToEntity(inParam);
		if (entity.getId() == null) {
			tmsMdLegalEquipmentService.save(entity);
		} else {
			tmsMdLegalEquipmentService.update(entity);
		}
		inParam.setId(entity.getId());
	}

	@ResponseBody
	@RequestMapping(value = "/removeTmsMdLegalEquipments", method = RequestMethod.POST)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeTmsMdLegalEquipments(
			@RequestParam String tmsMdLegalEquipmentKeys) {
		AssertHelper.notEmpty_assert(tmsMdLegalEquipmentKeys, "需要删除的用户不能为空");
		String[] tmsMdLegalEquipmentIds = tmsMdLegalEquipmentKeys.split(",");
		// for(String tmsMdLegalEquipmentId:tmsMdLegalEquipmentIds){

		// }
	}

	public TmsMdLegalEquipmentInParam loadAddTmsMdLegalEquipment(
			Map<String, Object> map) throws Exception {
		TmsMdLegalEquipmentInParam inParam = new TmsMdLegalEquipmentInParam();
		return inParam;
	}

	public TmsMdLegalEquipmentInParam loadModifyTmsMdLegalEquipment(
			Map<String, Object> map) throws Exception {
		Object id = map.get("id");
		AssertHelper.notEmpty_assert(id, "编辑的主键不能为空");
		TmsMdLegalEquipment entity = (TmsMdLegalEquipment) tmsMdLegalEquipmentService
				.get(TmsMdLegalEquipment.class, Long.parseLong(id.toString()));
		TmsMdLegalEquipmentInParam inParam = tmsMdLegalEquipmentService
				.convertTmsMdLegalEquipmentToInParam(entity);
		return inParam;
	}

	public void updateModifyTmsMdLegalEquipment(
			TmsMdLegalEquipmentInParam inParam) throws Exception {
		TmsMdLegalEquipment entity = (TmsMdLegalEquipment) tmsMdLegalEquipmentService
				.get(TmsMdLegalEquipment.class, inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		tmsMdLegalEquipmentService.update(entity);
	}

	public TmsMdLegalEntity findTmsMdLegalEntity(Map params) {
		return tmsMdLegalEquipmentService.findTmsMdLegalEntity(params);
	}

	public TmsMdLegalEntity loadAddTmsMdLegalEntity(Map params) {
		TmsMdLegalEntity result = new TmsMdLegalEntity();
		return result;
	}

	public void saveTmsMdLegalEntity(TmsMdLegalEntityInParam obj)
			throws Exception {
		if (obj.getId() == null) {

			tmsMdLegalEquipmentService.save(obj);
		} else {
			tmsMdLegalEquipmentService.update(obj);
		}
	}

	public TmsMdEquipment findTmsMdEquipment(Map params) {
		return tmsMdLegalEquipmentService.findTmsMdEquipment(params);
	}

	public TmsMdEquipment loadAddTmsMdEquipment(Map params) {
		TmsMdEquipment result = new TmsMdEquipment();
		return result;
	}

	public void saveTmsMdEquipment(TmsMdEquipmentInParam obj) throws Exception {
		if (obj.getId() == null) {

			tmsMdLegalEquipmentService.save(obj);
		} else {
			tmsMdLegalEquipmentService.update(obj);
		}
	}

	
	
	//removeLegalEntityByCurrentPrinter
	
	@ResponseBody
	@RequestMapping(value = "legalEquipment/removeLegalEntityByCurrentPrinter", method = RequestMethod.POST)
	public void removeLegalEntityByCurrentPrinter(@ModelAttribute("tmsMdLegalEquipmentInParam") TmsMdLegalEquipmentInParam inParam,HttpServletResponse response) throws Exception {
		String clientKeys =inParam.getIds();
//		clientKeys=clientKeys.substring(3);//切掉id= 得到legalEntityId
		Map<String, Object> map = new HashMap<String, Object>();
		for(String clientIds:clientKeys.split("&")){
			String clientId = clientIds.split("=")[1];
			map.put("legalEntityId", clientId);
			map.put("equipmentId", inParam.getEquipmentId());
			List<TmsMdLegalEquipment> results = tmsMdLegalEquipmentService.findTmsMdLegalEquipmentByParams(map);
			if(results!=null&&results.size()>0){
				TmsMdLegalEquipment entity=(TmsMdLegalEquipment)results.get(0);
				if(entity!=null)
				{
					dao.remove(entity);
				}
				map.clear();
			}
			//(TmsMdLegalEquipment)tmsMdLegalEquipmentService.get(TmsMdLegalEquipment.class,clientId);
			
		}
		JSONObject object = new JSONObject();
		object.put("result", "true");
		object.put("success", "true");
		object.put("msg", "删除成功");
		retJson(response, object);
	}
	
	

	// addLegalEntityToParentTable
	@ResponseBody
	@RequestMapping(value = "legalEquipment/addLegalEntityToParentTable", method = RequestMethod.POST)
	public void addLegalEntityToParentTable(@ModelAttribute("tmsMdLegalEquipmentInParam") TmsMdLegalEquipmentInParam inParam,HttpServletResponse response) throws Exception {
		String msg = "保存成功";
		String success = "true";
		String clientKeys =inParam.getIds();
		clientKeys=clientKeys.substring(3);//切掉id=
		Map mapParam =new HashMap();
		for(String clientId:clientKeys.split(",")){
			TmsMdLegalEquipment entity=new TmsMdLegalEquipment();
			entity.setLegalEntityId(clientId);
			entity.setEquipmentId(inParam.getEquipmentId());//need to update
			entity.setId(IdGenerator.getUUID());
			entity.setVersionNo(0);
			//jobDefinitionService.remove(entity);
			mapParam.put("legalEntityId", entity.getLegalEntityId());
			mapParam.put("equipmentId", entity.getEquipmentId());
			List<TmsMdLegalEquipment> list = tmsMdLegalEquipmentService.findTmsMdLegalEquipmentByParams(mapParam);
			if(list==null||list.size()==0){
				tmsMdLegalEquipmentService.save(entity);
			}else{
				msg = "保持失败[重复添加]";
				success = "false";
				break;
			}
			
		}
		JSONObject object = new JSONObject();
		object.put("result", "true");
		object.put("success", success);
		object.put("msg", msg);
		retJson(response, object);
	}
	@ResponseBody
	@RequestMapping(value = "legalEquipment/loadTmsMdLegalEntityBesidCurrentTable", method = RequestMethod.POST)
	public void loadTmsMdLegalEntityBesidCurrentTable(
			@RequestParam Map<String, Object> parameter,
			HttpServletResponse response) throws Exception {
		// 拿到当前打印机下面的纳税实体
		List<TmsMdLegalEquipmentInParam> results = tmsMdLegalEquipmentService
				.findTmsMdLegalEquipmentByParams1(parameter);
		// 需要返回到的纳税主体
		List<TmsMdLegalEntity> returntmsMdLegalEntityList = new ArrayList<TmsMdLegalEntity>();
		List<String> entityIdList = new ArrayList<String>();// 把 拿到的纳税实体ID
															// 放在一个集合中
		for (TmsMdLegalEquipmentInParam result : results) {
			entityIdList.add(result.getLegalEntityId());
		}
		// 拿到所有纳税主体
		List<TmsMdLegalEntityInParam> tmsMdLegalEntityList = new ArrayList<TmsMdLegalEntityInParam>();
		tmsMdLegalEntityList=tmsMdLegalEntityService.findTmsMdLegalEntityByParams(parameter);
		// 已经在里面的纳税主体不要再次导入

		for (TmsMdLegalEntity legalEntity : tmsMdLegalEntityList) {
			if (!entityIdList.contains(legalEntity.getId())) {
				returntmsMdLegalEntityList.add(legalEntity);
			}
		}

		JSONObject result = new JSONObject();
		result.put("total", returntmsMdLegalEntityList.size());
		result.put("rows", returntmsMdLegalEntityList);// daoPage.getr
		// resultJason.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
	}

	@ResponseBody
	@RequestMapping(value = "legalEquipment/loadTmsMdLegalEquipment", method = RequestMethod.POST)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void loadTmsMdLegalEquipment(@ModelAttribute("tmsMdLegalEquipmentInParam") TmsMdLegalEquipmentInParam inParam,
			HttpServletResponse response) throws Exception {	
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("equipmentId", inParam.getEquipmentId());
		// map.put("entityId", "LE00001");
		List<TmsMdLegalEquipmentInParam> results = tmsMdLegalEquipmentService
				.findTmsMdLegalEquipmentByParams1(map);
		List<TmsMdLegalEntity> tmsMdLegalEntityList = new ArrayList<TmsMdLegalEntity>();
		 for (TmsMdLegalEquipmentInParam entity : results) {

		tmsMdLegalEntityList.add((TmsMdLegalEntity) tmsMdLegalEquipmentService
				.findById(TmsMdLegalEntity.class, entity.getLegalEntityId()));

		 }
		// return tmsMdLegalEntityList;

		JSONObject result = new JSONObject();
		result.put("total", tmsMdLegalEntityList.size());
		result.put("rows", tmsMdLegalEntityList);// daoPage.getr
		// resultJason.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
	}
}
