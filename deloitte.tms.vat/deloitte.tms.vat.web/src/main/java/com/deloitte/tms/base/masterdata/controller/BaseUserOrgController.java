package com.deloitte.tms.base.masterdata.controller;
// Generated by bo.wang with ling2.autoproject

import java.io.Serializable;
import java.util.Collection;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;

import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.springmvc.controller.BaseController;
import com.deloitte.tms.base.masterdata.model.BaseUserOrg;
import com.deloitte.tms.base.masterdata.model.BaseUserOrgInParam;
import com.deloitte.tms.base.masterdata.model.BaseUserOrg;
import com.deloitte.tms.base.masterdata.model.BaseUserOrgInParam;
import com.deloitte.tms.base.masterdata.service.BaseUserOrgService;
/**
 * Home object for domain model class BaseUserOrg.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("baseUserOrg")
public class BaseUserOrgController extends BaseController{
	@Resource
	BaseUserOrgService baseUserOrgService;
	
	@ResponseBody
	@RequestMapping(value = "/loadBaseUserOrgPage", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadBaseUserOrgPage(@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=baseUserOrgService.findBaseUserOrgByParams(parameter,PageUtils.getPageIndex(parameter),PageUtils.getPageSize(parameter));
		return daoPage;
	}
	@ResponseBody
	@RequestMapping(value = "/saveBaseUserOrg", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveBaseUserOrg(BaseUserOrgInParam inParam) throws Exception {
		BaseUserOrg entity=baseUserOrgService.convertBaseUserOrgInParamToEntity(inParam);
		if(entity.getId()==null){
			baseUserOrgService.save(entity);
		}
		else{
			baseUserOrgService.update(entity);
		}
		inParam.setId(entity.getId());
	}	
	@ResponseBody
	@RequestMapping(value = "/removeBaseUserOrgs", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeBaseUserOrgs(@RequestParam String baseUserOrgKeys) {
		AssertHelper.notEmpty_assert(baseUserOrgKeys,"需要删除的用户不能为空");
		String[] baseUserOrgIds=baseUserOrgKeys.split(",");
		//for(String baseUserOrgId:baseUserOrgIds){
			
		//}
	}
	@ResponseBody
	@RequestMapping(value = "/loadBaseUserOrg", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<BaseUserOrgInParam> loadBaseUserOrg(Map<String, Object> map) throws Exception {
		List result=baseUserOrgService.findBaseUserOrgByParams(map);
		return result;
	}
	
	public BaseUserOrgInParam loadAddBaseUserOrg(Map<String, Object> map) throws Exception {
		BaseUserOrgInParam inParam=new BaseUserOrgInParam();
		return inParam;
	}
	
	public BaseUserOrgInParam loadModifyBaseUserOrg(Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		BaseUserOrg entity=(BaseUserOrg)baseUserOrgService.get(BaseUserOrg.class,Long.parseLong(id.toString()));
		BaseUserOrgInParam inParam=baseUserOrgService.convertBaseUserOrgToInParam(entity);
		return inParam;
	}
	
	
	
	public void updateModifyBaseUserOrg(BaseUserOrgInParam inParam) throws Exception {
		BaseUserOrg entity=(BaseUserOrg)baseUserOrgService.get(BaseUserOrg.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		baseUserOrgService.update(entity);
	}
}

