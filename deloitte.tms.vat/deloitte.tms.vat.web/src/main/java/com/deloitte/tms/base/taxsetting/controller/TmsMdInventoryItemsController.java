package com.deloitte.tms.base.taxsetting.controller;
// Generated by bo.wang with ling2.autoproject

import java.io.Serializable;
import java.util.Collection;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;

import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.springmvc.controller.BaseController;
import com.deloitte.tms.base.taxsetting.model.TmsMdInventoryItems;
import com.deloitte.tms.base.taxsetting.model.TmsMdInventoryItemsInParam;
import com.deloitte.tms.base.taxsetting.service.TmsMdInventoryItemsService;
/**
 * Home object for domain model class TmsMdInventoryItems.
 * @see com.deloitte.tms.base.taxsetting.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("tmsMdInventoryItems")
public class TmsMdInventoryItemsController extends BaseController{
	@Resource
	TmsMdInventoryItemsService tmsMdInventoryItemsService;
	
	@RequestMapping(value = "/initTmsMdInventoryItems", method = RequestMethod.GET)
	public String initTmsMdInventoryItems()throws Exception{
		return "vat/tmsmdinventoryitems/tmsMdInventoryItems";
	}
	
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdInventoryItemsPage", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadTmsMdInventoryItemsPage(@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=tmsMdInventoryItemsService.findTmsMdInventoryItemsByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		return daoPage;
	}
	@ResponseBody
	@RequestMapping(value = "/saveTmsMdInventoryItems", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTmsMdInventoryItems(TmsMdInventoryItemsInParam inParam) throws Exception {
		TmsMdInventoryItems entity=tmsMdInventoryItemsService.convertTmsMdInventoryItemsInParamToEntity(inParam);
		if(entity.getId()==null){
			tmsMdInventoryItemsService.save(entity);
		}
		else{
			tmsMdInventoryItemsService.update(entity);
		}
		inParam.setId(entity.getId());
	}	
	@ResponseBody
	@RequestMapping(value = "/removeTmsMdInventoryItemss", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeTmsMdInventoryItemss(@RequestParam String ids) {
		AssertHelper.notEmpty_assert(ids,"需要删除的用户不能为空");
		String[] tmsMdInventoryItemsIds=ids.split(",");
		//for(String tmsMdInventoryItemsId:tmsMdInventoryItemsIds){
			
		//}
	}
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdInventoryItems", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<TmsMdInventoryItemsInParam> loadTmsMdInventoryItems(@RequestParam Map<String, Object> map) throws Exception {
		List result=tmsMdInventoryItemsService.findTmsMdInventoryItemsByParams(map);
		return result;
	}
	@ResponseBody
	@RequestMapping(value = "/loadAddTmsMdInventoryItems", method = RequestMethod.POST)
	public TmsMdInventoryItemsInParam loadAddTmsMdInventoryItems(@RequestParam Map<String, Object> map) throws Exception {
		TmsMdInventoryItemsInParam inParam=new TmsMdInventoryItemsInParam();
		return inParam;
	}
	@ResponseBody
	@RequestMapping(value = "/loadModifyTmsMdInventoryItems", method = RequestMethod.POST)
	public TmsMdInventoryItemsInParam loadModifyTmsMdInventoryItems(@RequestParam Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		TmsMdInventoryItems entity=(TmsMdInventoryItems)tmsMdInventoryItemsService.get(TmsMdInventoryItems.class,id.toString());
		TmsMdInventoryItemsInParam inParam=tmsMdInventoryItemsService.convertTmsMdInventoryItemsToInParam(entity);
		return inParam;
	}
	
	@ResponseBody
	@RequestMapping(value = "/updateModifyTmsMdInventoryItems", method = RequestMethod.POST)
	public void updateModifyTmsMdInventoryItems(TmsMdInventoryItemsInParam inParam) throws Exception {
		TmsMdInventoryItems entity=(TmsMdInventoryItems)tmsMdInventoryItemsService.get(TmsMdInventoryItems.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		tmsMdInventoryItemsService.update(entity);
	}
}

