package com.deloitte.tms.base.taxsetting.controller;

// Generated by bo.wang with ling2.autoproject

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.base.taxsetting.model.TaxCategory;
import com.deloitte.tms.base.taxsetting.model.TaxCategoryInParam;
import com.deloitte.tms.base.taxsetting.model.ItemsInParam;
import com.deloitte.tms.base.taxsetting.service.TaxCategoryService;
import com.deloitte.tms.pl.core.commons.constant.TableColnumDef;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.security.model.User;
import com.deloitte.tms.security.searchform.UserSearchForm;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.IdGenerator;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;

/**
 * Home object for domain model class TaxCategory.
 * 
 * @see com.deloitte.tms.base.taxsetting.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("taxCategory")
public class TaxCategoryController extends BaseController {
	@Resource
	TaxCategoryService taxCategoryService;

	@RequestMapping(value = "/initTaxCategory")
	public String indexPage() {
		return "vat/tax/taxCategory";
	}

	@ResponseBody
	@RequestMapping(value = "/getTaxCategorys")
	public void loadTaxCategoryPage(@RequestParam Map<String, Object> parameter,HttpServletResponse response) throws Exception {
		
		
		DaoPage daoPage = taxCategoryService.findTaxCategoryByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));

		JSONObject result = new JSONObject();
		 JsonConfig jsonConfig = new JsonConfig();  
		 jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor("yyyy-MM-dd")); 
		 JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),jsonConfig);
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray);// daoPage.getr
		result.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
		
	//	return daoPage;
	
	}

	@ResponseBody
	@RequestMapping(value = "/getTaxCategory")
	public DaoPage loadTaxCategory(@RequestParam("searchTax") String searchTax,
			HttpServletResponse response) throws Exception {
		StringBuffer sqlBuffer = new StringBuffer();
		List<TaxCategory> list = new ArrayList<TaxCategory>();
		list=taxCategoryService.findBySearchTax(searchTax);
		JSONObject result = new JSONObject();
		result.put("total", list.size());
		result.put("rows", list);
		retJson(response, result);
		return null;
	}

	/*
	 * @RequestMapping(value = "taxCategory/save") public void
	 * saveTaxCategory(@ModelAttribute("taxFormParam") TaxCategoryInParam
	 * inParam, HttpServletResponse response) throws Exception {
	 * 
	 * System.out.println("22"); TaxCategory
	 * entity=taxCategoryService.convertTaxCategoryInParamToEntity(inParam);
	 * if(entity.getId()==null){ taxCategoryService.save(entity); } else{
	 * taxCategoryService.update(entity); } inParam.setId(entity.getId()); }
	 */

	@RequestMapping("/saveTaxCategory")
	public void saveTaxCategory(@ModelAttribute("taxFormParam") TaxCategoryInParam inParam,HttpServletResponse response) throws IOException {
	//	JSONObject result = new JSONObject();
		
		TaxCategory entity = taxCategoryService.convertTaxCategoryInParamToEntity(inParam);
		if(AssertHelper.empty(entity.getId())){
			entity.setId(IdGenerator.getUUID());
		
			taxCategoryService.save(entity);//entity.set
		} else {
			taxCategoryService.update(entity);
		}
		

		inParam.setId(entity.getId());
	//	result.put("success", true);
//		result.put("msg", "保存成功！");
//		retJson(response, result);
	}

	@ResponseBody
	@RequestMapping("/removeTaxCategory")
	public void removeTaxCategorys(@RequestParam("ids") String ids,
			HttpServletResponse response) throws IOException {
		AssertHelper.notEmpty_assert(ids, "需要删除的用户不能为空");
		String[] taxCategoryIds = ids.split(",");
		for (String taxCategoryId : taxCategoryIds) {
			TaxCategory taxEntity = (TaxCategory) taxCategoryService.findById(
					TaxCategory.class, Long.parseLong(taxCategoryId));
			taxEntity.setFlag(TableColnumDef.FLAG_DISABLED);
			taxCategoryService.update(taxEntity);
		}
		JSONObject object = new JSONObject();
		object.put("result", "true");
		object.put("success", "true");
		object.put("msg", "删除成功");
		retJson(response, object);
	}

	@ResponseBody
	@RequestMapping(value = "/loadTaxCategory", method = RequestMethod.POST)
	public Collection<TaxCategoryInParam> loadTaxCategory(
			Map<String, Object> map) throws Exception {
		
		List result = taxCategoryService.findTaxCategoryByParams(map);
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "/loadModifyCategory")
	public void loadModifyCategory(@RequestParam Map<String, Object> map,
			HttpServletResponse response) throws Exception {
		JSONObject jsonObject = new JSONObject();
		Object id = map.get("id");
		if (!AssertHelper.isOrNotEmpty_assert(id)) {
			jsonObject.put("success", "false");
			jsonObject.put("errorMsg", "编辑的主键不能为空");
		} else {
			jsonObject.put("success", "true");
			TaxCategory entity = (TaxCategory) taxCategoryService.get(
					TaxCategory.class, id.toString());
			TaxCategoryInParam inParam = taxCategoryService
					.convertTaxCategoryToInParam(entity);
			jsonObject.put("taxItmesForm", inParam);
		}
		retJson(response, jsonObject);
		// return inParam;
	}
	// public TaxCategoryInParam loadAddTaxCategory(Map<String, Object> map)
	// throws Exception {
	// TaxCategoryInParam inParam=new TaxCategoryInParam();
	// return inParam;
	// }
	//
	// public TaxCategoryInParam loadModifyTaxCategory(Map<String, Object> map)
	// throws Exception {
	// Object id=map.get("id");
	// AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
	// TaxCategory
	// entity=(TaxCategory)taxCategoryService.get(TaxCategory.class,Long.parseLong(id.toString()));
	// TaxCategoryInParam
	// inParam=taxCategoryService.convertTaxCategoryToInParam(entity);
	// return inParam;
	// }
	//
	//
	//
	// public void updateModifyTaxCategory(TaxCategoryInParam inParam) throws
	// Exception {
	// TaxCategory
	// entity=(TaxCategory)taxCategoryService.get(TaxCategory.class,inParam.getId());
	// ReflectUtils.copyProperties(inParam, entity);
	// taxCategoryService.update(entity);
	// }
	//
	/*
	 * public void loadItems(Page<ItemsInParam> page, Map<String, Object> map)
	 * throws Exception { DaoPage
	 * daoPage=taxCategoryService.findItemsByParams(map, page.getPageNo(),
	 * page.getPageSize()); D7PageUtils.daoPageToPage(daoPage, page); }
	 * 
	 * public Collection loadItems(Map<String, Object> map) throws Exception {
	 * List result=taxCategoryService.findItemsByParams(map); return result; }
	 * 
	 * public void saveItems(Collection<ItemsInParam> objs) throws Exception {
	 * Map results= D7PageUtils.assembleDatasetMap(objs);
	 * taxCategoryService.saveItemsDataListsMap(results); }
	 */
	//用于涉税交易认定设置
	@ResponseBody
	@RequestMapping(value = "/LoadTaxCategorysName" ,method = RequestMethod.POST)
	public DaoPage loadTaxCategoryPageName(@RequestParam Map<String, Object> parameter) throws Exception {
						
			DaoPage daoPage = taxCategoryService.findTaxCategoryByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));

		return daoPage;
	
	}
	
	
}
