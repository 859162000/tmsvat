package com.deloitte.tms.vat.salesinvoice;
// Generated by bo.wang with ling2.autoproject

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.cache.utils.DictionaryCacheUtils;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceAbolish;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceAbolishInParam;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxD;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxDAbolishResult;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceAbolishService;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceSyncProvider;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceTrxService;
/**
 * Home object for domain model class InvoiceAbolish.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("invoiceAbolish")
public class InvoiceAbolishController extends BaseController{
	@Resource
	InvoiceAbolishService invoiceAbolishService;
	
	@Resource
	InvoiceTrxService invoiceTrxService;
	
	@Resource
	InvoiceSyncProvider invoiceSyncProvider;
	
	@RequestMapping(value = "/loadPage")
	public String indexPage() {
		return "/vat/invoiceAbolish/invoiceAbolish";
	}
	
	@ResponseBody
	@RequestMapping(value = "/approveById")
	public void approveById(@RequestParam("id") String id, HttpServletResponse response) throws Exception {
		invoiceAbolishService.auditInvoiceAbolishById(id);

		String successMsg = "审批成功！";
		JSONObject result = new JSONObject();
		result.put("success", "true");
		result.put("msg", successMsg);
		retJson(response, result);
	}
	
	@RequestMapping(value = "/loadInvoiceAbolishPage")
	public void loadInvoicePage(HttpServletResponse response,@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=invoiceAbolishService.findInvoiceDByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));

		Collection<Object[]> resultList=(Collection<Object[]>) daoPage.getResult();
		Map<String,String> map = DictionaryCacheUtils.getCodesByCvalueMap("VAT_CR_INVOICE_ABOLISH_STATUS");
		Map<String,String> map2 = DictionaryCacheUtils.getCodesByCvalueMap("VAT_CR_INVOICE_DISCARD_TYPE");
		Map<String,String> map3 = DictionaryCacheUtils.getCodesByCvalueMap("VAT_CR_INVOICE_TYPE");
		Map<String,String> map4 = DictionaryCacheUtils.getCodesByCvalueMap("VAT_CR_INVOICE_ABOLISH_REASON");
		
		List<InvoiceTrxDAbolishResult> finalList=new ArrayList<InvoiceTrxDAbolishResult>();
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy/MM/dd");  
		for(Object[] item:resultList){
			InvoiceTrxDAbolishResult abolish = new InvoiceTrxDAbolishResult();
			abolish.setId((String)item[0]);
			abolish.setInvoiceCategory(map3.get((String)item[1]));
			abolish.setInvoiceCode((String)item[2]);
			abolish.setInvoiceNumber((String)item[3]);
			abolish.setApprovalDate((Date)item[4]);
			abolish.setRequestBy((String)item[5]);
			abolish.setAbolishType(map2.get((String)item[6]));
			abolish.setApprovalStatus(map.get((String)item[7]));
			abolish.setStatus((String)item[8]);
			abolish.setInvoiceAbolishId((String)item[9]);
			abolish.setAbolishReason(map4.get((String)item[20]));
			if(!AssertHelper.empty(item[8])){
				abolish.setCustRegistrationCode((String)item[13]);
				abolish.setCustRegistrationNumber((String)item[14]);
				abolish.setInvoiceLimitAmount((String)item[15]);
				abolish.setInvoicePrintDate(item[16]==null?null:sdf.parse((String)item[16]));				
				abolish.setAcctdAmountCR((String)item[17]);
				abolish.setVatAmount((String)item[18]);
				abolish.setInvoiceAmount((String)item[19]);
			}
			finalList.add(abolish);
		}
		daoPage.setResult(finalList);		
		
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class,new JsonDateValueProcessor("yyyy-MM-dd"));
		JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(), jsonConfig);
		JSONObject result = new JSONObject();
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray.toString());
		retJson(response, result);
	}
	
	@ResponseBody
	@RequestMapping(value = "/saveInvoiceAbolish", method = RequestMethod.POST)
	public InvoiceAbolishInParam saveInvoiceAbolish(@ModelAttribute("abolishForm") InvoiceAbolishInParam inParam,
			HttpServletResponse response) throws Exception {	

		InvoiceAbolish entity = null;
		if (AssertHelper.empty(inParam.getId())) {
			inParam.setApprovalStatus("1");
			entity=invoiceAbolishService.convertInvoiceAbolishInParamToEntity(inParam);
			invoiceAbolishService.save(entity);
		}
		
		inParam.setId(entity.getId());
		return inParam;
	}	
}

