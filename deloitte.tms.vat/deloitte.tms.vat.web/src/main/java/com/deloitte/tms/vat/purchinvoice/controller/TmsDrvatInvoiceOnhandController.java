package com.deloitte.tms.vat.purchinvoice.controller;
// Generated by bo.wang with ling2.autoproject

import java.io.Serializable;
import java.util.Collection;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;

import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.springmvc.controller.BaseController;
import com.deloitte.tms.vat.purchinvoice.model.TmsDrvatInvoiceOnhand;
import com.deloitte.tms.vat.purchinvoice.model.TmsDrvatInvoiceOnhandInParam;
import com.deloitte.tms.vat.purchinvoice.service.TmsDrvatInvoiceOnhandService;
/**
 * Home object for domain model class TmsDrvatInvoiceOnhand.
 * @see com.deloitte.tms.vat.purchinvoice.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("tmsDrvatInvoiceOnhand")
public class TmsDrvatInvoiceOnhandController extends BaseController{
	@Resource
	TmsDrvatInvoiceOnhandService tmsDrvatInvoiceOnhandService;
	
	@RequestMapping(value = "/initTmsDrvatInvoiceOnhand", method = RequestMethod.GET)
	public String initTmsDrvatInvoiceOnhand()throws Exception{
		return "vat/tmsdrvatinvoiceonhand/tmsDrvatInvoiceOnhand";
	}
	
	@ResponseBody
	@RequestMapping(value = "/loadTmsDrvatInvoiceOnhandPage", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadTmsDrvatInvoiceOnhandPage(@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=tmsDrvatInvoiceOnhandService.findTmsDrvatInvoiceOnhandByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		return daoPage;
	}
	@ResponseBody
	@RequestMapping(value = "/saveTmsDrvatInvoiceOnhand", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTmsDrvatInvoiceOnhand(TmsDrvatInvoiceOnhandInParam inParam) throws Exception {
		TmsDrvatInvoiceOnhand entity=tmsDrvatInvoiceOnhandService.convertTmsDrvatInvoiceOnhandInParamToEntity(inParam);
		if(entity.getId()==null){
			tmsDrvatInvoiceOnhandService.save(entity);
		}
		else{
			tmsDrvatInvoiceOnhandService.update(entity);
		}
		inParam.setId(entity.getId());
	}	
	@ResponseBody
	@RequestMapping(value = "/removeTmsDrvatInvoiceOnhands", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeTmsDrvatInvoiceOnhands(@RequestParam String ids) {
		AssertHelper.notEmpty_assert(ids,"需要删除的用户不能为空");
		String[] tmsDrvatInvoiceOnhandIds=ids.split(",");
		//for(String tmsDrvatInvoiceOnhandId:tmsDrvatInvoiceOnhandIds){
			
		//}
	}
	@ResponseBody
	@RequestMapping(value = "/loadTmsDrvatInvoiceOnhand", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<TmsDrvatInvoiceOnhandInParam> loadTmsDrvatInvoiceOnhand(@RequestParam Map<String, Object> map) throws Exception {
		List result=tmsDrvatInvoiceOnhandService.findTmsDrvatInvoiceOnhandByParams(map);
		return result;
	}
	@ResponseBody
	@RequestMapping(value = "/loadAddTmsDrvatInvoiceOnhand", method = RequestMethod.POST)
	public TmsDrvatInvoiceOnhandInParam loadAddTmsDrvatInvoiceOnhand(@RequestParam Map<String, Object> map) throws Exception {
		TmsDrvatInvoiceOnhandInParam inParam=new TmsDrvatInvoiceOnhandInParam();
		return inParam;
	}
	@ResponseBody
	@RequestMapping(value = "/loadModifyTmsDrvatInvoiceOnhand", method = RequestMethod.POST)
	public TmsDrvatInvoiceOnhandInParam loadModifyTmsDrvatInvoiceOnhand(@RequestParam Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		TmsDrvatInvoiceOnhand entity=(TmsDrvatInvoiceOnhand)tmsDrvatInvoiceOnhandService.get(TmsDrvatInvoiceOnhand.class,id.toString());
		TmsDrvatInvoiceOnhandInParam inParam=tmsDrvatInvoiceOnhandService.convertTmsDrvatInvoiceOnhandToInParam(entity);
		return inParam;
	}
	
	@ResponseBody
	@RequestMapping(value = "/updateModifyTmsDrvatInvoiceOnhand", method = RequestMethod.POST)
	public void updateModifyTmsDrvatInvoiceOnhand(TmsDrvatInvoiceOnhandInParam inParam) throws Exception {
		TmsDrvatInvoiceOnhand entity=(TmsDrvatInvoiceOnhand)tmsDrvatInvoiceOnhandService.get(TmsDrvatInvoiceOnhand.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		tmsDrvatInvoiceOnhandService.update(entity);
	}
}

