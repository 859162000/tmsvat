package com.deloitte.tms.vat.salesinvoice;
// Generated by bo.wang with ling2.autoproject

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.base.cache.model.LegalEntityNode;
import com.deloitte.tms.base.cache.utils.LegalEntityCacheUtils;
import com.deloitte.tms.base.masterdata.model.TmsMdEquipment;
import com.deloitte.tms.base.masterdata.model.TmsMdEquipmentInParam;
import com.deloitte.tms.base.masterdata.model.TmsMdLegalEntity;
import com.deloitte.tms.base.masterdata.model.TmsMdOrgLegalEntity;
import com.deloitte.tms.base.masterdata.service.TmsMdUsageLocalLegalService;
import com.deloitte.tms.pl.cache.utils.DictionaryCacheUtils;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.context.utils.ContextUtils;
import com.deloitte.tms.pl.security.model.SecurityDept;
import com.deloitte.tms.pl.security.service.IDeptService;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.IdGenerator;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;
import com.deloitte.tms.vat.inf.taxinfo.aisino.enums.FPZLEnums;
import com.deloitte.tms.vat.inf.taxinfo.model.invoiceserver.distributeInvoice.DistributeInvoiceRequest;
import com.deloitte.tms.vat.inf.taxinfo.service.TaxInterface;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceAllocH;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceAllocHInParam;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceAllocL;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceAllocLInParam;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxD;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceAllocService;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceTrxService;

/**
 * Home object for domain model class InvoiceAlloc.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("invoiceAlloc")
public class InvoiceAllocController extends BaseController{
	@Resource
	InvoiceAllocService invoiceAllocService;

	@Resource
	TaxInterface taxInterface;
	
	@Resource
	IDeptService deptService;
	
	@Resource
	InvoiceTrxService invoiceTrxService;

	@Resource
	TmsMdUsageLocalLegalService commonService;
	
	@RequestMapping(value = "/loadPage")
	public String getIndex() throws Exception{
		return "vat/salesinvoice/invoicealloc";
	}
	
	@ResponseBody
	@RequestMapping(value = "/loadEquipmentForEditPanel", method = RequestMethod.POST)
	public void loadEquipmentForEditPanel(@RequestParam Map<String,Object> parameter, HttpServletResponse response) throws Exception {
		Map<String,Object> jsonMap = new HashMap<String,Object>();
		JSONObject result = new JSONObject();

		List<TmsMdEquipment> totalList=invoiceAllocService.loadEquipmentForEditPanel(parameter);
		jsonMap.put("total", totalList.size());//total键 存放总记录数，必须的  

		DaoPage daoPage=invoiceAllocService.findEquipmentForPage(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		Collection<Object[]> resultList=(Collection<Object[]>) daoPage.getResult();
		List<TmsMdEquipmentInParam> finalList=new ArrayList<TmsMdEquipmentInParam>();
		for(Object[] item:resultList){
			TmsMdEquipmentInParam equipmentInParam = new TmsMdEquipmentInParam();

			equipmentInParam.setId((String)item[0]);
			equipmentInParam.setEquipmentCode((String)item[1]);
			equipmentInParam.setEquipmentName((String)item[2]);
			equipmentInParam.setEquipmentManager((String)item[3]);
			finalList.add(equipmentInParam);
		}
		
		jsonMap.put("rows", finalList);//rows键 存放每页记录 list  
        
		result = JSONObject.fromObject(jsonMap);
		retJson(response, result);
	}

	@ResponseBody
	@RequestMapping(value = "/loadLegalEntityForEditPanel", method = RequestMethod.POST)
	public void loadLegalEntityForEditPanel(@RequestParam Map<String,Object> parameter, HttpServletResponse response) throws Exception {
		Map<String,Object> jsonMap = new HashMap<String,Object>();
		JSONObject result = new JSONObject();

		List<TmsMdLegalEntity> totalList =invoiceAllocService.loadLegalEntityForEditPanel(parameter);
		jsonMap.put("total", totalList.size());//total键 存放总记录数，必须的  

		DaoPage daoPage=invoiceAllocService.findLegalEntityByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		List<TmsMdLegalEntity> dataList = (List<TmsMdLegalEntity>) daoPage.getResult();
		
		jsonMap.put("rows", dataList);//rows键 存放每页记录 list  
        
		result = JSONObject.fromObject(jsonMap);
		retJson(response, result);
	}
	
	public String generateInvoiceAllocNumber() throws Exception {
		List<InvoiceAllocH> list = invoiceAllocService.getLatestInvoiceAllocH();
		
		String invoiceAllocNumber = "";
		for(InvoiceAllocH invoiceAllocH:list){
			invoiceAllocNumber = invoiceAllocH.getInvoiceAllotNumber();
			if (!AssertHelper.empty(invoiceAllocNumber)) {
				break;
			}
		}
		SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMdd");  
		Date dd=new Date();
		String finalNumber = sdf.format(dd);
		if (AssertHelper.empty(invoiceAllocNumber)) {
			finalNumber = "DIS" + finalNumber + String.format("%04d", 1);
		}else{
			invoiceAllocNumber = invoiceAllocNumber.substring(11);
			int no = Integer.parseInt(invoiceAllocNumber);
			no++;
			finalNumber = "DIS" + finalNumber + String.format("%04d", no);
		}
		return finalNumber;
	}
	
	@RequestMapping(value = "/loadInvoiceAllocPage", method = RequestMethod.POST)
	public void loadInvoiceAllocPage(@RequestParam Map<String,Object> parameter,HttpServletResponse response) throws Exception {
		DaoPage daoPage=invoiceAllocService.findInvoiceAllocByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
	
		List<InvoiceAllocHInParam> list = (List<InvoiceAllocHInParam>) daoPage.getResult();
		
		Map<String,String> map = DictionaryCacheUtils.getCodesByCvalueMap("VAT_CR_INVOICE_DISTRIBUTE_STATUS");
		SecurityDept dep = deptService.loadUserDefaultDept(ContextUtils.getCurrentUserCode());
		List<InvoiceAllocHInParam> finalList = new ArrayList<InvoiceAllocHInParam>();
		
		for (Iterator<InvoiceAllocHInParam> i = list.iterator(); i.hasNext(); ) {
			InvoiceAllocHInParam entity = i.next();
			entity.setApprovalStatus(map.get(entity.getApprovalStatus()));
			if(!AssertHelper.empty(dep)){
				entity.setOrgName(dep.getOrgName());
			}
			finalList.add(entity);
		}
		daoPage.setResult(finalList);
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class,new JsonDateValueProcessor("yyyy-MM-dd"));
		JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(), jsonConfig);
		JSONObject result = new JSONObject();
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray.toString());
		retJson(response, result);
	}
	
	@RequestMapping(value = "/loadInvoiceAllocLPage", method = RequestMethod.POST)
	public void loadInvoiceAllocLPage(@RequestParam Map<String,Object> parameter,HttpServletResponse response) throws Exception {
		DaoPage daoPage=invoiceAllocService.findInvoiceAllocLByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		
		List<InvoiceAllocLInParam> list = (List<InvoiceAllocLInParam>) daoPage.getResult();
		
		List<InvoiceAllocLInParam> finalList = new ArrayList<InvoiceAllocLInParam>();
		Map<String,String> map = DictionaryCacheUtils.getCodesByCvalueMap("VAT_CR_INVOICE_TYPE");
		
		for (Iterator<InvoiceAllocLInParam> i = list.iterator(); i.hasNext(); ) {
			InvoiceAllocLInParam entity = i.next();
		
			LegalEntityNode legalEntityNode = LegalEntityCacheUtils.getLegalNodeByLegalId(entity.getLegalEntityId());			

			TmsMdEquipment equipment = (TmsMdEquipment) invoiceAllocService.get(
					TmsMdEquipment.class, entity.getEquipmentId());
		
			entity.setInvoiceCategory(map.get(entity.getInvoiceCategory()));
			if(!AssertHelper.empty(legalEntityNode)){
				entity.setLegalEntityId(legalEntityNode.getName());
			}
			entity.setEquipmentId(equipment.getEquipmentName());
			entity.setEquipmentManager(equipment.getEquipmentManager());
			finalList.add(entity);
		}
		daoPage.setResult(finalList);
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class,new JsonDateValueProcessor("yyyy-MM-dd"));
		JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(), jsonConfig);
		JSONObject result = new JSONObject();
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray.toString());
		retJson(response, result);
	}
	
	@ResponseBody
	@RequestMapping(value = "/saveInvoiceAllocH", method = RequestMethod.POST)
	public void saveInvoiceAllocH(@ModelAttribute("allocForm") InvoiceAllocHInParam inParam,
			HttpServletResponse response) throws Exception {	
		Date date = invoiceTrxService.getDatabaseServerDate();
		
		if (AssertHelper.empty(inParam.getId())) {
			InvoiceAllocH invoiceAllocH = new InvoiceAllocH();
			
			invoiceAllocH=invoiceAllocService.convertInvoiceAllocInParamToEntity(inParam);
			invoiceAllocH.setId(IdGenerator.getUUID());
			invoiceAllocH.setApprovalStatus("draft");			
			invoiceAllocH.setInvoiceAllotDate(date);
			invoiceAllocH.setInvoiceAllotNumber(generateInvoiceAllocNumber());
			
			List<InvoiceAllocL> invoiceAllocLs = new ArrayList<InvoiceAllocL>();
			String details = inParam.getDetails();
			JSONArray data = JSONArray.fromObject(details);

			for(int i=0;i<data.size();i++){
				JSONObject obj = JSONObject.fromObject(data.get(i));
				InvoiceAllocLInParam detail = (InvoiceAllocLInParam)JSONObject.toBean(obj,InvoiceAllocLInParam.class);

				InvoiceAllocL invoiceAllocL = invoiceAllocService.convertInvoiceAllocLInParamToEntity(detail);
				invoiceAllocL.setId(IdGenerator.getUUID());
				invoiceAllocL.setInvoiceAllotHId(invoiceAllocH.getId());
				invoiceAllocLs.add(invoiceAllocL);							
			}
			invoiceAllocH.setList(invoiceAllocLs);
			invoiceAllocService.saveInvoiceAlloc(invoiceAllocH);
		}			
	}
		
	@RequestMapping(value = "/getAllocById")
	public void getAllocById(@RequestParam("id") String id,
			HttpServletResponse response) throws IOException {
		InvoiceAllocH alloc = (InvoiceAllocH) invoiceAllocService.get(
				InvoiceAllocH.class, id);

		InvoiceAllocHInParam inParam = invoiceAllocService.convertInvoiceAllocToInParam(alloc);
		Map<String,String> map = DictionaryCacheUtils.getCodesByCvalueMap("VAT_CR_INVOICE_DISTRIBUTE_STATUS");
		inParam.setApprovalStatus(map.get(inParam.getApprovalStatus()));

		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class,
				new JsonDateValueProcessor("yyyy-MM-dd"));
		JSONObject jsonObject = JSONObject.fromObject(inParam, jsonConfig);
		retJson(response, jsonObject);
	}
	
	@RequestMapping(value = "/approveById")
	public void approveById(@RequestParam("id") String id,
			HttpServletResponse response) throws IOException {
		InvoiceAllocH allocH = invoiceAllocService.getInvoiceAllocH(id);
		List<InvoiceAllocL> invoiceAllocLs = allocH.getInvoiceAllocLs();

		DistributeInvoiceRequest distributeInvoiceRequest = new DistributeInvoiceRequest();
		for(InvoiceAllocL invoiceAllocL:invoiceAllocLs){
			TmsMdLegalEntity tmsMdLegalEntity = (TmsMdLegalEntity) invoiceAllocService.get(TmsMdLegalEntity.class, invoiceAllocL.getLegalEntityId());
			TmsMdEquipment tmsMdEquipment = (TmsMdEquipment) invoiceAllocService.get(TmsMdEquipment.class, invoiceAllocL.getEquipmentId());
			
			distributeInvoiceRequest.setKey(invoiceAllocL.getId());
			distributeInvoiceRequest.setTaxPayerNo(tmsMdLegalEntity.getLegalEntityCode());
			
			if(null==tmsMdEquipment.getParentEquipmentId()){
				distributeInvoiceRequest.setServerCode("");
			}else{
				TmsMdEquipment parent = (TmsMdEquipment) invoiceAllocService.get(TmsMdEquipment.class, tmsMdEquipment.getParentEquipmentId());
				if(null!=parent){					
					distributeInvoiceRequest.setServerCode(parent.getEquipmentSeqNo());
				}else{
					distributeInvoiceRequest.setServerCode("");
				}
			}
			
			distributeInvoiceRequest.setKeyNo(tmsMdEquipment.getEquipmentSeqNo());
			if(invoiceAllocL.getInvoiceCategory() == "2"){ //1 增值税普通发票, 2 增值税专用发票
				distributeInvoiceRequest.setInoviceType(FPZLEnums.zp.getValue());
			}else{
				distributeInvoiceRequest.setInoviceType(FPZLEnums.pp.getValue());
			}
			distributeInvoiceRequest.setInvoiceCode(invoiceAllocL.getInvoiceCode());
			distributeInvoiceRequest.setStartNo(invoiceAllocL.getStartInvoiceNumber());
			distributeInvoiceRequest.setInvoiceCount(invoiceAllocL.getInvoiceAllotQty());
			taxInterface.processDistributeInvoice(distributeInvoiceRequest);
		}
		
		JSONObject result = new JSONObject();
		String successMsg = "审批成功！";
		result.put("success", "true");
		result.put("msg", successMsg);
		retJson(response, result);
	}
	
	@RequestMapping(value = "/getAllocLById")
	public void getAllocLById(@RequestParam("id") String id,
			HttpServletResponse response) throws IOException {
		InvoiceAllocL alloc = (InvoiceAllocL) invoiceAllocService.get(
				InvoiceAllocL.class, id);
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class,
				new JsonDateValueProcessor("yyyy-MM-dd"));
		JSONObject jsonObject = JSONObject.fromObject(alloc, jsonConfig);
		retJson(response, jsonObject);
	}
	
	@RequestMapping(value = "/deleteAlloc")
	public void deleteAlloc(@RequestParam("id") String id,
			HttpServletResponse response) throws IOException {
		JSONObject result = new JSONObject();
		invoiceAllocService.deleteAlloc(id);
		
		String successMsg = "删除成功！";
		result.put("success", "true");
		result.put("msg", successMsg);

		retJson(response, result);
	}
	
	@ResponseBody
	@RequestMapping(value = "/loadInvoiceAlloc", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<InvoiceAllocHInParam> loadInvoiceAlloc(Map<String, Object> map) throws Exception {
		List result=invoiceAllocService.findInvoiceAllocByParams(map);
		return result;
	}
	
	@RequestMapping(value = "/queryValidAllocNumber", method = RequestMethod.POST)
	public void queryValidAllocNumber(@RequestParam Map<String,Object> params, HttpServletResponse response) throws Exception {
		List<InvoiceTrxD> validAlloc = invoiceAllocService.queryValidAllocNumber(params);
		
		List finalList = new ArrayList();
		for (Iterator<InvoiceTrxD> i = validAlloc.iterator(); i.hasNext(); ) {
			InvoiceTrxD entity = i.next();
			finalList.add(entity.getInvoiceNumber());
		}

		JSONObject result = new JSONObject();
		result.put("validAlloc", finalList);
		retJson(response, result);
	}
}

