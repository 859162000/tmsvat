package com.deloitte.tms.base.taxsetting.controller;
// Generated by bo.wang with ling2.autoproject

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.IdGenerator;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;
import com.deloitte.tms.base.taxsetting.model.TmsMdTrxCatBsnStr;
import com.deloitte.tms.base.taxsetting.model.TmsMdTrxCatBsnStrInParam;
import com.deloitte.tms.base.taxsetting.service.TmsMdTrxCatBsnStrService;
/**
 * Home object for domain model class TmsMdTrxCatBsnStr.
 * @see com.deloitte.tms.base.taxsetting.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("tmsMdTrxCatBsnStr")
public class TmsMdTrxCatBsnStrController extends BaseController{
	@Resource
	TmsMdTrxCatBsnStrService tmsMdTrxCatBsnStrService;
	
	@RequestMapping(value = "/initTmsMdTrxCatBsnStr", method = RequestMethod.GET)
	public String initTmsMdTrxCatBsnStr()throws Exception{
		return "vat/tmsmdtrxcatbsnstr/tmsMdTrxCatBsnStr";
	}
	
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdTrxCatBsnStrPage", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadTmsMdTrxCatBsnStrPage(@RequestParam Map<String,Object> parameter,HttpServletResponse response) throws Exception {
		DaoPage daoPage=tmsMdTrxCatBsnStrService.findTmsMdTrxCatBsnStrByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		
		JSONObject result = new JSONObject();
		 JsonConfig jsonConfig = new JsonConfig();  
		 jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor("yyyy-MM-dd")); 
		 JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),jsonConfig);
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray);// daoPage.getr
		result.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
		
		
		return null;
	}
	@ResponseBody
	@RequestMapping(value = "/saveTmsMdTrxCatBsnStr", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTmsMdTrxCatBsnStr(TmsMdTrxCatBsnStrInParam inParam) throws Exception {
		TmsMdTrxCatBsnStr entity=tmsMdTrxCatBsnStrService.convertTmsMdTrxCatBsnStrInParamToEntity(inParam);
		
		
		if(AssertHelper.empty(inParam.getId())){
			inParam.setId(IdGenerator.getUUID());
			tmsMdTrxCatBsnStrService.save(entity);
		}
		else{
			tmsMdTrxCatBsnStrService.update(entity);
		}
		inParam.setId(entity.getId());
	}	
	@ResponseBody
	@RequestMapping(value = "/removeTmsMdTrxCatBsnStrs", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeTmsMdTrxCatBsnStrs(@RequestParam String ids) {
		AssertHelper.notEmpty_assert(ids,"需要删除的用户不能为空");
		String[] tmsMdTrxCatBsnStrIds=ids.split(",");
		//for(String tmsMdTrxCatBsnStrId:tmsMdTrxCatBsnStrIds){
			
		//}
	}
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdTrxCatBsnStr", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<TmsMdTrxCatBsnStrInParam> loadTmsMdTrxCatBsnStr(@RequestParam Map<String, Object> map) throws Exception {
		List result=tmsMdTrxCatBsnStrService.findTmsMdTrxCatBsnStrByParams(map);
		return result;
	}
	@ResponseBody
	@RequestMapping(value = "/loadAddTmsMdTrxCatBsnStr", method = RequestMethod.POST)
	public TmsMdTrxCatBsnStrInParam loadAddTmsMdTrxCatBsnStr(@RequestParam Map<String, Object> map) throws Exception {
		TmsMdTrxCatBsnStrInParam inParam=new TmsMdTrxCatBsnStrInParam();
		return inParam;
	}
	@ResponseBody
	@RequestMapping(value = "/loadModifyTmsMdTrxCatBsnStr", method = RequestMethod.POST)
	public TmsMdTrxCatBsnStrInParam loadModifyTmsMdTrxCatBsnStr(@RequestParam Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		TmsMdTrxCatBsnStr entity=(TmsMdTrxCatBsnStr)tmsMdTrxCatBsnStrService.get(TmsMdTrxCatBsnStr.class,id.toString());
		TmsMdTrxCatBsnStrInParam inParam=tmsMdTrxCatBsnStrService.convertTmsMdTrxCatBsnStrToInParam(entity);
		return inParam;
	}
	
	@ResponseBody
	@RequestMapping(value = "/updateModifyTmsMdTrxCatBsnStr", method = RequestMethod.POST)
	public void updateModifyTmsMdTrxCatBsnStr(TmsMdTrxCatBsnStrInParam inParam) throws Exception {
		TmsMdTrxCatBsnStr entity=(TmsMdTrxCatBsnStr)tmsMdTrxCatBsnStrService.get(TmsMdTrxCatBsnStr.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		tmsMdTrxCatBsnStrService.update(entity);
	}
}

