package com.deloitte.tms.vat.controller;
// Generated by bo.wang with ling2.autoproject

import java.io.Serializable;
import java.util.Collection;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.springmvc.controller.BaseController;
import com.deloitte.tms.vat.bill.pm.model.BillBook;
import com.deloitte.tms.vat.bill.pm.model.BillBookInParam;
import com.deloitte.tms.vat.bill.pm.service.BillBookService;
/**
 * Home object for domain model class BillBook.
 * @see com.deloitte.tms.vat.bill.pm.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("billBook")
public class BillBookController extends BaseController{
	@Resource
	BillBookService billBookService;
	
	@ResponseBody
	@RequestMapping(value = "/loadBillBookPage", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadBillBookPage(@RequestParam Map<String,Object> parameter) throws Exception {
		//DaoPage daoPage=billBookService.findBillBookByParams(parameter,PageUtils.getPageIndex(parameter),PageUtils.getPageSize(parameter));
		DaoPage daoPage=null;
		return daoPage;
	}
	
	@ResponseBody
	@RequestMapping(value = "/loadBillBookPageList", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadBillBookPageList(@RequestParam Map<String,Object> parameter) throws Exception {
		//DaoPage daoPage=billBookService.findBillBookByParams(parameter,PageUtils.getPageIndex(parameter),PageUtils.getPageSize(parameter));
		DaoPage daoPage=null;
		return daoPage;
	}
	
	
	@RequestMapping(value = "/billBookManageInit", method = RequestMethod.GET)
	public String billBookManageInit()throws Exception{
		return "vat/billBook/billBookManageInit";
	}
	
	@ResponseBody
	@RequestMapping(value = "/saveBillBook", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveBillBook(BillBookInParam inParam) throws Exception {
		System.out.println("保存成功");
		/*
		BillBook entity=billBookService.convertBillBookInParamToEntity(inParam);
		if(entity.getId()==null){
			billBookService.save(entity);
		}
		else{
			billBookService.update(entity);
		}
		inParam.setId(entity.getId());*/
	}
	
	@ResponseBody
	@RequestMapping(value = "/removeBillBooks", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeBillBooks(@RequestParam(value="id") String billBookKeys) {
		AssertHelper.notEmpty_assert(billBookKeys,"需要删除的用户不能为空");
		//String[] billBookIds=billBookKeys.split(",");
		//for(String billBookId:billBookIds){
		//}
	}
	@ResponseBody
	@RequestMapping(value = "/loadBillBook", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<BillBookInParam> loadBillBook(Map<String, Object> map) throws Exception {
		List result=billBookService.findBillBookByParams(map);
		return result;
	}
	
	public BillBookInParam loadAddBillBook(Map<String, Object> map) throws Exception {
		BillBookInParam inParam=new BillBookInParam();
		return inParam;
	}
	
	
	@ResponseBody
	@RequestMapping(value = "/loadModifyBillBook", method = RequestMethod.GET)
	public BillBookInParam loadModifyBillBook(@RequestParam Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		/*
		BillBook entity=(BillBook)billBookService.get(BillBook.class,id.toString());
		BillBookInParam inParam=billBookService.convertBillBookToInParam(entity);*/
		BillBookInParam inParam = null;
		
		return inParam;
	}
	
	
	
	public void updateModifyBillBook(BillBookInParam inParam) throws Exception {
		BillBook entity=(BillBook)billBookService.get(BillBook.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		billBookService.update(entity);
	}
}

