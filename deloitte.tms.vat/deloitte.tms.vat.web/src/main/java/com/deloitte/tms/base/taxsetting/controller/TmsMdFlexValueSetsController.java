package com.deloitte.tms.base.taxsetting.controller;
// Generated by bo.wang with ling2.autoproject

import java.util.Collection;
import java.util.Date;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;



import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import net.sf.json.util.CycleDetectionStrategy;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.SpringUtil;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.IdGenerator;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;
import com.deloitte.tms.base.masterdata.dao.impl.CustomerDaoImpl;
import com.deloitte.tms.base.taxsetting.dao.impl.TmsMdFlexValueSetsDaoImpl;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValueSets;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValueSetsInParam;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValues;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValuesInParam;
import com.deloitte.tms.base.taxsetting.service.TmsMdFlexValueSetsService;
/**
 * Home object for domain model class TmsMdFlexValueSets.
 * @see com.deloitte.tms.base.taxsetting.model
 * @author lvzhiyu
 */
@Controller
@RequestMapping("tmsMdFlexValueSets")
public class TmsMdFlexValueSetsController extends BaseController{
	@Resource
	TmsMdFlexValueSetsService tmsMdFlexValueSetsService;
	/**
	 * 跳转页面
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/initTmsMdFlexValueSets", method = RequestMethod.GET)
	public String initTmsMdFlexValueSets()throws Exception{
		return "vat/tmsmdflexvaluesets/tmsMdFlexValueSets";
	}
	
	/**
	 * 数据初始化及数据查询
	 * @param parameter
	 * @return
	 * @throws Exception
	 */
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdFlexValueSetsPage", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadTmsMdFlexValueSetsPage(@RequestParam Map<String,Object> parameter,HttpServletResponse response) throws Exception {
		DaoPage daoPage=tmsMdFlexValueSetsService.findTmsMdFlexValueSetsByParams(parameter,Integer.parseInt(parameter.get("page").toString()),Integer.parseInt(parameter.get("rows").toString()));
		JSONObject result = new JSONObject();
		 JsonConfig jsonConfig = new JsonConfig();
		 jsonConfig.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		 jsonConfig.registerJsonValueProcessor(Date.class,
					new JsonDateValueProcessor("yyyy-MM-dd"));
		 JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),jsonConfig);
		 
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray);
		result.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
		return null;
	}
	
	
/**
 * 新增值集设置
 * @param inParam
 * @throws Exception
 */
	@ResponseBody
	@RequestMapping(value = "/saveTmsMdFlexValueSets", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTmsMdFlexValueSets(TmsMdFlexValueSetsInParam inParam,HttpServletResponse response) throws Exception {
		TmsMdFlexValueSets entity=tmsMdFlexValueSetsService.convertTmsMdFlexValueSetsInParamToEntity(inParam);
		String id = IdGenerator.getUUID();
		if(AssertHelper.empty(entity.getId())){
			entity.setId(id);
			tmsMdFlexValueSetsService.save(entity);
		}
		else{
			id=entity.getId();
			tmsMdFlexValueSetsService.update(entity);
		}
		JSONObject result = new JSONObject();
		result.put("success", true);
		result.put("id", entity.getId());
		retJson(response, result);
		
	}	
	
/**
 * 删除值集设置
 * @param ids
 */
	@ResponseBody
	@RequestMapping(value = "/removeTmsMdFlexValueSetss", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeTmsMdFlexValueSetss(@RequestParam String ids) {
		AssertHelper.notEmpty_assert(ids,"需要删除的用户不能为空");
		String[] tmsMdFlexValueSetsIds=ids.split(",");
		for(String tmsMdFlexValueSetsId:tmsMdFlexValueSetsIds){
			tmsMdFlexValueSetsService.removeTmsMdFlexValueSetss(tmsMdFlexValueSetsId);
		}
	}
	
/**
 * 值集编码数据查询
 * @param map
 * @return
 * @throws Exception
 */
	@ResponseBody
	@RequestMapping(value = "/searchivaluesetencoding", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage searchivaluesetencoding(@RequestParam Map<String, Object> parameter,HttpServletResponse response) throws Exception {
		DaoPage daoPage = tmsMdFlexValueSetsService.searchivaluesetencoding(parameter,Integer.parseInt(parameter.get("page").toString()),Integer.parseInt(parameter.get("rows").toString()));
		JSONObject result = new JSONObject();
		 JsonConfig jsonConfig = new JsonConfig();
		 jsonConfig.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		 jsonConfig.registerJsonValueProcessor(Date.class,
					new JsonDateValueProcessor("yyyy-MM-dd"));
		 JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),jsonConfig);
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray);
		result.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
		return null;
	}
/**
 * 值集说明数据查询
 * @param map
 * @return
 * @throws Exception
 */
	@ResponseBody
	@RequestMapping(value = "/setsearchvaluesetthat", method = RequestMethod.POST)
	public DaoPage setsearchvaluesetthat(@RequestParam Map<String, Object>  parameter,HttpServletResponse response) throws Exception {
		DaoPage daoPage = tmsMdFlexValueSetsService.setsearchvaluesetthat(parameter,Integer.parseInt(parameter.get("page").toString()),Integer.parseInt(parameter.get("rows").toString()));
		JSONObject result = new JSONObject();
		 JsonConfig jsonConfig = new JsonConfig();
		 jsonConfig.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		 jsonConfig.registerJsonValueProcessor(Date.class,
					new JsonDateValueProcessor("yyyy-MM-dd"));
		 JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),jsonConfig);
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray);
		result.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
		return null;
	}
	@ResponseBody
	@RequestMapping(value = "/loadModifyTmsMdFlexValueSets", method = RequestMethod.POST)
	public TmsMdFlexValueSetsInParam loadModifyTmsMdFlexValueSets(@RequestParam Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		TmsMdFlexValueSets entity=(TmsMdFlexValueSets)tmsMdFlexValueSetsService.get(TmsMdFlexValueSets.class,id.toString());
		TmsMdFlexValueSetsInParam inParam=tmsMdFlexValueSetsService.convertTmsMdFlexValueSetsToInParam(entity);
		return inParam;
	}
	
	@ResponseBody
	@RequestMapping(value = "/updateModifyTmsMdFlexValueSets", method = RequestMethod.POST)
	public void updateModifyTmsMdFlexValueSets(TmsMdFlexValueSetsInParam inParam) throws Exception {
		TmsMdFlexValueSets entity=(TmsMdFlexValueSets)tmsMdFlexValueSetsService.get(TmsMdFlexValueSets.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		tmsMdFlexValueSetsService.update(entity);
	}
	
	/**
	 * 值数据查询
	 * @param parameter
	 * @return
	 * @throws Exception
	 */
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdFlexValuesPage")
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadTmsMdFlexValuesPage(@RequestParam Map<String,Object> parameter,HttpServletResponse response) throws Exception {
		DaoPage daoPage=tmsMdFlexValueSetsService.findTmsMdFlexValuesByParams(parameter,Integer.parseInt(parameter.get("page").toString()),Integer.parseInt(parameter.get("rows").toString()));
		JSONObject result = new JSONObject();
		 JsonConfig jsonConfig = new JsonConfig();
		 jsonConfig.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		 jsonConfig.registerJsonValueProcessor(Date.class,
					new JsonDateValueProcessor("yyyy-MM-dd"));
		 JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),jsonConfig);
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray);
		result.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
		return null;
	}
	@ResponseBody
	@RequestMapping(value = "loadTmsMdFlexValues", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection loadTmsMdFlexValues(Map<String, Object> map) throws Exception {
		List result=tmsMdFlexValueSetsService.findTmsMdFlexValuesByParams(map);
		return result;
	}
	
	/**
	 * 值数据增加修改
	 * @param inParam
	 * @throws Exception
	 */
	@ResponseBody
	@RequestMapping(value = "/saveTmsMdFlexValues")
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTmsMdFlexValues(TmsMdFlexValuesInParam inParam,HttpServletResponse response) throws Exception {
		TmsMdFlexValues entity=tmsMdFlexValueSetsService.convertTmsMdFlexValuesInParamToEntity(inParam);
		
		if(AssertHelper.empty(entity.getId())){
			entity.setId(IdGenerator.getUUID());
			tmsMdFlexValueSetsService.save(entity);
		}
		else{
			tmsMdFlexValueSetsService.update(entity);
		}
		JSONObject result = new JSONObject();
		result.put("status", "aaa");
		retJson(response, result);
	}


//用于数字结构定义获取值集名字
@ResponseBody
@RequestMapping(value = "/getName", method = RequestMethod.POST)
//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
public DaoPage getName(@RequestParam Map<String,Object> parameter,HttpServletResponse response,HttpServletRequest request) 

throws Exception {
 
	   String str = request.getParameter("flexValueSetId");
	   String pageNumber = request.getParameter("pageNumber");
	   String pageSize = request.getParameter("pageSize");
	    if(str != null && !"".equals(str)){
	
	    	 parameter.put("flexValueSetId",str);
	    	 parameter.put("page", pageNumber);
	    	 parameter.put("rows", pageSize);
	   	    
	DaoPage daoPage=tmsMdFlexValueSetsService.findTmsMdFlexValueSetsByParams(parameter,Integer.parseInt(parameter.get

("page").toString()),Integer.parseInt(parameter.get("rows").toString()));
	JSONObject result = new JSONObject();
	 JsonConfig jsonConfig = new JsonConfig();
	 jsonConfig.registerJsonValueProcessor(Date.class,
				new JsonDateValueProcessor("yyyy-MM-dd"));
	 JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),jsonConfig);
	result.put("total", daoPage.getRecordCount());
	result.put("rows", jsonArray);
	result.put("pages", daoPage.getPageCount());
	result.put("success", true);
	
	result.put("name", daoPage.getResult());
	retJson(response, result);
	
	    }
	return null;
}

}

