package com.deloitte.tms.base.taxsetting.controller;

// Generated by bo.wang with ling2.autoproject

import java.io.IOException;
import java.io.PrintWriter;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import net.sf.json.util.CycleDetectionStrategy;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.IdGenerator;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexSegments;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexStructures;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValueSets;
import com.deloitte.tms.base.taxsetting.model.TmsMdFlexValues;
import com.deloitte.tms.base.taxsetting.model.TmsMdOrgBsnStructures;
import com.deloitte.tms.base.taxsetting.model.TmsMdOrgBsnStructuresInParam;
import com.deloitte.tms.base.taxsetting.service.TmsMdFlexStructuresService;
import com.deloitte.tms.base.taxsetting.service.TmsMdFlexValueSetsService;
import com.deloitte.tms.base.taxsetting.service.TmsMdOrgBsnStructuresService;

/**
 * Home object for domain model class TmsMdOrgBsnStructures.
 * 
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("tmsMdOrgBsnStructures")
public class TmsMdOrgBsnStructuresController extends BaseController {
	@Resource
	TmsMdOrgBsnStructuresService tmsMdOrgBsnStructuresService;
	@Resource
	TmsMdFlexStructuresService tmsMdFlexStructuresService;
	@Resource
	TmsMdFlexValueSetsService tmsMdFlexValueSetsService;

	@RequestMapping(value = "/initTmsMdOrgBsnStructures", method = RequestMethod.GET)
	public String initTmsMdOrgBsnStructures() throws Exception {
		return "vat/tmsmdorgbsnstructures/tmsMdOrgBsnStructures";
	}

	@ResponseBody
	@RequestMapping(value = "/loadTmsMdOrgBsnStructuresPage", method = RequestMethod.POST)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void loadTmsMdOrgBsnStructuresPage(
			@RequestParam Map<String, Object> parameter,
			HttpServletResponse response) throws Exception {
		DaoPage daoPage = tmsMdOrgBsnStructuresService
				.findTmsMdOrgBsnStructuresByParams(parameter,
						PageUtils.getPageNumber(parameter),
						PageUtils.getPageSize(parameter));
		JSONObject result = new JSONObject();
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class,
				new JsonDateValueProcessor());
		JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),
				jsonConfig);
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray);// daoPage.getr
		result.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);

		// return daoPage;
	}

	@ResponseBody
	@RequestMapping(value = "/loadTmsMdOrgBsnStructuresPageById", method = RequestMethod.POST)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void loadTmsMdOrgBsnStructuresPageByOrgId(
			@RequestParam Map<String, Object> parameter,
			HttpServletResponse response) throws Exception {
		String orgId = (String) parameter.get("id");// 从前端传过来的组织ID
		Map<String, Object> mmmMap = new HashMap<String, Object>();
		mmmMap.put("orgId", orgId);
		List OrgBsnStructures = tmsMdOrgBsnStructuresService
				.findTmsMdOrgBsnStructuresByParams(mmmMap);// tmsMdOrgBsnStructuresService.findTmsMdOrgBsnStructuresByParams(mmmMap,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		TmsMdOrgBsnStructures tmsMdOrgBsnStructures = new TmsMdOrgBsnStructures();// 组织关联数据结构
		String accdFlexStructuresId = null;
		String bsnFlexStructuresId = null;
		TmsMdFlexStructures tmsMdFlexStructures = null;
		if (OrgBsnStructures.size() > 0) {
			tmsMdOrgBsnStructures = (TmsMdOrgBsnStructures) OrgBsnStructures
					.get(0);// 只是循环一次
			bsnFlexStructuresId = tmsMdOrgBsnStructures
					.getBsnFlexStructuresId();// 业务数据结构定义ID
			accdFlexStructuresId = tmsMdOrgBsnStructures
					.getAccdFlexStructuresId();// 会计数据结构定义ID
			
			 if (bsnFlexStructuresId != null) {
					tmsMdFlexStructures = (TmsMdFlexStructures) tmsMdOrgBsnStructuresService
							.findById(TmsMdFlexStructures.class,
									bsnFlexStructuresId);
			}else if (accdFlexStructuresId != null) {
				tmsMdFlexStructures = (TmsMdFlexStructures) tmsMdOrgBsnStructuresService
						.findById(TmsMdFlexStructures.class,accdFlexStructuresId);
			} 
		}
		Map<String, Object> myMap = new HashMap<String, Object>();
		TmsMdFlexStructures temBsnStructures = new TmsMdFlexStructures();
		if (accdFlexStructuresId != null) {
			temBsnStructures = (TmsMdFlexStructures) tmsMdOrgBsnStructuresService
					.findById(TmsMdFlexStructures.class, accdFlexStructuresId);
		} else if (bsnFlexStructuresId != null) {
			temBsnStructures = (TmsMdFlexStructures) tmsMdOrgBsnStructuresService
					.findById(TmsMdFlexStructures.class, bsnFlexStructuresId);
		}
		List<TmsMdFlexSegments> returntmsMdFlexSegments = new ArrayList<TmsMdFlexSegments>();
		returntmsMdFlexSegments = (List<TmsMdFlexSegments>) temBsnStructures.getTmsMdFlexSegments();// 数据结构段数据组合
		
		
		Map<String, TmsMdFlexValueSets> tmsMdFlexValueSetsMap = new HashMap<String, TmsMdFlexValueSets>(); 
		if(returntmsMdFlexSegments!=null){
			for(TmsMdFlexSegments tmsMdFlexSegments:returntmsMdFlexSegments){
				String flexValueSetId = tmsMdFlexSegments.getFlexValueSetId();
				TmsMdFlexValueSets tmsMdFlexValueSets = (TmsMdFlexValueSets)tmsMdFlexValueSetsService.findById(TmsMdFlexValueSets.class, flexValueSetId);
				tmsMdFlexValueSetsMap.put(tmsMdFlexSegments.getFlexValueSetId(), tmsMdFlexValueSets);
			}
		}
		
		
		JSONObject result = new JSONObject();
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		JSONArray jsonArray = JSONArray.fromObject(returntmsMdFlexSegments,jsonConfig );
		
		result.accumulateAll(tmsMdFlexValueSetsMap, jsonConfig);
		
		if(returntmsMdFlexSegments!=null&&returntmsMdFlexSegments.size()>0){
			result.put("tmsMdFlexSegments", jsonArray);// daoPage.getr
			result.put("flexStructuresDescription", temBsnStructures.getFlexStructuresDescription());
			result.put("success", true);
		}else{
			result.put("success", false);
			result.put("errMsg", "没有找到业务数据结构");
		}
		System.out.print(result);
		retJson(response, result);
		
	}
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdFlexValuesByFlexValueSetId", method = RequestMethod.POST)
	public void loadTmsMdFlexValuesByFlexValueSetId(
			@RequestParam Map<String, Object> parameter,
			HttpServletResponse response) throws Exception {
		
		String flexValueSetId = (String) parameter.get("flexValueSetId");// 从前端传过来的组织ID
		
		TmsMdFlexValueSets tmsMdFlexValueSets = (TmsMdFlexValueSets)tmsMdFlexValueSetsService.findById(TmsMdFlexValueSets.class, flexValueSetId);
		List<TmsMdFlexValues> tmsMdFlexValues = (List<TmsMdFlexValues>) tmsMdFlexValueSets.getTmsMdFlexValues();
		
		JSONObject result = new JSONObject();
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		JSONArray jsonArray = JSONArray.fromObject(tmsMdFlexValues,jsonConfig );
		if(tmsMdFlexValues!=null&&tmsMdFlexValues.size()>0){
			result.put("tmsMdFlexValues", jsonArray);// daoPage.getr
			result.put("success", true);
		}else{
			result.put("success", false);
			result.put("errMsg", "没有查询到对应的值");
		}
		
		retJson(response, result);
	}

	@ResponseBody
	@RequestMapping(value = "/saveTmsMdOrgBsnStructures", method = RequestMethod.POST)
	public void saveTmsMdOrgBsnStructures(TmsMdOrgBsnStructuresInParam inParam)
			throws Exception {
		TmsMdOrgBsnStructures entity = tmsMdOrgBsnStructuresService
				.convertTmsMdOrgBsnStructuresInParamToEntity(inParam);
		if (AssertHelper.empty(entity.getId())) {
			entity.setId(IdGenerator.getUUID());
			tmsMdOrgBsnStructuresService.save(entity);
		} else {
			tmsMdOrgBsnStructuresService.update(entity);
		}
		inParam.setId(entity.getId());
	}

	@ResponseBody
	@RequestMapping(value = "/removeTmsMdOrgBsnStructuress", method = RequestMethod.POST)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeTmsMdOrgBsnStructuress(@RequestParam String ids) {
		AssertHelper.notEmpty_assert(ids, "需要删除的用户不能为空");
		String[] tmsMdOrgBsnStructuresIds = ids.split(",");
		// for(String tmsMdOrgBsnStructuresId:tmsMdOrgBsnStructuresIds){

		// }
	}

	@ResponseBody
	@RequestMapping(value = "/loadTmsMdOrgBsnStructures", method = RequestMethod.POST)
	// @RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<TmsMdOrgBsnStructuresInParam> loadTmsMdOrgBsnStructures(
			@RequestParam Map<String, Object> map) throws Exception {
		List result = tmsMdOrgBsnStructuresService
				.findTmsMdOrgBsnStructuresByParams(map);
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "/loadAddTmsMdOrgBsnStructures", method = RequestMethod.POST)
	public TmsMdOrgBsnStructuresInParam loadAddTmsMdOrgBsnStructures(
			@RequestParam Map<String, Object> map) throws Exception {
		TmsMdOrgBsnStructuresInParam inParam = new TmsMdOrgBsnStructuresInParam();
		return inParam;
	}

	@ResponseBody
	@RequestMapping(value = "/loadModifyTmsMdOrgBsnStructures", method = RequestMethod.POST)
	public TmsMdOrgBsnStructuresInParam loadModifyTmsMdOrgBsnStructures(
			@RequestParam Map<String, Object> map) throws Exception {
		Object id = map.get("id");
		AssertHelper.notEmpty_assert(id, "编辑的主键不能为空");
		TmsMdOrgBsnStructures entity = (TmsMdOrgBsnStructures) tmsMdOrgBsnStructuresService
				.get(TmsMdOrgBsnStructures.class, id.toString());
		TmsMdOrgBsnStructuresInParam inParam = tmsMdOrgBsnStructuresService
				.convertTmsMdOrgBsnStructuresToInParam(entity);
		return inParam;
	}

	@ResponseBody
	@RequestMapping(value = "/updateModifyTmsMdOrgBsnStructures", method = RequestMethod.POST)
	public void updateModifyTmsMdOrgBsnStructures(
			TmsMdOrgBsnStructuresInParam inParam) throws Exception {
		TmsMdOrgBsnStructures entity = (TmsMdOrgBsnStructures) tmsMdOrgBsnStructuresService
				.get(TmsMdOrgBsnStructures.class, inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		tmsMdOrgBsnStructuresService.update(entity);
	}

}
