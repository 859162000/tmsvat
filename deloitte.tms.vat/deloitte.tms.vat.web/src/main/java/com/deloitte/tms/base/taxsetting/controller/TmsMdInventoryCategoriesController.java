package com.deloitte.tms.base.taxsetting.controller;
// Generated by bo.wang with ling2.autoproject

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;





import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
//import com.deloitte.tms.pl.core.commons.springmvc.controller.BaseController;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.IdGenerator;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;
import com.deloitte.tms.base.taxsetting.model.TmsMdInventoryCategories;
import com.deloitte.tms.base.taxsetting.model.TmsMdInventoryCategoriesInParam;
import com.deloitte.tms.base.taxsetting.model.TmsMdInventoryItems;
import com.deloitte.tms.base.taxsetting.model.TmsMdInventoryItemsInParam;
import com.deloitte.tms.base.taxsetting.service.TmsMdInventoryCategoriesService;
/**
 * Home object for domain model class TmsMdInventoryCategories.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("tmsMdInventoryCategories")
public class TmsMdInventoryCategoriesController extends BaseController{
	@Resource
	TmsMdInventoryCategoriesService tmsMdInventoryCategoriesService;
	
	@RequestMapping(value = "/initTmsMdInventoryCategories", method = RequestMethod.GET)
	public String initTmsMdInventoryCategories()throws Exception{
		return "vat/tmsmdinventorycategories/tmsMdInventoryCategories";
	}
	
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdInventoryCategoriesPage", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void loadTmsMdInventoryCategoriesPage(@RequestParam Map<String,Object> parameter,HttpServletResponse response) throws Exception {	
		DaoPage daoPage=tmsMdInventoryCategoriesService.findTmsMdInventoryCategoriesByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));		
		JSONObject result = new JSONObject();
		 JsonConfig jsonConfig = new JsonConfig();  
		 jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor()); 
		 JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),jsonConfig);
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray);// daoPage.getr
		result.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
		
		
		//return daoPage;
	}
	@ResponseBody
	@RequestMapping(value = "/saveTmsMdInventoryCategories", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTmsMdInventoryCategories(TmsMdInventoryCategoriesInParam inParam) throws Exception {
		TmsMdInventoryCategories entity=tmsMdInventoryCategoriesService.convertTmsMdInventoryCategoriesInParamToEntity(inParam);
		if(AssertHelper.empty(entity.getId())){
			entity.setId(IdGenerator.getUUID());				
			tmsMdInventoryCategoriesService.save(entity);		
		}
		else{
		
			tmsMdInventoryCategoriesService.update(entity);			
		}
		inParam.setId(entity.getId());
	}	
	@ResponseBody
	@RequestMapping(value = "/removeTmsMdInventoryCategoriess", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeTmsMdInventoryCategoriess(@RequestParam String ids) {
		AssertHelper.notEmpty_assert(ids,"需要删除的用户不能为空");
		String[] tmsMdInventoryCategoriesIds=ids.split(",");
		//for(String tmsMdInventoryCategoriesId:tmsMdInventoryCategoriesIds){
	
		
		
		//}
	}
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdInventoryCategories", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<TmsMdInventoryCategoriesInParam> loadTmsMdInventoryCategories(@RequestParam Map<String, Object> map) throws Exception {
		List result=tmsMdInventoryCategoriesService.findTmsMdInventoryCategoriesByParams(map);
		return result;
	}
	@ResponseBody
	@RequestMapping(value = "/loadAddTmsMdInventoryCategories", method = RequestMethod.POST)
	public TmsMdInventoryCategoriesInParam loadAddTmsMdInventoryCategories(@RequestParam Map<String, Object> map) throws Exception {
		TmsMdInventoryCategoriesInParam inParam=new TmsMdInventoryCategoriesInParam();
		return inParam;
	}
	@ResponseBody
	@RequestMapping(value = "/loadModifyTmsMdInventoryCategories", method = RequestMethod.POST)
	public TmsMdInventoryCategoriesInParam loadModifyTmsMdInventoryCategories(@RequestParam Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		TmsMdInventoryCategories entity=(TmsMdInventoryCategories)tmsMdInventoryCategoriesService.get(TmsMdInventoryCategories.class,id.toString());
		TmsMdInventoryCategoriesInParam inParam=tmsMdInventoryCategoriesService.convertTmsMdInventoryCategoriesToInParam(entity);
		return inParam;
	}
	
	@ResponseBody
	@RequestMapping(value = "/updateModifyTmsMdInventoryCategories", method = RequestMethod.POST)
	public void updateModifyTmsMdInventoryCategories(TmsMdInventoryCategoriesInParam inParam) throws Exception {
		TmsMdInventoryCategories entity=(TmsMdInventoryCategories)tmsMdInventoryCategoriesService.get(TmsMdInventoryCategories.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		tmsMdInventoryCategoriesService.update(entity);
	}
	@ResponseBody
	@RequestMapping(value = "loadTmsMdInventoryItemsPage", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadTmsMdInventoryItemsPage(@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=tmsMdInventoryCategoriesService.findTmsMdInventoryItemsByParams(parameter,PageUtils.getPageIndex(parameter),PageUtils.getPageSize(parameter));
		return daoPage;
	}
	@ResponseBody
	@RequestMapping(value = "loadTmsMdInventoryItems", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection loadTmsMdInventoryItems(Map<String, Object> map) throws Exception {
		List result=tmsMdInventoryCategoriesService.findTmsMdInventoryItemsByParams(map);
		return result;
	}
	@ResponseBody
	@RequestMapping(value = "/saveTmsMdInventoryItems", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTmsMdInventoryItems(TmsMdInventoryItemsInParam inParam) throws Exception {
		TmsMdInventoryItems entity=tmsMdInventoryCategoriesService.convertTmsMdInventoryItemsInParamToEntity(inParam);
		if(AssertHelper.empty(entity.getId())){
//			if(true){
			entity.setId(IdGenerator.getUUID());
			tmsMdInventoryCategoriesService.save(entity);
		}
		else{
			tmsMdInventoryCategoriesService.update(entity);
		}
		inParam.setId(entity.getId());
	}	
}

