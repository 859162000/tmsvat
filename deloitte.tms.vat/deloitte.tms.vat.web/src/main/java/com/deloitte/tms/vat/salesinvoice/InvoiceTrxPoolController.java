package com.deloitte.tms.vat.salesinvoice;
// Generated by bo.wang with ling2.autoproject

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.base.masterdata.model.BaseOrgInParam;
import com.deloitte.tms.base.masterdata.model.CustomerInParam;
import com.deloitte.tms.base.masterdata.model.TmsMdTaxTrxType;
import com.deloitte.tms.base.masterdata.model.TmsMdTaxTrxTypeInParam;
import com.deloitte.tms.base.masterdata.service.CustomerService;
import com.deloitte.tms.base.masterdata.service.TmsMdTaxTrxTypeService;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.dictionary.model.DictionaryEntity;
import com.deloitte.tms.pl.dictionary.service.DictionaryService;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;
import com.deloitte.tms.vat.salesinvoice.model.InvoiceTrxPoolInParam;
import com.deloitte.tms.vat.salesinvoice.service.InvoiceTrxPoolService;
/**
 * Home object for domain model class InvoiceTrxPool.
 * @see com.deloitte.tms.vat.salesinvoice.model
 * @author Hibernate Tools
 */
@Controller
//@RequestMapping(value = "invoiceTrxPool")
public class InvoiceTrxPoolController extends BaseController{
	@Resource
	InvoiceTrxPoolService invoiceTrxPoolService;
	
	@Resource
	CustomerService customerService;
	
	@Resource
	TmsMdTaxTrxTypeService tmsMdTaxTrxTypeService;
	
	@Resource
	  DictionaryService dictionaryService;
	
	@RequestMapping(value = "loadInvoiceTrxPool")
	public String indexPage() {
		return "/vat/invoiceTrxPool/invoiceTrxPool";
	}
	
	//@ResponseBody
	@RequestMapping(value = "invoiceTrxPool/getInvoiceTrxPool")
	public void loadInvoiceTrxPoolPage(HttpServletResponse response,@RequestParam Map<String,Object> parameter) throws Exception {
		
		/*String selectOption = (String)parameter.get("selectOption");
		Object customerNumber = parameter.get("customerNumber");
		if(("1".equals(selectOption)||"3".equals(selectOption))||(customerNumber!=null&&!"".equals(customerNumber))){
			if(selectOption!=null&&"3".equals(selectOption.toString())){
				parameter.put("gsnRegistrationNumber", parameter.get("selectValue"));
			}
			List<CustomerInParam> list = customerService.findCustomerByParams(parameter);
			if(list==null ||list.size()==0){
				parameter.put("customerId", "not exist");
			}else{
				parameter.put("customerId", list.get(0).getId());
			}
		}*/
		DaoPage daoPage=invoiceTrxPoolService.findInvoiceTrxPoolByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class,new JsonDateValueProcessor("yyyy-MM-dd"));
		JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(), jsonConfig);
		JSONObject result = new JSONObject();
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray.toString());
		retJson(response, result);	

		//return daoPage;
	}
	
	
	
	@ResponseBody
	@RequestMapping(value = "invoiceTrxPool/getOrgList", method = RequestMethod.POST)
	public List<BaseOrgInParam> getOrgList(HttpServletResponse response) throws Exception {
		List<BaseOrgInParam> list = new ArrayList<BaseOrgInParam>();
		BaseOrgInParam baseOrgInParam1 = new BaseOrgInParam();
		baseOrgInParam1.setOrgCode("10001");
		baseOrgInParam1.setOrgName("CS-1001");
		
		BaseOrgInParam baseOrgInParam2 = new BaseOrgInParam();
		baseOrgInParam2.setOrgCode("10001");
		baseOrgInParam2.setOrgName("CS-1001");
		
		BaseOrgInParam baseOrgInParam3 = new BaseOrgInParam();
		baseOrgInParam3.setOrgCode("10001");
		baseOrgInParam3.setOrgName("CS-1001");
		
		list.add(baseOrgInParam1);
		list.add(baseOrgInParam2);
		list.add(baseOrgInParam3);
	
		return list;
	}
	
	@ResponseBody
	@RequestMapping(value = "invoiceTrxPool/getCustomerList", method = RequestMethod.POST)
	public List<CustomerInParam> getCustomerList(@RequestParam Map<String,Object> parameter) throws Exception {
		List<CustomerInParam> list = new ArrayList<CustomerInParam>();
		//List<CustomerInParam> list = customerService.findCustomerByParams(params);
		CustomerInParam customerInParam1 = new CustomerInParam();
		customerInParam1.setCustomerNumber("10001");
		customerInParam1.setCustomerName("招商银行");
		
		CustomerInParam customerInParam2 = new CustomerInParam();
		customerInParam2.setCustomerNumber("10002");
		customerInParam2.setCustomerName("建设银行");
		
		CustomerInParam customerInParam3 = new CustomerInParam();
		customerInParam3.setCustomerNumber("10003");
		customerInParam3.setCustomerName("工商银行");
		
		list.add(customerInParam1);
		list.add(customerInParam2);
		list.add(customerInParam3);
	
		return list;
	}
	
	
	@ResponseBody
	@RequestMapping(value = "invoiceTrxPool/getInvoiceTrxPool1", method = RequestMethod.POST)
	public List<InvoiceTrxPoolInParam> getInvoiceTrxPool(@RequestParam Map<String,Object> parameter) throws Exception {
		List<InvoiceTrxPoolInParam> list = new ArrayList<InvoiceTrxPoolInParam>();
		InvoiceTrxPoolInParam invoiceTrxPoolInParam = new InvoiceTrxPoolInParam();
		invoiceTrxPoolInParam.setPeriodName("一年");
		invoiceTrxPoolInParam.setTrxBatchNum("JY10001");

		list.add(invoiceTrxPoolInParam);
	
		return list;
	}
	
	
	
	@RequestMapping(value = "invoiceTrxPool/getDictionaryNameByCode", method = RequestMethod.GET)
	public void getDictionaryNameByCode(HttpServletResponse response,@RequestParam Map<String,Object> parameter) throws Exception {
//		List<TmsMdTaxTrxTypeInParam> list =tmsMdTaxTrxTypeService.findTmsMdTaxTrxTypeByParams(parameter);
		Collection<DictionaryEntity> results=dictionaryService.loadDictionaryEntities((String)parameter.get("categaryCode"));
		JSONObject result = new JSONObject();
		for(DictionaryEntity entity:results){
			String code=entity.getCode();
			if(code.equals(((String)parameter.get("code")).trim())){
				result.put("value", entity.getName());
				retJson(response, result);
				break;
			}
		}

	}
	
	
//	 @ResponseBody
//	  @RequestMapping(value = "invoiceTrxPool/getDictionaryNameByCode", method = RequestMethod.GET)
//	  public void getDictionaryNameByCode(@RequestParam String parentCode,@RequestParam String SonCode)
//	  {
//		Collection<DictionaryEntity> results=dictionaryService.loadDictionaryEntities(parentCode);
//		for(DictionaryEntity entity:results){
//			String name=entity.getName();
////			if(AssertHelper.notEmpty(name)){
////				if(name.indexOf("${res[")>=0){
////					name=name.replace("${res[\"", "");
////					name=name.replace("\"]}", "");
////					name=I18nUtils.get(name);
////					entity.setName(name);
////				}
////			}
//			
//			
//		}
//	  }
}

