package com.deloitte.tms.base.masterdata.controller;
// Generated by bo.wang with ling2.autoproject

import java.io.Serializable;
import java.util.Collection;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.pl.core.commons.springmvc.controller.BaseController;
import com.deloitte.tms.base.masterdata.model.BaseOrg;
import com.deloitte.tms.base.masterdata.model.BaseOrgInParam;
import com.deloitte.tms.base.masterdata.model.BaseOrg;
import com.deloitte.tms.base.masterdata.model.BaseOrgInParam;
import com.deloitte.tms.base.masterdata.service.BaseOrgService;
/**
 * Home object for domain model class BaseOrg.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("baseOrg")
public class BaseOrgController extends BaseController{
	@Resource
	BaseOrgService baseOrgService;
	
	@ResponseBody
	@RequestMapping(value = "/loadBaseOrgPage", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadBaseOrgPage(@RequestParam Map<String,Object> parameter) throws Exception {
		DaoPage daoPage=baseOrgService.findBaseOrgByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		return daoPage;
	}
	@ResponseBody
	@RequestMapping(value = "/saveBaseOrg", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveBaseOrg(BaseOrgInParam inParam) throws Exception {
		BaseOrg entity=baseOrgService.convertBaseOrgInParamToEntity(inParam);
		if(entity.getId()==null){
			baseOrgService.save(entity);
		}
		else{
			baseOrgService.update(entity);
		}
		inParam.setId(entity.getId());
	}	
	@ResponseBody
	@RequestMapping(value = "/removeBaseOrgs", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeBaseOrgs(@RequestParam String baseOrgKeys) {
		AssertHelper.notEmpty_assert(baseOrgKeys,"需要删除的用户不能为空");
		String[] baseOrgIds=baseOrgKeys.split(",");
		//for(String baseOrgId:baseOrgIds){
			
		//}
	}
	
	public BaseOrgInParam loadAddBaseOrg(Map<String, Object> map) throws Exception {
		BaseOrgInParam inParam=new BaseOrgInParam();
		return inParam;
	}
	
	public BaseOrgInParam loadModifyBaseOrg(Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		BaseOrg entity=(BaseOrg)baseOrgService.get(BaseOrg.class,Long.parseLong(id.toString()));
		BaseOrgInParam inParam=baseOrgService.convertBaseOrgToInParam(entity);
		return inParam;
	}
	
	
	
	public void updateModifyBaseOrg(BaseOrgInParam inParam) throws Exception {
		BaseOrg entity=(BaseOrg)baseOrgService.get(BaseOrg.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		baseOrgService.update(entity);
	}

	@ResponseBody
	@RequestMapping(value = "loadBaseOrg", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection loadBaseOrg(Map<String, Object> map) throws Exception {
		List result=baseOrgService.findBaseOrgByParams(map);
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value = "/loadBaseOrgPageRequest", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage loadBaseOrgPageRequest(@RequestParam Map<String,Object> parameter,HttpServletRequest request) throws Exception {
	    
		 String param =(String)request.getParameter("orgName");
		    if(param!=null&&!"".equals(param)){
			    parameter.put("orgName", param);
		}
		DaoPage daoPage=baseOrgService.findBaseOrgByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		return daoPage;
	}
	
	
	
	
}

