package com.deloitte.tms.vat.salesinvoice.controller;
// Generated by bo.wang with ling2.autoproject

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.context.utils.ContextUtils;
import com.deloitte.tms.vat.base.enums.CrvaInvoicePreStatusEnums;
import com.deloitte.tms.vat.base.enums.VatCustomerDiscOptionEnums;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.salesinvoice.model.TmsCrvatInvoicePreH;
import com.deloitte.tms.vat.salesinvoice.model.VoTmsCrvatInvoicePreH;
import com.deloitte.tms.vat.salesinvoice.service.InvoicePreService;
import com.deloitte.tms.vat.salesinvoice.service.TmsCrvatInvoicePreHService;
/**
 * Home object for domain model class Customer.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("invoicePreProcess")
public class InvoicePreProcessController extends BaseController{
	private static final Logger logger = LoggerFactory
			.getLogger(InvoicePreProcessController.class);
	
	@Resource
	TmsCrvatInvoicePreHService tmsCrvatInvoicePreHService;
	@Resource
	InvoicePreService invoicePreService;
	
	@ResponseBody
	@RequestMapping(value = "/invoicePreProcessList", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage invoicePreProcessList(@RequestParam Map<String,Object> parameter) throws Exception {
		parameter.put("approveStatus", CrvaInvoicePreStatusEnums.TOBEAPPROVE.getValue());
		DaoPage daoPage = invoicePreService.findTmsCrvatInvoicePreHsByParam(parameter);
		List<VoTmsCrvatInvoicePreH> list = (List<VoTmsCrvatInvoicePreH>) daoPage.getResult();
		for(VoTmsCrvatInvoicePreH preHInParam:list){
			for(CrvaInvoicePreStatusEnums item:CrvaInvoicePreStatusEnums.values()){
				if(item.getValue().equals(preHInParam.getApprovalStatus())){
					preHInParam.setAstatus(getMessage(item.getText()));
					break;
				}
			}
			for(VatCustomerDiscOptionEnums item:VatCustomerDiscOptionEnums.values()){
				if(item.getValue().equals(preHInParam.getCustRegistrationCode())){
					preHInParam.setCustRegistrationCodeStr(getMessage(item.getText()));
					break;
				}
			}
			
		}
		//DaoPage daoPage=tmsCrvatInvoicePreHService.findTmsCrvatInvoicePreHByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		
		return daoPage;
	}
	
	@ResponseBody
	@RequestMapping(value = "/invoicePreProcessQueryList", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public DaoPage invoicePreProcessQueryList(@RequestParam Map<String,Object> parameter) throws Exception {
		parameter.put("approveStatus", CrvaInvoicePreStatusEnums.APPROVED.getValue());
		DaoPage daoPage = invoicePreService.findTmsCrvatInvoicePreHsByParam(parameter);
		List<VoTmsCrvatInvoicePreH> list = (List<VoTmsCrvatInvoicePreH>) daoPage.getResult();
		for(VoTmsCrvatInvoicePreH preHInParam:list){
			for(CrvaInvoicePreStatusEnums item:CrvaInvoicePreStatusEnums.values()){
				if(item.getValue().equals(preHInParam.getApprovalStatus())){
					preHInParam.setAstatus(getMessage(item.getText()));
					break;
				}
			}
			for(VatCustomerDiscOptionEnums item:VatCustomerDiscOptionEnums.values()){
				if(item.getValue().equals(preHInParam.getCustRegistrationCode())){
					preHInParam.setCustRegistrationCodeStr(getMessage(item.getText()));
					break;
				}
			}
		}
		return daoPage;
	}
	
	
	@RequestMapping(value = "/invoicePreProcessInit", method = RequestMethod.GET)
	public String invoicePreProcessInit()throws Exception{
		return "vat/invoicePreProcess/invoicePreProcessInit";
	}
	
	@RequestMapping(value = "/invoicePreProcessQueryInit", method = RequestMethod.GET)
	public String invoicePreProcessQueryInit()throws Exception{
		return "vat/invoicePreProcess/invoicePreProcessQueryInit";
	}
	@RequestMapping(value = "/invoicePreProcessCheckInit", method = RequestMethod.GET)
	public String invoicePreProcessCheckInit()throws Exception{
		return "vat/invoicePreProcess/invoicePreProcessCheckInit";
	}
	@ResponseBody
	@RequestMapping(value = "/invoicePreProcessDisAgree", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void invoicePreProcessDisAgree(@RequestParam(value="id") String idKeys) {
		AssertHelper.notEmpty_assert(idKeys,"ID不能为空");
		String[] ids=idKeys.split(",");
		for(String id:ids){
			TmsCrvatInvoicePreH tmsCrvatInvoicePreH = (TmsCrvatInvoicePreH) invoicePreService.get(TmsCrvatInvoicePreH.class, id);		
			invoicePreService.setRevertStatus(tmsCrvatInvoicePreH);			
			/*AssertHelper.notEmpty_assert(id,"ID不能为空");
			TmsCrvatInvoicePreH entity=(TmsCrvatInvoicePreH)tmsCrvatInvoicePreHService.get(TmsCrvatInvoicePreH.class,id);
			if(entity.getApprovalStatus().equals(CrvaInvoicePreStatusEnums.TOBEAPPROVE.getValue())){
				entity.setApprovalStatus(CrvaInvoicePreStatusEnums.REVOKED.getValue());
				entity.setApproveDate(tmsCrvatInvoicePreHService.getDatabaseServerDate());
				entity.setApprovalBy(ContextUtils.getCurrentUserName());
				tmsCrvatInvoicePreHService.update(entity);
			}*/
		}
	}
	
	@ResponseBody
	@RequestMapping(value = "/invoicePreProcessAgree", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void invoicePreProcessAgree(@RequestParam(value="id") String customerKeys) {
		String[] customerIds=customerKeys.split(",");	
		for(String customerId:customerIds){			
			TmsCrvatInvoicePreH tmsCrvatInvoicePreH = (TmsCrvatInvoicePreH) invoicePreService.get(TmsCrvatInvoicePreH.class, customerId);			
			tmsCrvatInvoicePreH.setApprovalStatus(CrvaInvoicePreStatusEnums.APPROVED.getValue());
			tmsCrvatInvoicePreH.setOrgId(ContextUtils.getCurrentOrgId());
			tmsCrvatInvoicePreH.setApprovalBy(ContextUtils.getCurrentUserName());
			invoicePreService.setAcceptStatus(tmsCrvatInvoicePreH);									
			/*AssertHelper.notEmpty_assert(customerId,"ID不能为空");
			TmsCrvatInvoicePreH entity=(TmsCrvatInvoicePreH)tmsCrvatInvoicePreHService.get(TmsCrvatInvoicePreH.class,customerId);
			if(entity.getApprovalStatus().equals(CrvaInvoicePreStatusEnums.TOBEAPPROVE.getValue())){
				entity.setApprovalStatus(CrvaInvoicePreStatusEnums.APPROVED.getValue());
				entity.setApproveDate(sever_date);
				entity.setApprovalBy(ContextUtils.getCurrentUserName());
				tmsCrvatInvoicePreHService.update(entity);
			}*/
		}
	}
	
	@ResponseBody
	@RequestMapping(value = "/jobtest", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void jobtest(@RequestParam(value="id") String customerKeys) {
		tmsCrvatInvoicePreHService.exeTmsCrvatInvoicePreJobToInvoice();
	}
	
	
}

