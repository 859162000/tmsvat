package com.deloitte.tms.base.taxsetting.controller;
// Generated by bo.wang with ling2.autoproject

import java.util.Date;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.base.taxsetting.model.TmsMdContract;
import com.deloitte.tms.base.taxsetting.model.TmsMdContractInParam;
import com.deloitte.tms.base.taxsetting.model.TmsMdProject;
import com.deloitte.tms.base.taxsetting.model.TmsMdProjectInParam;
import com.deloitte.tms.base.taxsetting.service.TmsMdContractService;
import com.deloitte.tms.base.taxsetting.service.TmsMdProjectService;
import com.deloitte.tms.pl.core.commons.exception.BusinessException;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.IdGenerator;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;
/**
 * Home object for domain model class TmsMdFlexValueSets.
 * @see com.deloitte.tms.base.taxsetting.model
 * @author lvzhiyu
 */
@Controller
@RequestMapping("tmsMdContractDevice")
public class TmsMdContractController extends BaseController{
	
	@Resource
	private TmsMdContractService tmsMdContractService;
	@Resource
	private TmsMdProjectService tmsMdProjectService;
	/**
	 * 跳转页面
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/initTmsMdContractDevice", method = RequestMethod.GET)
	public String initTmsMdContract()throws Exception{
		return "vat/tmsMdContractDevice/tmsMdContractDevice";
	}
	
	/**
	 * 数据初始化及数据查询
	 * @param parameter
	 * @return
	 * @throws Exception
	 */
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdContractPage", method = RequestMethod.POST)
	public DaoPage loadTmsMdContractPage(@RequestParam Map<String,Object> parameter,HttpServletResponse response) throws Exception {
		
		DaoPage daoPage = tmsMdContractService.findTmsMdContractByParams(parameter,Integer.parseInt(parameter.get("page").toString()),
				Integer.parseInt(parameter.get("rows").toString()));

		JSONObject result = new JSONObject();
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class,new JsonDateValueProcessor("yyyy-MM-dd"));
		
		 
		JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),jsonConfig);
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray);
		result.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
		return null;
	}
	
	
/**
 * 新增或修改合同
 * @param inParam
 * @throws Exception
 */
	@ResponseBody
	@RequestMapping(value = "/saveOrUpdateTmsMdContract", method = RequestMethod.POST)
	public void saveTmsMdFlexValueSets(TmsMdContractInParam inParam,HttpServletResponse response) throws Exception {
		
		JSONObject result = new JSONObject();
		
		TmsMdContract entity=tmsMdContractService.convertTmsMdContractInParamToEntity(inParam);
		entity.setEnabledFlag("1");
		if(AssertHelper.empty(entity.getId())||"0".equals(entity.getId())){
			entity.setId(IdGenerator.getUUID());
			
			TmsMdContract tmsMdContract = tmsMdContractService.getContractByNumber(entity.getContractNumber());
			if(AssertHelper.notEmpty(tmsMdContract)){
				result.put("status", false);
				result.put("errMsg", "编码为"+entity.getContractNumber()+"的合同已存在！！");
				retJson(response, result);
				return;
			}
			
			tmsMdContractService.save(entity);
		}else{
			tmsMdContractService.update(entity);
		}
		
		result.put("contract_id", entity.getId());
		result.put("status", true);
		retJson(response, result);
	}	
	
/**
 * 删除多条合同
 * @param ids
 */
	@ResponseBody
	@RequestMapping(value = "/removeTmsMdContracts", method = RequestMethod.POST)
	public void removeTmsMdFlexValueSetss(@RequestParam String ids) {
		AssertHelper.notEmpty_assert(ids,"需要删除的合同不能为空");
		String[] contractIds=ids.split(",");
		for(String contractId:contractIds){
			tmsMdContractService.removeTmsMdContracts(contractId);
		}
	}
	
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdProjectPage")
	public DaoPage loadTmsMdFlexValuesPage(@RequestParam Map<String,Object> parameter,HttpServletResponse response) throws Exception {
		DaoPage daoPage=tmsMdProjectService.findTmsMdProjectByParams(parameter,Integer.parseInt(parameter.get("page").toString()),Integer.parseInt(parameter.get("rows").toString()));
		JSONObject result = new JSONObject();
	    JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class,new JsonDateValueProcessor("yyyy-MM-dd"));
		 JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),jsonConfig);
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray);
		result.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
		return null;
	}
	
	
	/**
	 * 值数据增加修改
	 * @param inParam
	 * @throws Exception
	 */
	@ResponseBody
	@RequestMapping(value = "/saveOrUpdateProject")
	public void saveTmsMdFlexValues(TmsMdProjectInParam inParam,HttpServletResponse response) throws Exception {
		
		JSONObject result = new JSONObject();
		
		TmsMdProject entity=tmsMdProjectService.convertTmsMdProjectInParamToEntity(inParam);
		entity.setEnabledFlag("1");
		if(AssertHelper.empty(entity.getId())){
			entity.setId(IdGenerator.getUUID());
			tmsMdProjectService.save(entity);
		}else{
			tmsMdProjectService.update(entity);
		}
		result.put("status", true);
		retJson(response, result);
	}
	
	/**
	 * 删除多条项目
	 * @param ids
	 */
	@ResponseBody
	@RequestMapping(value = "/removeTmsMdProjects", method = RequestMethod.POST)
	public void removeTmsMdProjects(@RequestParam String ids) {
		AssertHelper.notEmpty_assert(ids,"需要删除的项目不能为空");
		String[] projectIds=ids.split(",");
		for(String projectId:projectIds){
			tmsMdProjectService.removeTmsMdProjects(projectId);
		}
	}
}

