package com.deloitte.tms.vat.purchinvoice.controller;
// Generated by bo.wang with ling2.autoproject

import java.util.Date;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;




//import com.deloitte.tms.pl.core.commons.springmvc.controller.BaseController;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.vat.core.common.ExcelProcess;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;
import com.deloitte.tms.vat.purchinvoice.service.TmsDrvatInvoiceTrxHService;


/**
 * Home object for domain model class TmsDrvatInvoiceTrxH.
 * @see com.deloitte.tms.vat.purchinvoice.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("tmsDrvatInvoiceTrxL")
public class TmsDrvatInTrxLController extends BaseController{
	
	@Resource
	TmsDrvatInvoiceTrxHService tmsDrvatInvoiceTrxHService;
	
	
	//@RequestMapping(value = "/jxfpdjMgt.do", method = RequestMethod.GET)
/*	public String initJxfpdj()throws Exception{
		return "vat/tmsdrvatinvoicetrxh/jxfpdj";
	}*/
	
	
	@RequestMapping(value = "/initDrvatInTrxL.do")
	public String initDrvatInTrxL()throws Exception{
		return "vat/tmsdrvatinvoicetrxh/tmsDrvatInTrxL";
	}

	
	
	
	@RequestMapping("/exportTemplate.do")
	public void exportTemplate(String exportPath,HttpServletResponse response){
		try{
			
			if(AssertHelper.empty(exportPath)){
				System.out.println("exportPath is null, so will use default desktop");
			}
		
			System.out.println("exportPath is :"+exportPath);
			
		ExcelProcess excelProcess = new ExcelProcess();
		String resultStr = excelProcess.outExcelTemplate(exportPath);
		
		if(resultStr==null || "".equals(resultStr.trim())){
			this.returnOk(response);
		}else{
			
			this.returnFail(response, resultStr);
		}
		
		
		
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	
	@RequestMapping("/importExcel.do")
	public void importExcel(String importExcelName,HttpServletResponse response){
		try{
			
			if(AssertHelper.empty(importExcelName)){
				System.out.println("expoimportExcelNamertPath is null, so will return ");
				this.returnFail(response, "请选择正确的Excel文件导入");
				return;
			}
		
		boolean b = this.tmsDrvatInvoiceTrxHService.importExcel(importExcelName);
		
		if(b){
			this.returnOk(response, "导入成功");
		}else{
			
			this.returnFail(response, "导入异常");
		}
			
		
		
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	
	@RequestMapping(value = "/searchTrxL.do")
	public void searchTrxL(@RequestParam Map<String,Object> parameter, HttpServletResponse response) throws Exception {
		
		Integer pageNumber=PageUtils.getPageNumber(parameter);
		Integer pageSize=PageUtils.getPageSize(parameter);	
		
		if(parameter!=null){
			parameter.remove("pageNumber");
			parameter.remove("pageSize");
		}
		
		DaoPage daoPage=tmsDrvatInvoiceTrxHService.findTmsDrvatInvoiceTrxLByParams2(parameter,pageNumber,pageSize);
		
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class,
				new JsonDateValueProcessor("yyyy-MM-dd"));
		JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(), jsonConfig);
		
		JSONObject result = new JSONObject();
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray.toString());
		retJson(response, result);
		
		
		//return daoPage;
	}
	
}

