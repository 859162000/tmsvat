package com.deloitte.tms.base.taxsetting.controller;
// Generated by bo.wang with ling2.autoproject

import java.io.IOException;
import java.io.PrintWriter;
import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;



import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
//import com.deloitte.tms.pl.core.commons.springmvc.controller.BaseController;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.IdGenerator;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;
import com.deloitte.tms.base.taxsetting.model.TmsMdOrgParameter;
import com.deloitte.tms.base.taxsetting.model.TmsMdOrgParameterInParam;
import com.deloitte.tms.base.taxsetting.service.TmsMdOrgParameterService;

/**
 * Home object for domain model class TmsMdOrgParameter.
 * @see com.deloitte.tms.base.masterdata.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("tmsMdOrgParameter")
public class TmsMdOrgParameterController extends BaseController{
	@Resource
	TmsMdOrgParameterService tmsMdOrgParameterService;
	
	@RequestMapping(value = "/initTmsMdOrgParameter", method = RequestMethod.GET)
	public String initTmsMdOrgParameter()throws Exception{
		return "vat/tmsmdorgparameter/tmsMdOrgParameter";
	}
	
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdOrgParameterPage", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void loadTmsMdOrgParameterPage(@RequestParam Map<String,Object> parameter,HttpServletResponse response) throws Exception {
		DaoPage daoPage=tmsMdOrgParameterService.findTmsMdOrgParameterByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		 
		JSONObject result = new JSONObject();
		 JsonConfig jsonConfig = new JsonConfig();  
		 jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor()); 
		 JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),jsonConfig);
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray);// daoPage.getr
		result.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
		
		//return null;
	}
	@ResponseBody
	@RequestMapping(value = "/saveTmsMdOrgParameter", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTmsMdOrgParameter(TmsMdOrgParameterInParam inParam) throws Exception {
		TmsMdOrgParameter entity=tmsMdOrgParameterService.convertTmsMdOrgParameterInParamToEntity(inParam);
		if(AssertHelper.empty(entity.getId())){	
			entity.setId(IdGenerator.getUUID());	
			tmsMdOrgParameterService.save(entity);
		}else{
			tmsMdOrgParameterService.update(entity);
		}		
		inParam.setId(entity.getId());
	}	
	@ResponseBody
	@RequestMapping(value = "/removeTmsMdOrgParameters", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeTmsMdOrgParameters(@RequestParam String ids) {
		AssertHelper.notEmpty_assert(ids,"需要删除的用户不能为空");
		String[] tmsMdOrgParameterIds=ids.split(",");
		//for(String tmsMdOrgParameterId:tmsMdOrgParameterIds){
			
		//}
	}
	@ResponseBody
	@RequestMapping(value = "/loadTmsMdOrgParameter", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<TmsMdOrgParameterInParam> loadTmsMdOrgParameter(@RequestParam Map<String, Object> map) throws Exception {
		List result=tmsMdOrgParameterService.findTmsMdOrgParameterByParams(map);
		return result;
	}
	@ResponseBody
	@RequestMapping(value = "/loadAddTmsMdOrgParameter", method = RequestMethod.POST)
	public TmsMdOrgParameterInParam loadAddTmsMdOrgParameter(@RequestParam Map<String, Object> map) throws Exception {
		TmsMdOrgParameterInParam inParam=new TmsMdOrgParameterInParam();
		return inParam;
	}
	@ResponseBody
	@RequestMapping(value = "/loadModifyTmsMdOrgParameter", method = RequestMethod.POST)
	public TmsMdOrgParameterInParam loadModifyTmsMdOrgParameter(@RequestParam Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		TmsMdOrgParameter entity=(TmsMdOrgParameter)tmsMdOrgParameterService.get(TmsMdOrgParameter.class,id.toString());
		TmsMdOrgParameterInParam inParam=tmsMdOrgParameterService.convertTmsMdOrgParameterToInParam(entity);
		return inParam;
	}
	
	@ResponseBody
	@RequestMapping(value = "/updateModifyTmsMdOrgParameter", method = RequestMethod.POST)
	public void updateModifyTmsMdOrgParameter(TmsMdOrgParameterInParam inParam) throws Exception {
		TmsMdOrgParameter entity=(TmsMdOrgParameter)tmsMdOrgParameterService.get(TmsMdOrgParameter.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		tmsMdOrgParameterService.update(entity);
	}

	
}

