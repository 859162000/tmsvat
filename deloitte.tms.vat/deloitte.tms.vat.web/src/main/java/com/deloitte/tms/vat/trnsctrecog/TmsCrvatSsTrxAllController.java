package com.deloitte.tms.vat.trnsctrecog;
// Generated by bo.wang with ling2.autoproject

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.deloitte.tms.base.masterdata.model.BaseOrg;
import com.deloitte.tms.base.masterdata.model.Customer;
import com.deloitte.tms.pl.core.commons.support.DaoPage;
import com.deloitte.tms.pl.core.commons.utils.AssertHelper;
import com.deloitte.tms.pl.core.commons.utils.reflect.ReflectUtils;
import com.deloitte.tms.pl.core.commons.utils.PageUtils;
import com.deloitte.tms.vat.controller.BaseController;
import com.deloitte.tms.vat.core.common.JsonDateValueProcessor;
import com.deloitte.tms.vat.trnsctrecog.model.TmsCrvatSsTrxAll;
import com.deloitte.tms.vat.trnsctrecog.model.TmsCrvatSsTrxAllInParam;
import com.deloitte.tms.vat.trnsctrecog.service.TmsCrvatSsTrxAllService;
/**
 * Home object for domain model class TmsCrvatSsTrxAll.
 * @see com.deloitte.tms.vat.trnsctrecog.model
 * @author Hibernate Tools
 */
@Controller
@RequestMapping("tmsCrvatSsTrxAll")
public class TmsCrvatSsTrxAllController extends BaseController{
	@Resource
	TmsCrvatSsTrxAllService tmsCrvatSsTrxAllService;
	@RequestMapping(value = "/TmsCrvatSsTrxAllInit", method = RequestMethod.GET)
	public String TmsCrvatSsTrxAllInit()throws Exception{
		return "vat/trnsctrecog/transactionSummary";
	}
	
	//@ResponseBody springmvc返回返回jason
	@RequestMapping(value = "/loadTmsCrvatSsTrxAllPage", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void loadTmsCrvatSsTrxAllPage(@RequestParam Map<String,Object> parameter,HttpServletResponse response) throws Exception {
		DaoPage daoPage=tmsCrvatSsTrxAllService.findTmsCrvatSsTrxAllByParams(parameter,PageUtils.getPageNumber(parameter),PageUtils.getPageSize(parameter));
		JsonConfig jsonConfig = new JsonConfig();  
		 jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor()); 
		 JSONArray jsonArray = JSONArray.fromObject(daoPage.getResult(),jsonConfig);
		 JSONObject result = new JSONObject();
		result.put("total", daoPage.getRecordCount());
		result.put("rows", jsonArray.toString());//daoPage.getr
		result.put("pages", daoPage.getPageCount());
		result.put("success", true);
		retJson(response, result);
	}
	
	@ResponseBody
	@RequestMapping(value = "/saveTmsCrvatSsTrxAll", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void saveTmsCrvatSsTrxAll(TmsCrvatSsTrxAllInParam inParam) throws Exception {
		TmsCrvatSsTrxAll entity=tmsCrvatSsTrxAllService.convertTmsCrvatSsTrxAllInParamToEntity(inParam);
		if(entity.getId()==null){
			tmsCrvatSsTrxAllService.save(entity);
		}
		else{
			tmsCrvatSsTrxAllService.update(entity);
		}
		inParam.setId(entity.getId());
	}	
	@ResponseBody
	@RequestMapping(value = "/removeTmsCrvatSsTrxAlls", method = RequestMethod.POST)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public void removeTmsCrvatSsTrxAlls(@RequestParam String tmsCrvatSsTrxAllKeys) {
		AssertHelper.notEmpty_assert(tmsCrvatSsTrxAllKeys,"需要删除的用户不能为空");
		String[] tmsCrvatSsTrxAllIds=tmsCrvatSsTrxAllKeys.split(",");
		//for(String tmsCrvatSsTrxAllId:tmsCrvatSsTrxAllIds){
			
		//}
	}
	@ResponseBody
	@RequestMapping(value = "/loadTmsCrvatSsTrxAll", method = RequestMethod.GET)
	//@RoleAnnotation(roles=RoleDef.ECOMMERCE_ADMIN)
	public Collection<TmsCrvatSsTrxAllInParam> loadTmsCrvatSsTrxAll(Map<String, Object> map) throws Exception {
		List result=tmsCrvatSsTrxAllService.findTmsCrvatSsTrxAllByParams(map);
		return result;
	}
	
	public TmsCrvatSsTrxAllInParam loadAddTmsCrvatSsTrxAll(Map<String, Object> map) throws Exception {
		TmsCrvatSsTrxAllInParam inParam=new TmsCrvatSsTrxAllInParam();
		return inParam;
	}
	
	public TmsCrvatSsTrxAllInParam loadModifyTmsCrvatSsTrxAll(Map<String, Object> map) throws Exception {
		Object id=map.get("id");
		AssertHelper.notEmpty_assert(id,"编辑的主键不能为空");
		TmsCrvatSsTrxAll entity=(TmsCrvatSsTrxAll)tmsCrvatSsTrxAllService.get(TmsCrvatSsTrxAll.class,Long.parseLong(id.toString()));
		TmsCrvatSsTrxAllInParam inParam=tmsCrvatSsTrxAllService.convertTmsCrvatSsTrxAllToInParam(entity);
		return inParam;
	}
	
	
	
	public void updateModifyTmsCrvatSsTrxAll(TmsCrvatSsTrxAllInParam inParam) throws Exception {
		TmsCrvatSsTrxAll entity=(TmsCrvatSsTrxAll)tmsCrvatSsTrxAllService.get(TmsCrvatSsTrxAll.class,inParam.getId());
		ReflectUtils.copyProperties(inParam, entity);
		tmsCrvatSsTrxAllService.update(entity);
	}
}

